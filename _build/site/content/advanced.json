{"version":2,"kind":"Article","sha256":"44d3625a3c8b9e0bd7168a8357d4fe0a80897f9bc0afc1f6b0bc90075154be2e","slug":"advanced","location":"/03-scientific-computing-with-python/04-parallel-and-high-performance-computing/08-advanced.md","dependencies":[],"frontmatter":{"title":"Chapter 8: Advanced Python Topics (Optional Sampler)","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/04-parallel-and-high-performance-computing/08-advanced.md","exports":[{"format":"md","filename":"08-advanced.md","url":"/08-advanced-13712885ff20d476d95c679dad1607bd.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This chapter provides a sampling of advanced Python topics. Choose sections relevant to your projects.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MaxrsS3yFD"}],"key":"uwS6Wjma8H"}],"key":"wkrOC6DwId"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pNCcY2kV1g"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"gMC83oUiQm"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"This optional chapter introduces:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"vG6pFNSXBm"}],"key":"m3jpGbGxxD"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Async programming for concurrent I/O operations","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rGND6G70vk"}],"key":"USBuJZlNx9"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Advanced decorators and descriptors","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JApSMY4pVr"}],"key":"Tj4VOlJUdv"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Context managers for resource management","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"fJtX0EkXP1"}],"key":"rJkL9HRG9v"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Type hints and static typing","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"REOYp4BQ2D"}],"key":"VDKqFzmvHt"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Metaclasses and introspection","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"lZg20sVRhj"}],"key":"GYmHDRUGJB"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Package development and distribution","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"vNmINFypIH"}],"key":"GDctw8cZkG"}],"key":"zNBH9k6i27"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"8.1 Async Programming for Concurrent Operations","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"jgh59SkOpw"}],"identifier":"id-8-1-async-programming-for-concurrent-operations","label":"8.1 Async Programming for Concurrent Operations","html_id":"id-8-1-async-programming-for-concurrent-operations","implicit":true,"key":"pcyqQ9nSLD"},{"type":"heading","depth":3,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"When Async Makes Sense","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Eh6MnsluQG"}],"identifier":"when-async-makes-sense","label":"When Async Makes Sense","html_id":"when-async-makes-sense","implicit":true,"key":"z6kh1VMa83"},{"type":"code","lang":"python","value":"import asyncio\nimport aiohttp\nimport time\n\n# Synchronous version - slow for I/O bound tasks\ndef fetch_catalog_sync(catalog_ids):\n    \"\"\"Fetch multiple catalogs synchronously.\"\"\"\n    results = []\n    for cat_id in catalog_ids:\n        # Simulate HTTP request\n        time.sleep(0.5)  # Network delay\n        results.append(f\"Catalog {cat_id} data\")\n    return results\n\n# Asynchronous version - much faster for I/O\nasync def fetch_catalog_async(session, catalog_id):\n    \"\"\"Fetch single catalog asynchronously.\"\"\"\n    # Simulate async HTTP request\n    await asyncio.sleep(0.5)  # Network delay\n    return f\"Catalog {catalog_id} data\"\n\nasync def fetch_all_catalogs(catalog_ids):\n    \"\"\"Fetch multiple catalogs concurrently.\"\"\"\n    # In real code, use aiohttp.ClientSession()\n    tasks = []\n    async with aiohttp.ClientSession() as session:\n        for cat_id in catalog_ids:\n            task = fetch_catalog_async(session, cat_id)\n            tasks.append(task)\n        \n        results = await asyncio.gather(*tasks)\n    return results\n\n# Telescope control example\nclass AsyncTelescopeController:\n    \"\"\"Control telescope with async operations.\"\"\"\n    \n    def __init__(self):\n        self.position = {'ra': 0, 'dec': 0}\n        self.filter = 'V'\n        self.camera_ready = False\n    \n    async def slew_to(self, ra, dec):\n        \"\"\"Slew telescope to position.\"\"\"\n        print(f\"Starting slew to RA={ra}, Dec={dec}\")\n        await asyncio.sleep(3)  # Simulate slew time\n        self.position = {'ra': ra, 'dec': dec}\n        print(\"Slew complete\")\n    \n    async def change_filter(self, filter_name):\n        \"\"\"Change filter wheel.\"\"\"\n        print(f\"Changing filter to {filter_name}\")\n        await asyncio.sleep(1)\n        self.filter = filter_name\n        print(\"Filter changed\")\n    \n    async def prepare_camera(self):\n        \"\"\"Prepare CCD camera.\"\"\"\n        print(\"Preparing camera\")\n        await asyncio.sleep(2)\n        self.camera_ready = True\n        print(\"Camera ready\")\n    \n    async def observe_target(self, ra, dec, filter_name, exposure):\n        \"\"\"Complete observation sequence.\"\"\"\n        # Run preparation tasks concurrently\n        tasks = [\n            self.slew_to(ra, dec),\n            self.change_filter(filter_name),\n            self.prepare_camera()\n        ]\n        \n        await asyncio.gather(*tasks)\n        \n        # Take exposure\n        print(f\"Starting {exposure}s exposure\")\n        await asyncio.sleep(exposure / 10)  # Simulate faster\n        print(\"Exposure complete\")\n        \n        return {'ra': ra, 'dec': dec, 'filter': filter_name, 'data': 'image_data'}\n\n# Example usage\nasync def observation_sequence():\n    \"\"\"Run a sequence of observations.\"\"\"\n    telescope = AsyncTelescopeController()\n    \n    targets = [\n        (10.68, 41.27, 'V', 300),  # M31\n        (5.58, -5.39, 'R', 600),   # M42\n        (13.42, -11.16, 'B', 450)  # M104\n    ]\n    \n    results = []\n    for ra, dec, filt, exp in targets:\n        result = await telescope.observe_target(ra, dec, filt, exp)\n        results.append(result)\n    \n    return results\n\n# Run async code\n# asyncio.run(observation_sequence())","position":{"start":{"line":18,"column":1},"end":{"line":120,"column":1}},"key":"gG1icavdtv"},{"type":"heading","depth":3,"position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"children":[{"type":"text","value":"Async for Real-Time Data Streams","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"oBV7j6YMHy"}],"identifier":"async-for-real-time-data-streams","label":"Async for Real-Time Data Streams","html_id":"async-for-real-time-data-streams","implicit":true,"key":"AFDp28Z0Lh"},{"type":"code","lang":"python","value":"class AsyncDataStreamProcessor:\n    \"\"\"Process real-time data streams asynchronously.\"\"\"\n    \n    async def generate_telemetry(self, n_points=100):\n        \"\"\"Simulate telemetry data stream.\"\"\"\n        for i in range(n_points):\n            await asyncio.sleep(0.1)  # Data arrives every 100ms\n            \n            data = {\n                'timestamp': time.time(),\n                'temperature': 20 + np.random.randn(),\n                'pressure': 1013 + np.random.randn() * 10,\n                'seeing': 0.8 + np.random.random() * 0.5\n            }\n            yield data\n    \n    async def process_stream(self):\n        \"\"\"Process incoming data stream.\"\"\"\n        buffer = []\n        \n        async for data in self.generate_telemetry():\n            buffer.append(data)\n            \n            # Process every 10 points\n            if len(buffer) >= 10:\n                await self.analyze_buffer(buffer)\n                buffer = []\n    \n    async def analyze_buffer(self, buffer):\n        \"\"\"Analyze buffered data.\"\"\"\n        temps = [d['temperature'] for d in buffer]\n        seeing = [d['seeing'] for d in buffer]\n        \n        print(f\"Average temp: {np.mean(temps):.1f}°C, \"\n              f\"seeing: {np.mean(seeing):.2f}\\\"\")\n\n# Run: asyncio.run(AsyncDataStreamProcessor().process_stream())","position":{"start":{"line":124,"column":1},"end":{"line":162,"column":1}},"key":"Atr8UK8l7i"},{"type":"heading","depth":2,"position":{"start":{"line":164,"column":1},"end":{"line":164,"column":1}},"children":[{"type":"text","value":"8.2 Advanced Decorators","position":{"start":{"line":164,"column":1},"end":{"line":164,"column":1}},"key":"oUyf57OmL3"}],"identifier":"id-8-2-advanced-decorators","label":"8.2 Advanced Decorators","html_id":"id-8-2-advanced-decorators","implicit":true,"key":"IKJOlp3q1s"},{"type":"heading","depth":3,"position":{"start":{"line":166,"column":1},"end":{"line":166,"column":1}},"children":[{"type":"text","value":"Parametrized Decorators","position":{"start":{"line":166,"column":1},"end":{"line":166,"column":1}},"key":"y29QvLpBjv"}],"identifier":"parametrized-decorators","label":"Parametrized Decorators","html_id":"parametrized-decorators","implicit":true,"key":"qLMHqOzAkA"},{"type":"code","lang":"python","value":"def retry(max_attempts=3, delay=1.0, exceptions=(Exception,)):\n    \"\"\"\n    Decorator to retry failed operations.\n    \n    Useful for network requests, hardware control, etc.\n    \"\"\"\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except exceptions as e:\n                    if attempt == max_attempts - 1:\n                        raise\n                    print(f\"Attempt {attempt + 1} failed: {e}\")\n                    time.sleep(delay)\n            return None\n        return wrapper\n    return decorator\n\n@retry(max_attempts=3, delay=0.5, exceptions=(ConnectionError, TimeoutError))\ndef fetch_observation_data(obs_id):\n    \"\"\"Fetch observation with automatic retry.\"\"\"\n    if np.random.random() < 0.7:  # 70% chance of failure\n        raise ConnectionError(\"Network error\")\n    return f\"Data for observation {obs_id}\"\n\n# Test retry decorator\n# try:\n#     data = fetch_observation_data(\"OBS123\")\n#     print(f\"Success: {data}\")\n# except Exception as e:\n#     print(f\"Failed after retries: {e}\")","position":{"start":{"line":168,"column":1},"end":{"line":202,"column":1}},"key":"qQmhut4QV4"},{"type":"heading","depth":3,"position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"children":[{"type":"text","value":"Class Decorators","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"key":"W4dLToCPif"}],"identifier":"class-decorators","label":"Class Decorators","html_id":"class-decorators","implicit":true,"key":"McxIrStlH4"},{"type":"code","lang":"python","value":"def add_validation(cls):\n    \"\"\"Class decorator to add validation to all setters.\"\"\"\n    \n    original_setattr = cls.__setattr__\n    \n    def validated_setattr(self, name, value):\n        # Check if there's a validator method\n        validator_name = f'validate_{name}'\n        if hasattr(self, validator_name):\n            validator = getattr(self, validator_name)\n            value = validator(value)\n        \n        original_setattr(self, name, value)\n    \n    cls.__setattr__ = validated_setattr\n    return cls\n\n@add_validation\nclass ValidatedStar:\n    \"\"\"Star with automatic validation.\"\"\"\n    \n    def __init__(self, mass, temperature):\n        self.mass = mass\n        self.temperature = temperature\n    \n    def validate_mass(self, value):\n        \"\"\"Validate stellar mass.\"\"\"\n        if value <= 0:\n            raise ValueError(\"Mass must be positive\")\n        if value > 150:\n            raise ValueError(\"Mass exceeds stellar limit\")\n        return value\n    \n    def validate_temperature(self, value):\n        \"\"\"Validate temperature.\"\"\"\n        if value < 2000:\n            raise ValueError(\"Temperature too low for star\")\n        if value > 50000:\n            raise ValueError(\"Temperature too high\")\n        return value\n\n# Validation happens automatically\nstar = ValidatedStar(1.0, 5778)\n# star.mass = -1  # Raises ValueError","position":{"start":{"line":206,"column":1},"end":{"line":251,"column":1}},"key":"OZWGMJCnMM"},{"type":"heading","depth":2,"position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"8.3 Descriptors and Properties","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"kTFdIQoXJA"}],"identifier":"id-8-3-descriptors-and-properties","label":"8.3 Descriptors and Properties","html_id":"id-8-3-descriptors-and-properties","implicit":true,"key":"FUnhKScslk"},{"type":"heading","depth":3,"position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"children":[{"type":"text","value":"Custom Descriptors","position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"key":"Mz3GAkM5n1"}],"identifier":"custom-descriptors","label":"Custom Descriptors","html_id":"custom-descriptors","implicit":true,"key":"ykPbHDDnQU"},{"type":"code","lang":"python","value":"class PhysicalQuantity:\n    \"\"\"Descriptor for physical quantities with units.\"\"\"\n    \n    def __init__(self, name, unit, min_value=None, max_value=None):\n        self.name = name\n        self.unit = unit\n        self.min_value = min_value\n        self.max_value = max_value\n        self.data = {}\n    \n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return self.data.get(id(instance), None)\n    \n    def __set__(self, instance, value):\n        if self.min_value is not None and value < self.min_value:\n            raise ValueError(f\"{self.name} must be >= {self.min_value} {self.unit}\")\n        if self.max_value is not None and value > self.max_value:\n            raise ValueError(f\"{self.name} must be <= {self.max_value} {self.unit}\")\n        \n        self.data[id(instance)] = value\n    \n    def __delete__(self, instance):\n        del self.data[id(instance)]\n\nclass Telescope:\n    \"\"\"Telescope with physical quantity descriptors.\"\"\"\n    \n    aperture = PhysicalQuantity('aperture', 'm', min_value=0.1, max_value=100)\n    focal_length = PhysicalQuantity('focal_length', 'm', min_value=0.1)\n    elevation = PhysicalQuantity('elevation', 'degrees', min_value=0, max_value=90)\n    \n    def __init__(self, aperture, focal_length):\n        self.aperture = aperture\n        self.focal_length = focal_length\n        self.elevation = 45  # Default\n    \n    @property\n    def f_ratio(self):\n        \"\"\"Calculate f-ratio.\"\"\"\n        return self.focal_length / self.aperture\n\n# Use descriptors\nscope = Telescope(2.4, 57.6)  # Hubble\nprint(f\"f-ratio: f/{scope.f_ratio:.1f}\")\n# scope.aperture = -1  # Raises ValueError","position":{"start":{"line":257,"column":1},"end":{"line":305,"column":1}},"key":"XkQiwF6tlk"},{"type":"heading","depth":2,"position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"children":[{"type":"text","value":"8.4 Context Managers","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"key":"nCUoxijRVt"}],"identifier":"id-8-4-context-managers","label":"8.4 Context Managers","html_id":"id-8-4-context-managers","implicit":true,"key":"VMT0myiNXf"},{"type":"heading","depth":3,"position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"children":[{"type":"text","value":"Custom Context Managers","position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"key":"e9eP546FEn"}],"identifier":"custom-context-managers","label":"Custom Context Managers","html_id":"custom-context-managers","implicit":true,"key":"pXe0tpaB8E"},{"type":"code","lang":"python","value":"class ObservationSession:\n    \"\"\"Context manager for observation sessions.\"\"\"\n    \n    def __init__(self, observer, target):\n        self.observer = observer\n        self.target = target\n        self.start_time = None\n        self.log = []\n    \n    def __enter__(self):\n        \"\"\"Start observation session.\"\"\"\n        self.start_time = time.time()\n        self.log.append(f\"Session started for {self.target}\")\n        print(f\"Beginning observation of {self.target}\")\n        \n        # Initialize equipment\n        self._initialize_equipment()\n        \n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"End observation session.\"\"\"\n        elapsed = time.time() - self.start_time\n        \n        if exc_type is not None:\n            self.log.append(f\"Session failed: {exc_val}\")\n            print(f\"Error during observation: {exc_val}\")\n        else:\n            self.log.append(f\"Session completed successfully\")\n        \n        self.log.append(f\"Duration: {elapsed:.1f} seconds\")\n        \n        # Cleanup\n        self._shutdown_equipment()\n        self._save_log()\n        \n        # Return False to propagate exceptions\n        return False\n    \n    def _initialize_equipment(self):\n        \"\"\"Initialize telescope and camera.\"\"\"\n        print(\"  Initializing equipment...\")\n        time.sleep(0.5)\n    \n    def _shutdown_equipment(self):\n        \"\"\"Safely shutdown equipment.\"\"\"\n        print(\"  Shutting down equipment...\")\n        time.sleep(0.5)\n    \n    def _save_log(self):\n        \"\"\"Save observation log.\"\"\"\n        print(f\"  Log saved: {len(self.log)} entries\")\n    \n    def take_exposure(self, duration):\n        \"\"\"Take an exposure.\"\"\"\n        self.log.append(f\"Exposure: {duration}s\")\n        time.sleep(duration / 10)  # Simulate\n        return f\"Image data for {duration}s exposure\"\n\n# Use context manager\nwith ObservationSession(\"Observer1\", \"M31\") as session:\n    image1 = session.take_exposure(30)\n    image2 = session.take_exposure(60)\n    print(f\"  Captured 2 images\")\n\n# Equipment is automatically cleaned up","position":{"start":{"line":311,"column":1},"end":{"line":378,"column":1}},"key":"xKCgFpGveA"},{"type":"heading","depth":3,"position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"children":[{"type":"text","value":"Contextlib Utilities","position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"key":"YWy9tOP0rU"}],"identifier":"contextlib-utilities","label":"Contextlib Utilities","html_id":"contextlib-utilities","implicit":true,"key":"Bctv9PiqLj"},{"type":"code","lang":"python","value":"from contextlib import contextmanager, suppress\n\n@contextmanager\ndef temporary_seed(seed):\n    \"\"\"Temporarily set random seed.\"\"\"\n    state = np.random.get_state()\n    np.random.seed(seed)\n    try:\n        yield\n    finally:\n        np.random.set_state(state)\n\n# Use temporary seed\nprint(\"Random without seed:\", np.random.random())\n\nwith temporary_seed(42):\n    print(\"Random with seed 42:\", np.random.random())\n    print(\"Again with seed 42:\", np.random.random())\n\nprint(\"Random without seed:\", np.random.random())\n\n# Suppress specific exceptions\nwith suppress(FileNotFoundError):\n    os.remove('nonexistent_file.txt')  # Doesn't raise error","position":{"start":{"line":382,"column":1},"end":{"line":407,"column":1}},"key":"YGIqqs73eP"},{"type":"heading","depth":2,"position":{"start":{"line":409,"column":1},"end":{"line":409,"column":1}},"children":[{"type":"text","value":"8.5 Type Hints and Static Typing","position":{"start":{"line":409,"column":1},"end":{"line":409,"column":1}},"key":"FQAwechNgn"}],"identifier":"id-8-5-type-hints-and-static-typing","label":"8.5 Type Hints and Static Typing","html_id":"id-8-5-type-hints-and-static-typing","implicit":true,"key":"wxaVVWgLcy"},{"type":"heading","depth":3,"position":{"start":{"line":411,"column":1},"end":{"line":411,"column":1}},"children":[{"type":"text","value":"Advanced Type Hints","position":{"start":{"line":411,"column":1},"end":{"line":411,"column":1}},"key":"rki0OQUGaA"}],"identifier":"advanced-type-hints","label":"Advanced Type Hints","html_id":"advanced-type-hints","implicit":true,"key":"G70fzNEsTO"},{"type":"code","lang":"python","value":"from typing import (\n    Union, Optional, List, Dict, Tuple, \n    TypeVar, Generic, Protocol, Literal,\n    overload, cast\n)\nfrom typing_extensions import TypedDict\n\n# Type variables for generics\nT = TypeVar('T', bound=float)\n\nclass Spectrum(Generic[T]):\n    \"\"\"Generic spectrum class.\"\"\"\n    \n    def __init__(self, wavelengths: List[T], fluxes: List[T]) -> None:\n        self.wavelengths = wavelengths\n        self.fluxes = fluxes\n    \n    def normalize(self) -> 'Spectrum[T]':\n        \"\"\"Normalize spectrum.\"\"\"\n        max_flux = max(self.fluxes)\n        normalized = [f/max_flux for f in self.fluxes]\n        return Spectrum(self.wavelengths, normalized)\n\n# Typed dictionaries for structured data\nclass ObservationData(TypedDict):\n    \"\"\"Type hints for observation dictionary.\"\"\"\n    target: str\n    ra: float\n    dec: float\n    filter: Literal['U', 'B', 'V', 'R', 'I']\n    exposure: float\n    airmass: Optional[float]\n\ndef process_observation(data: ObservationData) -> Dict[str, float]:\n    \"\"\"Process observation with type checking.\"\"\"\n    # Type checker knows the structure\n    magnitude = -2.5 * np.log10(data['exposure'])\n    \n    if data['airmass'] is not None:\n        magnitude += 0.2 * data['airmass']  # Extinction\n    \n    return {'magnitude': magnitude}\n\n# Protocol for duck typing with types\nclass Plottable(Protocol):\n    \"\"\"Protocol for objects that can be plotted.\"\"\"\n    \n    def get_x_data(self) -> List[float]: ...\n    def get_y_data(self) -> List[float]: ...\n    def get_label(self) -> str: ...\n\ndef plot_data(obj: Plottable) -> None:\n    \"\"\"Plot any object following Plottable protocol.\"\"\"\n    x = obj.get_x_data()\n    y = obj.get_y_data()\n    label = obj.get_label()\n    # plt.plot(x, y, label=label)\n\n# Function overloading\n@overload\ndef load_data(filename: str) -> np.ndarray: ...\n\n@overload\ndef load_data(filename: str, return_header: Literal[True]) -> Tuple[np.ndarray, Dict]: ...\n\ndef load_data(filename, return_header=False):\n    \"\"\"Load data with optional header.\"\"\"\n    data = np.random.randn(100, 100)\n    header = {'OBJECT': 'M31', 'EXPTIME': 300}\n    \n    if return_header:\n        return data, header\n    return data","position":{"start":{"line":413,"column":1},"end":{"line":487,"column":1}},"key":"o3vrr7KlBI"},{"type":"heading","depth":2,"position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"children":[{"type":"text","value":"8.6 Metaclasses and Introspection","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"key":"RFn5beoC26"}],"identifier":"id-8-6-metaclasses-and-introspection","label":"8.6 Metaclasses and Introspection","html_id":"id-8-6-metaclasses-and-introspection","implicit":true,"key":"EE2sdc4KV1"},{"type":"heading","depth":3,"position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"children":[{"type":"text","value":"Understanding Metaclasses","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"key":"EsHzwdhVxT"}],"identifier":"understanding-metaclasses","label":"Understanding Metaclasses","html_id":"understanding-metaclasses","implicit":true,"key":"rFDW4JUFHZ"},{"type":"code","lang":"python","value":"class SingletonMeta(type):\n    \"\"\"Metaclass for creating singleton classes.\"\"\"\n    \n    _instances = {}\n    \n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass ObservatoryConfig(metaclass=SingletonMeta):\n    \"\"\"Singleton configuration class.\"\"\"\n    \n    def __init__(self):\n        self.location = \"Palomar\"\n        self.latitude = 33.36\n        self.longitude = -116.86\n        self.elevation = 1706\n        print(\"Creating config instance\")\n\n# Only one instance ever created\nconfig1 = ObservatoryConfig()\nconfig2 = ObservatoryConfig()\nprint(f\"Same instance? {config1 is config2}\")\n\n# Automatic registration metaclass\nclass RegisteredMeta(type):\n    \"\"\"Metaclass that registers all subclasses.\"\"\"\n    \n    registry = {}\n    \n    def __new__(mcs, name, bases, namespace):\n        cls = super().__new__(mcs, name, bases, namespace)\n        \n        # Register non-base classes\n        if bases:\n            mcs.registry[name] = cls\n        \n        return cls\n\nclass Instrument(metaclass=RegisteredMeta):\n    \"\"\"Base instrument class.\"\"\"\n    pass\n\nclass CCD(Instrument):\n    \"\"\"CCD camera.\"\"\"\n    pass\n\nclass Spectrograph(Instrument):\n    \"\"\"Spectrograph.\"\"\"\n    pass\n\nprint(f\"Registered instruments: {list(Instrument.registry.keys())}\")","position":{"start":{"line":493,"column":1},"end":{"line":547,"column":1}},"key":"rCPAVTMA2N"},{"type":"heading","depth":3,"position":{"start":{"line":549,"column":1},"end":{"line":549,"column":1}},"children":[{"type":"text","value":"Introspection and Reflection","position":{"start":{"line":549,"column":1},"end":{"line":549,"column":1}},"key":"KKD1jDst8c"}],"identifier":"introspection-and-reflection","label":"Introspection and Reflection","html_id":"introspection-and-reflection","implicit":true,"key":"T6d6JExcEr"},{"type":"code","lang":"python","value":"import inspect\n\nclass IntrospectableObject:\n    \"\"\"Object with introspection capabilities.\"\"\"\n    \n    def __init__(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n    \n    def introspect(self):\n        \"\"\"Examine object's attributes and methods.\"\"\"\n        print(f\"Class: {self.__class__.__name__}\")\n        print(f\"Module: {self.__class__.__module__}\")\n        \n        print(\"\\nAttributes:\")\n        for name, value in inspect.getmembers(self):\n            if not name.startswith('_') and not inspect.ismethod(value):\n                print(f\"  {name}: {value}\")\n        \n        print(\"\\nMethods:\")\n        for name, method in inspect.getmembers(self, predicate=inspect.ismethod):\n            if not name.startswith('_'):\n                sig = inspect.signature(method)\n                print(f\"  {name}{sig}\")\n    \n    def describe_method(self, method_name):\n        \"\"\"Get detailed info about a method.\"\"\"\n        method = getattr(self, method_name)\n        sig = inspect.signature(method)\n        \n        print(f\"Method: {method_name}\")\n        print(f\"Signature: {sig}\")\n        print(f\"Parameters:\")\n        \n        for param_name, param in sig.parameters.items():\n            print(f\"  {param_name}: {param.annotation if param.annotation != param.empty else 'Any'}\")\n        \n        if method.__doc__:\n            print(f\"Docstring: {method.__doc__.strip()}\")\n\n# Dynamic class creation\ndef create_filter_class(filter_name, wavelength):\n    \"\"\"Dynamically create filter classes.\"\"\"\n    \n    def __init__(self):\n        self.name = filter_name\n        self.wavelength = wavelength\n    \n    def info(self):\n        return f\"{self.name} filter at {self.wavelength}nm\"\n    \n    # Create class dynamically\n    FilterClass = type(\n        f'{filter_name}Filter',\n        (object,),\n        {\n            '__init__': __init__,\n            'info': info,\n            'filter_type': filter_name\n        }\n    )\n    \n    return FilterClass\n\n# Create filter classes dynamically\nVFilter = create_filter_class('V', 550)\nRFilter = create_filter_class('R', 700)\n\nv_filter = VFilter()\nprint(f\"Dynamic class: {v_filter.info()}\")\n\n## 8.7 Packaging and Distribution\n\n### Creating a Python Package\n\n```python\n# Example package structure for an astronomy library\n\"\"\"\nastrotools/\n├── setup.py\n├── setup.cfg\n├── pyproject.toml\n├── README.md\n├── LICENSE\n├── requirements.txt\n├── astrotools/\n│   ├── __init__.py\n│   ├── photometry/\n│   │   ├── __init__.py\n│   │   ├── aperture.py\n│   │   └── psf.py\n│   ├── spectroscopy/\n│   │   ├── __init__.py\n│   │   ├── extraction.py\n│   │   └── calibration.py\n│   └── utils/\n│       ├── __init__.py\n│       └── coordinates.py\n└── tests/\n    ├── test_photometry.py\n    └── test_spectroscopy.py\n\"\"\"\n\n# setup.py example\nSETUP_PY = \"\"\"\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"astrotools\",\n    version=\"0.1.0\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    description=\"Astronomical data processing tools\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/yourusername/astrotools\",\n    packages=find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Intended Audience :: Science/Research\",\n        \"Topic :: Scientific/Engineering :: Astronomy\",\n    ],\n    python_requires=\">=3.8\",\n    install_requires=[\n        \"numpy>=1.20\",\n        \"scipy>=1.7\",\n        \"astropy>=5.0\",\n    ],\n    extras_require={\n        \"dev\": [\"pytest\", \"black\", \"flake8\"],\n        \"docs\": [\"sphinx\", \"sphinx-rtd-theme\"],\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"process-spectrum=astrotools.scripts.process:main\",\n        ],\n    },\n)\n\"\"\"\n\n# pyproject.toml for modern packaging\nPYPROJECT_TOML = \"\"\"\n[build-system]\nrequires = [\"setuptools>=45\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"astrotools\"\nversion = \"0.1.0\"\ndescription = \"Astronomical data processing tools\"\nauthors = [{name = \"Your Name\", email = \"your.email@example.com\"}]\ndependencies = [\n    \"numpy>=1.20\",\n    \"scipy>=1.7\",\n    \"astropy>=5.0\",\n]\n\n[project.optional-dependencies]\ndev = [\"pytest\", \"black\", \"mypy\"]\ndocs = [\"sphinx\", \"sphinx-rtd-theme\"]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py38']\n\n[tool.mypy]\npython_version = \"3.8\"\nwarn_return_any = true\nwarn_unused_configs = true\n\"\"\"\n\nprint(\"Package structure examples saved to variables SETUP_PY and PYPROJECT_TOML\")","position":{"start":{"line":551,"column":1},"end":{"line":729,"column":1}},"key":"hXiVtwrmjO"},{"type":"heading","depth":2,"position":{"start":{"line":731,"column":1},"end":{"line":731,"column":1}},"children":[{"type":"text","value":"8.8 Functional Programming Patterns","position":{"start":{"line":731,"column":1},"end":{"line":731,"column":1}},"key":"hbKhBAqX3w"}],"identifier":"id-8-8-functional-programming-patterns","label":"8.8 Functional Programming Patterns","html_id":"id-8-8-functional-programming-patterns","implicit":true,"key":"frVfdCre5b"},{"type":"heading","depth":3,"position":{"start":{"line":733,"column":1},"end":{"line":733,"column":1}},"children":[{"type":"text","value":"Functional Approaches in Scientific Computing","position":{"start":{"line":733,"column":1},"end":{"line":733,"column":1}},"key":"UU5PJvscPU"}],"identifier":"functional-approaches-in-scientific-computing","label":"Functional Approaches in Scientific Computing","html_id":"functional-approaches-in-scientific-computing","implicit":true,"key":"j7fBNjuja9"},{"type":"code","lang":"python","value":"from functools import reduce, partial\nfrom operator import add, mul\nimport itertools\n\nclass FunctionalAstronomy:\n    \"\"\"Functional programming patterns for astronomy.\"\"\"\n    \n    @staticmethod\n    def compose(*functions):\n        \"\"\"Compose multiple functions.\"\"\"\n        def inner(x):\n            return reduce(lambda v, f: f(v), functions, x)\n        return inner\n    \n    @staticmethod\n    def curry(func):\n        \"\"\"Curry a function for partial application.\"\"\"\n        def curried(*args, **kwargs):\n            if len(args) + len(kwargs) >= func.__code__.co_argcount:\n                return func(*args, **kwargs)\n            return partial(func, *args, **kwargs)\n        return curried\n    \n    @staticmethod\n    def pipeline_example():\n        \"\"\"Example: Processing pipeline with function composition.\"\"\"\n        \n        # Define processing steps\n        def load_spectrum(filename):\n            \"\"\"Load spectrum from file.\"\"\"\n            return np.random.randn(1000) + 100\n        \n        def remove_cosmic_rays(spectrum):\n            \"\"\"Remove cosmic ray hits.\"\"\"\n            cleaned = spectrum.copy()\n            cleaned[cleaned > np.percentile(cleaned, 99)] = np.median(cleaned)\n            return cleaned\n        \n        def normalize(spectrum):\n            \"\"\"Normalize to unit maximum.\"\"\"\n            return spectrum / np.max(spectrum)\n        \n        def smooth(window=5):\n            \"\"\"Return smoothing function.\"\"\"\n            def smoother(spectrum):\n                from scipy.ndimage import uniform_filter1d\n                return uniform_filter1d(spectrum, window)\n            return smoother\n        \n        # Compose pipeline\n        process = FunctionalAstronomy.compose(\n            load_spectrum,\n            remove_cosmic_rays,\n            normalize,\n            smooth(window=10)\n        )\n        \n        # Process data\n        result = process(\"spectrum.fits\")\n        return result\n    \n    @staticmethod\n    def lazy_evaluation_example():\n        \"\"\"Demonstrate lazy evaluation with generators.\"\"\"\n        \n        def fibonacci_orbit_periods():\n            \"\"\"Generate orbital periods following Fibonacci sequence.\"\"\"\n            a, b = 1, 1\n            while True:\n                yield a\n                a, b = b, a + b\n        \n        # Take only what we need\n        periods = itertools.islice(fibonacci_orbit_periods(), 10)\n        return list(periods)\n    \n    @staticmethod\n    @curry\n    def redshift_wavelength(z, rest_wavelength):\n        \"\"\"Curried function for redshift calculation.\"\"\"\n        return rest_wavelength * (1 + z)\n\n# Examples\nfa = FunctionalAstronomy()\n\n# Function composition\nresult = fa.pipeline_example()\nprint(f\"Pipeline result shape: {result.shape}\")\n\n# Currying\nredshift_z2 = fa.redshift_wavelength(2.0)  # Partial application\nh_alpha_z2 = redshift_z2(656.3)\nprint(f\"H-alpha at z=2: {h_alpha_z2:.1f} nm\")\n\n# Lazy evaluation\nfib_periods = fa.lazy_evaluation_example()\nprint(f\"Fibonacci periods: {fib_periods}\")","position":{"start":{"line":735,"column":1},"end":{"line":833,"column":1}},"key":"y4DkHAPhxE"},{"type":"heading","depth":2,"position":{"start":{"line":835,"column":1},"end":{"line":835,"column":1}},"children":[{"type":"text","value":"8.9 Working with Binary Data","position":{"start":{"line":835,"column":1},"end":{"line":835,"column":1}},"key":"FLiu5j3Dsf"}],"identifier":"id-8-9-working-with-binary-data","label":"8.9 Working with Binary Data","html_id":"id-8-9-working-with-binary-data","implicit":true,"key":"n24IKE356x"},{"type":"heading","depth":3,"position":{"start":{"line":837,"column":1},"end":{"line":837,"column":1}},"children":[{"type":"text","value":"Binary File Formats","position":{"start":{"line":837,"column":1},"end":{"line":837,"column":1}},"key":"pwTVUL78hw"}],"identifier":"binary-file-formats","label":"Binary File Formats","html_id":"binary-file-formats","implicit":true,"key":"OlCi9k7c1L"},{"type":"code","lang":"python","value":"import struct\n\nclass BinaryDataHandler:\n    \"\"\"Handle binary astronomical data formats.\"\"\"\n    \n    @staticmethod\n    def write_binary_catalog(filename, catalog):\n        \"\"\"Write catalog to binary format.\"\"\"\n        # Format: int32(n_objects), then for each object:\n        # float64(ra), float64(dec), float32(mag), int32(id)\n        \n        with open(filename, 'wb') as f:\n            # Write header\n            n_objects = len(catalog)\n            f.write(struct.pack('i', n_objects))\n            \n            # Write each object\n            for obj in catalog:\n                data = struct.pack(\n                    'ddfI',  # double, double, float, unsigned int\n                    obj['ra'],\n                    obj['dec'],\n                    obj['mag'],\n                    obj['id']\n                )\n                f.write(data)\n    \n    @staticmethod\n    def read_binary_catalog(filename):\n        \"\"\"Read catalog from binary format.\"\"\"\n        catalog = []\n        \n        with open(filename, 'rb') as f:\n            # Read header\n            n_objects = struct.unpack('i', f.read(4))[0]\n            \n            # Read each object\n            for _ in range(n_objects):\n                data = f.read(struct.calcsize('ddfI'))\n                ra, dec, mag, obj_id = struct.unpack('ddfI', data)\n                \n                catalog.append({\n                    'ra': ra,\n                    'dec': dec,\n                    'mag': mag,\n                    'id': obj_id\n                })\n        \n        return catalog\n    \n    @staticmethod\n    def memory_mapped_array_example():\n        \"\"\"Work with memory-mapped arrays.\"\"\"\n        \n        # Create a large memory-mapped array\n        filename = 'large_image.dat'\n        shape = (4096, 4096)\n        dtype = np.float32\n        \n        # Create and write\n        fp = np.memmap(filename, dtype=dtype, mode='w+', shape=shape)\n        fp[:] = np.random.randn(*shape)\n        del fp\n        \n        # Read specific sections without loading all\n        fp = np.memmap(filename, dtype=dtype, mode='r', shape=shape)\n        \n        # Only this section is loaded into memory\n        cutout = fp[1000:1100, 2000:2100]\n        print(f\"Cutout shape: {cutout.shape}, mean: {np.mean(cutout):.3f}\")\n        \n        del fp\n        os.remove(filename)\n\n# Test binary handling\nhandler = BinaryDataHandler()\n\n# Create test catalog\ntest_catalog = [\n    {'ra': 150.0 + i*0.1, 'dec': 30.0 + i*0.05, 'mag': 12.0 + i*0.2, 'id': i}\n    for i in range(10)\n]\n\n# Write and read\nhandler.write_binary_catalog('test.cat', test_catalog)\nloaded = handler.read_binary_catalog('test.cat')\nprint(f\"Loaded {len(loaded)} objects from binary catalog\")\nos.remove('test.cat')\n\nhandler.memory_mapped_array_example()","position":{"start":{"line":839,"column":1},"end":{"line":930,"column":1}},"key":"HZ07PeNKPj"},{"type":"heading","depth":2,"position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"children":[{"type":"text","value":"Try It Yourself","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"key":"sKnBi3UGuv"}],"identifier":"try-it-yourself","label":"Try It Yourself","html_id":"try-it-yourself","implicit":true,"key":"shtj5rKiLg"},{"type":"heading","depth":3,"position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"children":[{"type":"text","value":"Exercise 8.1: Async Observatory Controller","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"key":"pv6HEPJd8v"}],"identifier":"exercise-8-1-async-observatory-controller","label":"Exercise 8.1: Async Observatory Controller","html_id":"exercise-8-1-async-observatory-controller","implicit":true,"key":"yKdj27Q7ME"},{"type":"paragraph","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"children":[{"type":"text","value":"Build an async system for controlling multiple telescopes.","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"key":"kazxwcjf10"}],"key":"Rsfhr9IlFH"},{"type":"code","lang":"python","value":"class AsyncObservatory:\n    \"\"\"\n    Control multiple telescopes asynchronously.\n    \n    Requirements:\n    - Coordinate multiple telescopes\n    - Handle concurrent observations\n    - Manage shared resources (e.g., weather station)\n    - Implement error recovery\n    \"\"\"\n    \n    def __init__(self, n_telescopes):\n        self.telescopes = [f\"T{i+1}\" for i in range(n_telescopes)]\n        # Your code here\n    \n    async def observe_target_list(self, targets):\n        \"\"\"\n        Observe list of targets optimally using all telescopes.\n        \n        Should:\n        - Distribute targets among telescopes\n        - Handle failures gracefully\n        - Optimize for minimal total time\n        \"\"\"\n        # Your code here\n        pass\n    \n    async def emergency_stop(self):\n        \"\"\"Emergency stop all telescopes.\"\"\"\n        # Your code here\n        pass\n\n# Test your implementation\n# observatory = AsyncObservatory(3)\n# targets = [(\"M31\", 300), (\"M42\", 600), (\"M51\", 450)]\n# asyncio.run(observatory.observe_target_list(targets))","position":{"start":{"line":937,"column":1},"end":{"line":974,"column":1}},"key":"zoX1GZA4ul"},{"type":"heading","depth":3,"position":{"start":{"line":976,"column":1},"end":{"line":976,"column":1}},"children":[{"type":"text","value":"Exercise 8.2: Custom Descriptor System","position":{"start":{"line":976,"column":1},"end":{"line":976,"column":1}},"key":"NkV6LsViwt"}],"identifier":"exercise-8-2-custom-descriptor-system","label":"Exercise 8.2: Custom Descriptor System","html_id":"exercise-8-2-custom-descriptor-system","implicit":true,"key":"YtUx9kwLRh"},{"type":"paragraph","position":{"start":{"line":977,"column":1},"end":{"line":977,"column":1}},"children":[{"type":"text","value":"Create a descriptor system for validated scientific data.","position":{"start":{"line":977,"column":1},"end":{"line":977,"column":1}},"key":"QfgRgSwL5F"}],"key":"YhO3gLBw6z"},{"type":"code","lang":"python","value":"class ScientificProperty:\n    \"\"\"\n    Descriptor for scientific properties with:\n    - Units and unit conversion\n    - Validation ranges\n    - Uncertainty tracking\n    - Automatic documentation\n    \"\"\"\n    \n    def __init__(self, name, unit, uncertainty=None):\n        # Your code here\n        pass\n    \n    def __get__(self, instance, owner):\n        # Your code here\n        pass\n    \n    def __set__(self, instance, value):\n        # Your code here\n        pass\n\nclass Measurement:\n    \"\"\"Use your ScientificProperty descriptor.\"\"\"\n    \n    # Your properties here\n    # temperature = ScientificProperty('temperature', 'K', uncertainty=0.1)\n    # pressure = ScientificProperty('pressure', 'Pa', uncertainty=10)\n    \n    pass\n\n# Test your descriptor\n# m = Measurement()\n# m.temperature = (273.15, 0.05)  # Value with uncertainty\n# print(f\"T = {m.temperature}\")","position":{"start":{"line":979,"column":1},"end":{"line":1014,"column":1}},"key":"GXypwEo5Sk"},{"type":"heading","depth":3,"position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"children":[{"type":"text","value":"Exercise 8.3: Metaclass for Data Validation","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"key":"uejAj6QZhX"}],"identifier":"exercise-8-3-metaclass-for-data-validation","label":"Exercise 8.3: Metaclass for Data Validation","html_id":"exercise-8-3-metaclass-for-data-validation","implicit":true,"key":"bv9G04YO16"},{"type":"paragraph","position":{"start":{"line":1017,"column":1},"end":{"line":1017,"column":1}},"children":[{"type":"text","value":"Create a metaclass that automatically validates data classes.","position":{"start":{"line":1017,"column":1},"end":{"line":1017,"column":1}},"key":"NgsmDUEhJs"}],"key":"npEb53mzGw"},{"type":"code","lang":"python","value":"class ValidatedMeta(type):\n    \"\"\"\n    Metaclass that:\n    - Automatically creates validators from type hints\n    - Adds logging to all methods\n    - Implements singleton pattern for config classes\n    - Registers all subclasses\n    \"\"\"\n    \n    def __new__(mcs, name, bases, namespace):\n        # Your code here\n        pass\n\nclass ObservationData(metaclass=ValidatedMeta):\n    \"\"\"Your data class using the metaclass.\"\"\"\n    \n    # Type hints that become validators\n    ra: float  # Should validate 0 <= ra <= 360\n    dec: float  # Should validate -90 <= dec <= 90\n    magnitude: float  # Should validate reasonable range\n    \n    # Your implementation\n    pass\n\n# Test your metaclass\n# obs = ObservationData()\n# obs.ra = 361  # Should raise ValueError","position":{"start":{"line":1019,"column":1},"end":{"line":1047,"column":1}},"key":"GotnoQEC8T"},{"type":"heading","depth":2,"position":{"start":{"line":1049,"column":1},"end":{"line":1049,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":1049,"column":1},"end":{"line":1049,"column":1}},"key":"aElJSR3I1q"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"iPuXLugTVt"},{"type":"paragraph","position":{"start":{"line":1051,"column":1},"end":{"line":1058,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"UMaWmGli36"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Async for I/O","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"EFVmrDqcdJ"}],"key":"NbPoNppFbJ"},{"type":"text","value":" - Use asyncio for telescope control, data streaming","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"LIn5l52udS"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"xWpktxoClw"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"R67JCpGTgs"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Decorators add functionality","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"YZoD7JNmlU"}],"key":"QhFC57sRIC"},{"type":"text","value":" - Retry logic, validation, caching","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"Z5bvkBHqsH"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"cBdZ3mtdOp"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"twViRAsCS9"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Descriptors for properties","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"sheVdIT0Ls"}],"key":"FqVw8GZpyR"},{"type":"text","value":" - Custom validation and unit handling","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"NgzmkCJWeK"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"bfmBw3kX6f"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"AA0PXWpB7G"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Context managers for resources","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"h4hSIVOf0E"}],"key":"ZUmfZ18z76"},{"type":"text","value":" - Automatic setup/cleanup","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"UfXDB1g1eE"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"lMLVqTOgQ6"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"HwTmoalRMN"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Type hints improve code","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"nqINpRtr1r"}],"key":"oCSmwklu0f"},{"type":"text","value":" - Catch errors early, better documentation","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"XrkaGwn7Oa"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"KnQckVKQ8Q"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"PrarPwMdA7"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Metaclasses are powerful but rare","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"WBj8lnJu6A"}],"key":"d9ZA2BPZYV"},{"type":"text","value":" - Use for frameworks, not applications","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"C0SQkobrCs"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"GPgB5PwwRk"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"VTtL8ouH1J"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Functional patterns have their place","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"rwRKNWpEvk"}],"key":"SnAH1zuXqg"},{"type":"text","value":" - Composition, currying for data pipelines","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"QwNzvUPd6H"},{"type":"break","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"Io75RsID6Z"},{"type":"text","value":"✅ ","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"Pte3RVbgh3"},{"type":"strong","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"text","value":"Binary data needs care","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"RaZWkapDhf"}],"key":"n5DOjdb2Fa"},{"type":"text","value":" - Struct module, memory mapping for large files","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"Zzz82kNtEy"}],"key":"Z3aM1yhRsJ"},{"type":"heading","depth":2,"position":{"start":{"line":1060,"column":1},"end":{"line":1060,"column":1}},"children":[{"type":"text","value":"Moving Forward","position":{"start":{"line":1060,"column":1},"end":{"line":1060,"column":1}},"key":"lZ6ZEqPCb4"}],"identifier":"moving-forward","label":"Moving Forward","html_id":"moving-forward","implicit":true,"key":"fDtNHsgxJU"},{"type":"paragraph","position":{"start":{"line":1062,"column":1},"end":{"line":1062,"column":1}},"children":[{"type":"text","value":"This sampler introduced advanced Python concepts. Remember:","position":{"start":{"line":1062,"column":1},"end":{"line":1062,"column":1}},"key":"rIl8AXOfXN"}],"key":"iutYKYlLy6"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":1064,"column":1},"end":{"line":1069,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1064,"column":1},"end":{"line":1064,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1064,"column":1},"end":{"line":1064,"column":1}},"children":[{"type":"text","value":"Use advanced features when they solve real problems","position":{"start":{"line":1064,"column":1},"end":{"line":1064,"column":1}},"key":"PieQBwph2z"}],"key":"z5ChXfP0Iu"},{"type":"text","value":" - Not just to be clever","position":{"start":{"line":1064,"column":1},"end":{"line":1064,"column":1}},"key":"ZDVLTHbyhQ"}],"key":"zUovISrZvv"},{"type":"listItem","spread":true,"position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"children":[{"type":"text","value":"Simple code is often better","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"key":"pn3QajZQwQ"}],"key":"rnleVEdjXI"},{"type":"text","value":" - Readability counts","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"key":"lBEMqXgLgR"}],"key":"OT8eO8KoJN"},{"type":"listItem","spread":true,"position":{"start":{"line":1066,"column":1},"end":{"line":1066,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1066,"column":1},"end":{"line":1066,"column":1}},"children":[{"type":"text","value":"Profile before optimizing","position":{"start":{"line":1066,"column":1},"end":{"line":1066,"column":1}},"key":"GMSxKmTiLs"}],"key":"S86AiVXR5I"},{"type":"text","value":" - Measure, don’t guess","position":{"start":{"line":1066,"column":1},"end":{"line":1066,"column":1}},"key":"iTioWCbW1D"}],"key":"qxuuUC33qM"},{"type":"listItem","spread":true,"position":{"start":{"line":1067,"column":1},"end":{"line":1067,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1067,"column":1},"end":{"line":1067,"column":1}},"children":[{"type":"text","value":"Test complex code thoroughly","position":{"start":{"line":1067,"column":1},"end":{"line":1067,"column":1}},"key":"vFVOREI61U"}],"key":"UnQ6dpoTTN"},{"type":"text","value":" - Advanced features can hide bugs","position":{"start":{"line":1067,"column":1},"end":{"line":1067,"column":1}},"key":"AL8EVR1ngz"}],"key":"N0oMfCKcn5"},{"type":"listItem","spread":true,"position":{"start":{"line":1068,"column":1},"end":{"line":1069,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1068,"column":1},"end":{"line":1068,"column":1}},"children":[{"type":"text","value":"Document why, not just what","position":{"start":{"line":1068,"column":1},"end":{"line":1068,"column":1}},"key":"vx6NyyYrYi"}],"key":"ja0C2y3nnC"},{"type":"text","value":" - Especially for metaclasses and descriptors","position":{"start":{"line":1068,"column":1},"end":{"line":1068,"column":1}},"key":"YUmBEnAMZu"}],"key":"YibJ8V1VfH"}],"key":"LJGr3uMcUn"},{"type":"heading","depth":2,"position":{"start":{"line":1070,"column":1},"end":{"line":1070,"column":1}},"children":[{"type":"text","value":"Next Steps","position":{"start":{"line":1070,"column":1},"end":{"line":1070,"column":1}},"key":"axGD3qxGz6"}],"identifier":"next-steps","label":"Next Steps","html_id":"next-steps","implicit":true,"key":"DscRsN40ch"},{"type":"paragraph","position":{"start":{"line":1072,"column":1},"end":{"line":1072,"column":1}},"children":[{"type":"text","value":"You’re now ready for the Scientific Python Libraries section:","position":{"start":{"line":1072,"column":1},"end":{"line":1072,"column":1}},"key":"D76Vs4lgfW"}],"key":"PUOpTKWMrV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1073,"column":1},"end":{"line":1077,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1073,"column":1},"end":{"line":1073,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1073,"column":1},"end":{"line":1073,"column":1}},"children":[{"type":"text","value":"NumPy","position":{"start":{"line":1073,"column":1},"end":{"line":1073,"column":1}},"key":"psAwQMvnVh"}],"key":"MApy3B6py1"},{"type":"text","value":" - The foundation of scientific computing","position":{"start":{"line":1073,"column":1},"end":{"line":1073,"column":1}},"key":"PahO1AnAIZ"}],"key":"ajgZzy3srP"},{"type":"listItem","spread":true,"position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"key":"nKacku1nmA"}],"key":"I4uyl5lSDr"},{"type":"text","value":" - Publication-quality visualization","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"key":"padnoOkngG"}],"key":"tTD891Zwmn"},{"type":"listItem","spread":true,"position":{"start":{"line":1075,"column":1},"end":{"line":1075,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1075,"column":1},"end":{"line":1075,"column":1}},"children":[{"type":"text","value":"SciPy","position":{"start":{"line":1075,"column":1},"end":{"line":1075,"column":1}},"key":"YZojhJpNeL"}],"key":"dv2G7imaYj"},{"type":"text","value":" - Scientific algorithms and tools","position":{"start":{"line":1075,"column":1},"end":{"line":1075,"column":1}},"key":"Qpb6lIpzNp"}],"key":"xHaoSp8ZIs"},{"type":"listItem","spread":true,"position":{"start":{"line":1076,"column":1},"end":{"line":1077,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1076,"column":1},"end":{"line":1076,"column":1}},"children":[{"type":"text","value":"Pandas","position":{"start":{"line":1076,"column":1},"end":{"line":1076,"column":1}},"key":"Che2vRL9gd"}],"key":"tB2czKXmaL"},{"type":"text","value":" - Data analysis and manipulation","position":{"start":{"line":1076,"column":1},"end":{"line":1076,"column":1}},"key":"XmGYNQOh4Q"}],"key":"MEIfQFMvyX"}],"key":"BJlyesP2UG"},{"type":"paragraph","position":{"start":{"line":1078,"column":1},"end":{"line":1078,"column":1}},"children":[{"type":"text","value":"Choose which advanced topics to explore based on your project needs!","position":{"start":{"line":1078,"column":1},"end":{"line":1078,"column":1}},"key":"cp5EtLvfDB"}],"key":"yBzPKeRcMv"},{"type":"code","lang":"","value":"","position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"key":"NqcHZQZVnt"}],"key":"ZOzdroCsCh"}],"key":"KKlq1BjzjB"},"references":{"cite":{"order":[],"data":{}}}}