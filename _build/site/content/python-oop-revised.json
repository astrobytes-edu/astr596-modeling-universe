{"version":2,"kind":"Article","sha256":"8fc0a5fe91f543fbce44d5d9d40e9ae21db3fd6ce7853fb53a30e752c7c64640","slug":"python-oop-revised","location":"/03-scientific-computing-with-python/01-python-fundamentals/06-python-oop-REVISED.md","dependencies":[],"frontmatter":{"title":"Chapter 6: Object-Oriented Programming - Organizing Scientific Code","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/01-python-fundamentals/06-python-oop-REVISED.md","exports":[{"format":"md","filename":"06-python-oop-REVISED.md","url":"/06-python-oop-REVISE-4ab3dcfb4da60469bbe07dd9a86e90a5.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rXO8HoHXUZ"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"g39l6HDjOk"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zsQTVaTS58"}],"key":"coAy1KtIpo"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Design and implement classes that model astronomical objects and scientific concepts","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"dubnNqQgeq"}],"key":"nYjJlFOT7V"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Create methods that operate on object data and properties that compute derived values","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NDHA7MoS38"}],"key":"ps75hJfP7A"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Apply inheritance and composition to build hierarchies of related astronomical objects","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ww0Q6T9sA3"}],"key":"UlkqML3FpX"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Implement special methods to make your objects behave like built-in Python types","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"mEBs6AQmBx"}],"key":"VL8n3tE0uA"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Debug common OOP-related errors using introspection tools","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"bDwem9N2lR"}],"key":"S5ed1G2u6p"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Write effective tests for your astronomical classes","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"P2HHT6b99B"}],"key":"Z5M2aX5O1g"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Recognize OOP patterns in NumPy, Astropy, and other scientific libraries","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"NP5dvV7TSL"}],"key":"XeSzN02x1v"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Choose between OOP, functional, and procedural approaches based on problem requirements","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"VYUuRBInqB"}],"key":"uQVZ9NlRYo"}],"key":"kpqDibf7NU"},{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"wO1dZmtB4I"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check","implicit":true,"key":"itR1IpQqFD"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"bBVr4XUUdC"}],"key":"Zy56cMLL7o"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"✓ Define and use functions with various parameter types (Chapter 5)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"sgIUEWXqOP"}],"key":"sO3CJ0vQJT"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"✓ Understand scope and namespaces (Chapter 5)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"yLjwtEuzVS"}],"key":"NZeIKaNvaO"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"✓ Work with dictionaries and their methods (Chapter 4)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"f0BxqvwKPI"}],"key":"AKWNTbyxth"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"✓ Create and import modules (Chapter 5)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"ZblHcETPmv"}],"key":"KD1dm7fzh1"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"✓ Handle mutable vs immutable objects (Chapter 4)","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"uTpfd4Gb3V"}],"key":"eMHxcQArre"}],"key":"VQ0MKlOgZq"},{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Quick diagnostic:","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"RzZkgCzi5a"}],"key":"tbe5R6CSOe"}],"key":"AQCEbcvdYV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Can you predict what this prints?\ndef modify(data):\n    data['key'] = 'modified'\n    return data\n\noriginal = {'key': 'original'}\nresult = modify(original)\nprint(original['key'])  # What value?","key":"MjYDnhnYI4"},{"type":"output","id":"rfXVenz0wBaEdi7hePQox","data":[],"key":"x4xVgsZk1s"}],"key":"rgoHtuK9LZ"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"If you said “modified”, you’re ready! Objects work similarly - they’re mutable and passed by reference.","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"uKt9SrUKME"}],"key":"L1mSIpY0kB"},{"type":"heading","depth":2,"position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"NVbm09LbXs"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview","implicit":true,"key":"ZedhPuhfRX"},{"type":"paragraph","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"So far, we’ve organized code using functions and modules. But what happens when you need to model complex astronomical systems where data and the operations on that data are intimately connected? This is where Object-Oriented Programming (OOP) transforms your code from a collection of functions into a model of the universe itself.","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"wO7z3jn9gu"}],"key":"aMAsKhGGQi"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Consider tracking a galaxy catalog. Each galaxy has properties (position, redshift, luminosity, morphology) and behaviors (calculate distance, determine stellar mass, check observability). With functions alone, you’d pass galaxy data between dozens of functions, hoping you don’t mix up which data belongs to NGC 1365 versus M87. With OOP, each galaxy is an object that knows its own data and what it can do. This organizational principle scales from simple data containers to complex simulations with thousands of interacting components.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"bQLYydgkvO"}],"key":"C4xh245GOx"},{"type":"paragraph","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"This chapter teaches you to think in objects — not as a dogmatic paradigm, but as a powerful tool for organizing scientific code. You’ll learn when OOP makes code clearer (modeling physical objects, managing complex state) and when it adds unnecessary complexity (simple calculations, functional transformations). By the end, you’ll understand why NumPy arrays are objects with methods, how Astropy’s SkyCoord manages coordinates, and when to create your own classes versus using simpler approaches.","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"RvDs0Kg4yY"}],"key":"LOVzarsmlk"},{"type":"heading","depth":2,"position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"6.1 Classes and Objects: The Fundamentals","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"ZQbK2CPnVl"}],"identifier":"id-6-1-classes-and-objects-the-fundamentals","label":"6.1 Classes and Objects: The Fundamentals","html_id":"id-6-1-classes-and-objects-the-fundamentals","implicit":true,"key":"a8uKXwFqfT"},{"type":"paragraph","position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"children":[{"type":"text","value":"A class is a blueprint for creating objects. Think of it like the specification for a telescope — the class defines what properties the telescope will have (aperture, focal length, mount type) and what it can do (slew to coordinates, take exposures, auto-guide). An object is a specific instance created from that blueprint — an actual telescope built from those specifications.","position":{"start":{"line":48,"column":1},"end":{"line":48,"column":1}},"key":"cH0eMsJpiY"}],"key":"dikuPtT8Ul"},{"type":"paragraph","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"Before we dive into creating classes, let’s clarify terminology. When we organize code with classes, we use specific terms for familiar concepts:","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"XJ0ohfGw0o"}],"key":"CQHUY2tWxo"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"strong","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"Attributes","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"MQaRqGIP30"}],"key":"BHThzTWO1g"},{"type":"text","value":" are variables that belong to an object. Just like variables store data, attributes store an object’s data. The only difference is that attributes are attached to a specific object.","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"XVefvrha4w"}],"key":"rFmba3mnGf"},{"type":"paragraph","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"children":[{"type":"strong","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"children":[{"type":"text","value":"Methods","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"UDS0fHtXG7"}],"key":"jreQbsYM5U"},{"type":"text","value":" are functions that belong to an object. Just like functions perform operations, methods perform operations — but they have access to the object’s attributes and can operate on the object’s data.","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"yFWm9zQzeL"}],"key":"zHjgftKhPg"},{"type":"paragraph","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"children":[{"type":"text","value":"Let’s see this connection explicitly. You’re about to transform from writing scripts to architecting software — the same transformation that took astronomy from simple data reduction to sophisticated pipelines like those processing JWST data:","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"C54OOuUMql"}],"key":"GhvYpE1sle"}],"key":"iN5OG4X5ts"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# You already know variables and functions:\ntemperature = 25.0  # Variable\ndef convert_to_fahrenheit(celsius):  # Function\n    return celsius * 9/5 + 32\n\n# In OOP, these become attributes and methods:\nclass Thermometer:\n    def __init__(self):\n        self.temperature = 25.0  # Attribute (variable attached to object)\n    \n    def convert_to_fahrenheit(self):  # Method (function attached to object)\n        return self.temperature * 9/5 + 32\n\n# The key difference: attributes and methods are organized together\ntherm = Thermometer()\nprint(therm.temperature)  # Access attribute through object\nprint(therm.convert_to_fahrenheit())  # Call method through object","key":"SGmk4qWBQR"},{"type":"output","id":"KaEPn-98cFsnLja-PMyN-","data":[],"key":"ny7AHrhujT"}],"key":"eDqSFVD1mE"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"This organization is powerful because related data and operations stay together. The thermometer object knows its own temperature and how to convert it — everything about temperature management is in one place.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"AxMJpqdnkd"}],"key":"z6xZoDW8xu"},{"type":"mermaid","value":"flowchart TD\n    A[Traditional Programming] --> B[Variables]\n    A --> C[Functions]\n    \n    D[Object-Oriented Programming] --> E[Class]\n    E --> F[Attributes<br/>Variables attached to objects]\n    E --> G[Methods<br/>Functions attached to objects]\n    \n    B -.->|becomes| F\n    C -.->|becomes| G\n    \n    H[Object/Instance] --> I[Has its own attribute values]\n    H --> J[Can call methods]\n    E -->|creates| H\n    \n    style E fill:#f9f,stroke:#333,stroke-width:4px\n    style H fill:#bbf,stroke:#333,stroke-width:2px","key":"CXgBgHDOP7"},{"type":"heading","depth":3,"position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"LqOBMKlB25"},{"type":"strong","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"text","value":"Why This Matters: Real Astronomy Software Architecture","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"xeR7WGnQUb"}],"key":"m7kbiukSiS"}],"identifier":"id-why-this-matters-real-astronomy-software-architecture","label":"🌟 Why This Matters: Real Astronomy Software Architecture","html_id":"id-why-this-matters-real-astronomy-software-architecture","implicit":true,"key":"Y5y4sdxV6O"},{"type":"code","lang":"","value":"REAL-WORLD CONNECTION: Astropy's Design\n\nAstropy, the core astronomy Python package, is built entirely \non OOP principles. Every major component is a class:\n\n- SkyCoord: Manages celestial coordinates\n  Attributes: ra, dec, frame, distance\n  Methods: transform_to(), separation(), match_to_catalog()\n\n- Time: Handles astronomical time systems\n  Attributes: jd, mjd, iso, scale\n  Methods: to_datetime(), sidereal_time()\n\n- Quantity: Numbers with units\n  Attributes: value, unit\n  Methods: to(), decompose(), si\n\nWhen you write coord = SkyCoord(ra=10.5*u.deg, dec=41.2*u.deg),\nyou're creating an object that knows its position AND how to\ntransform between coordinate systems, calculate separations,\nand precess to different epochs.\n\nThis is why OOP matters: it's how professional astronomy\nsoftware organizes complex data and operations together.","position":{"start":{"line":102,"column":1},"end":{"line":127,"column":1}},"key":"nIhAZuJpy1"},{"type":"heading","depth":3,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"text","value":"Your First Class","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"dpEYLDJHo8"}],"identifier":"your-first-class","label":"Your First Class","html_id":"your-first-class","implicit":true,"key":"hTRc8rfz2g"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"Let’s start with the simplest possible class and build up progressively:","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"lHVvCqUNA3"}],"key":"jBIzLTiQRm"}],"key":"gNStNd4fh8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 1: Basic class definition\nclass Star:\n    \"\"\"A simple star class.\"\"\"\n    \n    def __init__(self, name, magnitude):\n        \"\"\"Initialize a new Star object.\"\"\"\n        self.name = name\n        self.magnitude = magnitude\n\n# Create an instance (object) of the Star class\nsirius = Star(\"Sirius\", -1.46)\nprint(f\"{sirius.name} has magnitude {sirius.magnitude}\")","key":"WC7IamcSbv"},{"type":"output","id":"097xru5lI6U2f67j4Ayek","data":[],"key":"TpbFmBFutV"}],"key":"egZNX1thrL"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"children":[{"type":"text","value":"🎉 ","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"IuE23g70Fi"},{"type":"strong","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"children":[{"type":"text","value":"Congratulations! You just created a blueprint that could model any star in the universe!","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"iFzJdkt5Bz"}],"key":"LmoagnoTRR"},{"type":"text","value":" From red dwarfs to blue supergiants, from Proxima Centauri to Betelgeuse, this simple class structure can represent them all. You’re no longer just writing code — you’re building computational models of astronomical objects. This is exactly how professional packages like Astropy started!","position":{"start":{"line":148,"column":1},"end":{"line":148,"column":1}},"key":"xwopZkofSN"}],"key":"f39RtRf7lB"},{"type":"paragraph","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"children":[{"type":"text","value":"Now let’s add methods to give our star behavior:","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"key":"tLJVFcL8WV"}],"key":"maJ2hbON9k"}],"key":"PccDBTj9gO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 2: Add methods for behavior\nclass Star:\n    \"\"\"A star with observable properties.\"\"\"\n    \n    def __init__(self, name, magnitude, distance_pc):\n        self.name = name\n        self.magnitude = magnitude\n        self.distance_pc = distance_pc\n    \n    def absolute_magnitude(self):\n        \"\"\"Calculate absolute magnitude.\"\"\"\n        import math\n        return self.magnitude - 5 * math.log10(self.distance_pc) + 5\n    \n    def luminosity_solar(self):\n        \"\"\"Calculate luminosity relative to the Sun.\"\"\"\n        abs_mag = self.absolute_magnitude()\n        return 10**((4.83 - abs_mag) / 2.5)","key":"cqDg5U13s7"},{"type":"output","id":"6DIZWkEK4RWMyOQUQqKGn","data":[],"key":"M4dBc4vRLT"}],"key":"xz6QojPa2y"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":173,"column":1},"end":{"line":173,"column":1}},"children":[{"type":"text","value":"Finally, let’s use our complete star class:","position":{"start":{"line":173,"column":1},"end":{"line":173,"column":1}},"key":"nkXd5n9p4v"}],"key":"W7zRhpgrVu"}],"key":"htuTXyukNB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 3: Using the complete class\nproxima = Star(\"Proxima Centauri\", 11.13, 1.301)\n\n# Call methods on the object\nabs_mag = proxima.absolute_magnitude()\nprint(f\"Absolute magnitude: {abs_mag:.2f}\")\n\nluminosity = proxima.luminosity_solar()\nprint(f\"Luminosity: {luminosity:.4f} solar luminosities\")","key":"XzoegctJmh"},{"type":"output","id":"mHQOkkEMP4PJ3tNNQq9RG","data":[],"key":"r0DJeaWQ7U"}],"key":"rxt03t8pbH"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":187,"column":1},"end":{"line":187,"column":1}},"children":[{"type":"text","value":"Let’s visualize what happens when we create an object:","position":{"start":{"line":187,"column":1},"end":{"line":187,"column":1}},"key":"C4eYgIgOw2"}],"key":"ie67A3l36F"},{"type":"mermaid","value":"sequenceDiagram\n    participant Code as Your Code\n    participant Python\n    participant Memory\n    participant Object as Star Object\n    \n    Code->>Python: sirius = Star(\"Sirius\", -1.46)\n    Python->>Memory: Allocate space for new object\n    Memory-->>Python: Memory allocated\n    Python->>Object: Create empty Star instance\n    Python->>Object: Call __init__(self, \"Sirius\", -1.46)\n    Object->>Object: self.name = \"Sirius\"\n    Object->>Object: self.magnitude = -1.46\n    Object-->>Python: Initialization complete\n    Python-->>Code: Return reference to object\n    Note over Code: sirius now refers to the Star object","key":"LbEltSi74S"},{"type":"paragraph","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"key":"luQGmSZRfc"},{"type":"inlineCode","value":"self","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"key":"jcSt8Aig30"},{"type":"text","value":" parameter is crucial but often confusing. When you call ","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"key":"EcBCV53d4r"},{"type":"inlineCode","value":"sirius = Star(\"Sirius\", -1.46)","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"key":"oYWKTIsYnC"},{"type":"text","value":", Python essentially does:","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"key":"oUcpdHoSVm"}],"key":"ELXDiqmrWD"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":209,"column":1},"end":{"line":212,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"children":[{"type":"text","value":"Creates a new empty object","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"key":"oiV7dyBxQz"}],"key":"sBKtXqYMIp"},{"type":"listItem","spread":true,"position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"children":[{"type":"text","value":"Calls ","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"ZE8M83VfVP"},{"type":"inlineCode","value":"Star.__init__(new_object, \"Sirius\", -1.46)","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"Q4GS1FpLAw"}],"key":"G8n0Gw63a4"},{"type":"listItem","spread":true,"position":{"start":{"line":211,"column":1},"end":{"line":212,"column":1}},"children":[{"type":"text","value":"Returns the initialized object","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"fE64S4iycd"}],"key":"OXdS5lPopd"}],"key":"igfj3sHjAO"},{"type":"paragraph","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":1}},"key":"F5UD9cdBr3"},{"type":"inlineCode","value":"self","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":1}},"key":"bQbLcgtR7G"},{"type":"text","value":" parameter is how each object keeps track of its own data.","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":1}},"key":"bYv2baz2pn"}],"key":"HPbA3t4qh3"},{"type":"heading","depth":3,"position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"EyP4hMRVaO"},{"type":"strong","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Missing self Parameter","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"jec9ArbvpA"}],"key":"JbOrE2jCF0"}],"identifier":"id-common-bug-alert-missing-self-parameter","label":"⚠️ Common Bug Alert: Missing self Parameter","html_id":"id-common-bug-alert-missing-self-parameter","implicit":true,"key":"ynQSM8kK3h"}],"key":"W8Ab3Qgh3H"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# WRONG - Forgetting self in method definition\nclass BadClass:\n    def method():  # Missing self!\n        return \"something\"\n\n# This will fail:\n# obj = BadClass()\n# obj.method()  # TypeError: takes 0 positional arguments but 1 was given\n\n# CORRECT - Always include self as first parameter\nclass GoodClass:\n    def method(self):  # self is required\n        return \"something\"\n\n# Why? Python automatically passes the object as the first argument\n# obj.method() is actually like: GoodClass.method(obj)","key":"tz5GMIYSTP"},{"type":"output","id":"JY_bjXmco8ANSeDi4W-rb","data":[],"key":"gWWXCXuQp5"}],"key":"xTrC0k5ywT"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":236,"column":1},"end":{"line":236,"column":1}},"children":[{"type":"text","value":"This is probably the most common OOP error for beginners. Remember: instance methods ALWAYS need ","position":{"start":{"line":236,"column":1},"end":{"line":236,"column":1}},"key":"k8cSrnhmTQ"},{"type":"inlineCode","value":"self","position":{"start":{"line":236,"column":1},"end":{"line":236,"column":1}},"key":"ot6XH1iBV5"},{"type":"text","value":" as their first parameter, even if they don’t use it.","position":{"start":{"line":236,"column":1},"end":{"line":236,"column":1}},"key":"hHTUgPMRmT"}],"key":"MPe05Ad14N"},{"type":"heading","depth":3,"position":{"start":{"line":238,"column":1},"end":{"line":238,"column":1}},"children":[{"type":"text","value":"Instance vs Class Members","position":{"start":{"line":238,"column":1},"end":{"line":238,"column":1}},"key":"Y0KxHO0hKv"}],"identifier":"instance-vs-class-members","label":"Instance vs Class Members","html_id":"instance-vs-class-members","implicit":true,"key":"V1cFh62EIm"},{"type":"paragraph","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"children":[{"type":"text","value":"One of the most important distinctions in OOP is between instance members (belonging to specific objects) and class members (shared by all objects of that class):","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"SpTfIE0ues"}],"key":"xHFxWBfQMm"}],"key":"IJ13kyrPzF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Satellite:\n    # Class attributes - shared by all satellites\n    total_satellites = 0\n    EARTH_RADIUS_KM = 6371\n    \n    def __init__(self, name, altitude_km):\n        # Instance attributes - each satellite has its own\n        self.name = name\n        self.altitude = altitude_km\n        # Increment the shared counter\n        Satellite.total_satellites += 1\n    \n    def calculate_period(self):\n        # Instance method - uses this satellite's altitude\n        import math\n        total_radius = self.EARTH_RADIUS_KM + self.altitude\n        return 2 * math.pi * math.sqrt(total_radius**3 / 398600)\n    \n    @classmethod\n    def get_satellite_count(cls):\n        # Class method - operates on class, not instance\n        return cls.total_satellites\n\n# Each satellite has independent instance attributes\niss = Satellite(\"ISS\", 408)\nhubble = Satellite(\"Hubble\", 547)\n\nprint(f\"ISS period: {iss.calculate_period():.1f} minutes\")\nprint(f\"Total satellites: {Satellite.total_satellites}\")","key":"eEY3lSnE0h"},{"type":"output","id":"KzqucPYO_z0RALr5ZaYzQ","data":[],"key":"wwcIwzPx1f"}],"key":"zR64g3mO0t"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":274,"column":1},"end":{"line":274,"column":1}},"children":[{"type":"text","value":"Performance tip: Accessing instance attributes is fast (one dictionary lookup), but be aware that each object stores its own copy. For large numbers of objects, consider using ","position":{"start":{"line":274,"column":1},"end":{"line":274,"column":1}},"key":"AuVuhio7w1"},{"type":"inlineCode","value":"__slots__","position":{"start":{"line":274,"column":1},"end":{"line":274,"column":1}},"key":"M3oWnxZXwV"},{"type":"text","value":" (covered in section 6.8).","position":{"start":{"line":274,"column":1},"end":{"line":274,"column":1}},"key":"OpAo6CHt7f"}],"key":"gdtciVzLnK"},{"type":"heading","depth":3,"position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"key":"U3ICJsJBkc"},{"type":"strong","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"key":"RiEzaUU0BJ"}],"key":"Y8tAq3XVUM"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding","implicit":true,"key":"svVaoHckyn"},{"type":"paragraph","position":{"start":{"line":278,"column":1},"end":{"line":278,"column":1}},"children":[{"type":"text","value":"What’s the difference between these two approaches?","position":{"start":{"line":278,"column":1},"end":{"line":278,"column":1}},"key":"TIv3wVAn3G"}],"key":"PwU5uM7cDF"}],"key":"oVJvU3Sj4w"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Approach 1: Functions and data separate\nstar_data = {'name': 'Vega', 'magnitude': 0.03}\ndef get_brightness(data):\n    return 10**(-data['magnitude']/2.5)\n\n# Approach 2: Class with methods\nclass Star:\n    def __init__(self, name, magnitude):\n        self.name = name\n        self.magnitude = magnitude\n    \n    def get_brightness(self):\n        return 10**(-self.magnitude/2.5)","key":"Ju4OQDG62u"},{"type":"output","id":"pmv1daQ-k56hpZNBlli1J","data":[],"key":"ujQlOdOuBY"}],"key":"qSmH6zPETZ"},{"type":"block","children":[{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"KtENJqncgy"}],"key":"Tk1WAyss5L"},{"type":"paragraph","children":[{"type":"text","value":"Both calculate the same value, but they organize code differently. In Approach 1, data and functions are separate — you must remember to pass the right dictionary to the function, and there’s no guarantee the dictionary has the right keys. In Approach 2, the data and method are bundled together. The object “knows” its own magnitude, and the method is guaranteed to work with the object’s data.","key":"CfvFrxm4Zg"}],"key":"YgVSb24W9y"},{"type":"paragraph","children":[{"type":"text","value":"The OOP approach becomes more valuable as complexity grows. Imagine tracking 1000 stars with 20 different calculations — keeping track of which data goes with which function becomes error-prone. With objects, each star manages its own data and knows what operations it can perform.","key":"okXYHyoApN"}],"key":"DunBuuwWjR"}],"key":"M3YNydOHuU"},{"type":"heading","depth":3,"position":{"start":{"line":305,"column":1},"end":{"line":305,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":305,"column":1},"end":{"line":305,"column":1}},"key":"xnZ5ofZm8p"},{"type":"strong","position":{"start":{"line":305,"column":1},"end":{"line":305,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: Objects as State Machines","position":{"start":{"line":305,"column":1},"end":{"line":305,"column":1}},"key":"ogxyRdOitT"}],"key":"JAuFsw8ipZ"}],"identifier":"id-computational-thinking-box-objects-as-state-machines","label":"📦 Computational Thinking Box: Objects as State Machines","html_id":"id-computational-thinking-box-objects-as-state-machines","implicit":true,"key":"h60vp3ih01"},{"type":"code","lang":"","value":"PATTERN: Object as State Container\n\nObjects excel at maintaining and managing state over time.\nUnlike functions that forget everything between calls,\nobjects remember their state and can evolve it.\n\nStructure:\n- State: Instance attributes hold current values\n- Transitions: Methods modify state based on rules\n- Queries: Methods return information about state\n\nAstronomical applications:\n- Telescope objects tracking position, filters, exposure settings\n- Observation objects accumulating photons over time\n- Orbit objects evolving position and velocity\n- Pipeline objects maintaining reduction state\n\nThis pattern appears throughout scientific Python:\n- NumPy arrays remember shape, dtype, data\n- Matplotlib figures track all plot elements\n- SciPy optimizers maintain convergence history\n- Astropy Tables track columns, metadata, units","position":{"start":{"line":307,"column":1},"end":{"line":330,"column":1}},"key":"nMPOoNlo2W"},{"type":"heading","depth":2,"position":{"start":{"line":332,"column":1},"end":{"line":332,"column":1}},"children":[{"type":"text","value":"6.2 Properties and Encapsulation","position":{"start":{"line":332,"column":1},"end":{"line":332,"column":1}},"key":"yPqoMyHt1S"}],"identifier":"id-6-2-properties-and-encapsulation","label":"6.2 Properties and Encapsulation","html_id":"id-6-2-properties-and-encapsulation","implicit":true,"key":"jtUjFBNP2Z"},{"type":"paragraph","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"children":[{"type":"text","value":"Properties let you compute attributes dynamically and control access to object data. They’re one of Python’s most elegant features, allowing you to write code that looks like simple attribute access but actually runs methods behind the scenes.","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"key":"hSh23YtTW1"}],"key":"wiDr4XcVGk"},{"type":"heading","depth":3,"position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"children":[{"type":"text","value":"Computed Properties with ","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"key":"a9FFPAELFI"},{"type":"cite","identifier":"property","label":"property","kind":"narrative","position":{"start":{"line":336,"column":26},"end":{"line":336,"column":35}},"error":"not found","key":"cCpMbkFWgz"}],"identifier":"computed-properties-with","label":"Computed Properties with ","html_id":"computed-properties-with","implicit":true,"key":"mScTm7Rboh"},{"type":"paragraph","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"children":[{"type":"text","value":"Sometimes an object’s attribute should be calculated from other attributes rather than stored separately. Properties make this transparent:","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"key":"KvKCK1K4Nx"}],"key":"pjlHWp7ruB"}],"key":"iWh7qc3KsL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Detector:\n    \"\"\"CCD detector with computed properties.\"\"\"\n    \n    def __init__(self, width_pixels, height_pixels, pixel_size_um):\n        self.width_pixels = width_pixels\n        self.height_pixels = height_pixels\n        self.pixel_size_um = pixel_size_um\n    \n    @property\n    def total_pixels(self):\n        \"\"\"Total pixel count.\"\"\"\n        return self.width_pixels * self.height_pixels\n    \n    @property\n    def area_mm2(self):\n        \"\"\"Sensor area in square millimeters.\"\"\"\n        width_mm = self.width_pixels * self.pixel_size_um / 1000\n        height_mm = self.height_pixels * self.pixel_size_um / 1000\n        return width_mm * height_mm\n    \n    @property\n    def diagonal_mm(self):\n        \"\"\"Sensor diagonal in millimeters.\"\"\"\n        width_mm = self.width_pixels * self.pixel_size_um / 1000\n        height_mm = self.height_pixels * self.pixel_size_um / 1000\n        return (width_mm**2 + height_mm**2)**0.5\n\n# Properties look like attributes but are computed\nccd = Detector(4096, 4096, 15)\nprint(f\"Total pixels: {ccd.total_pixels:,}\")\nprint(f\"Sensor area: {ccd.area_mm2:.1f} mm²\")\nprint(f\"Diagonal: {ccd.diagonal_mm:.1f} mm\")","key":"qNYa7ExGzp"},{"type":"output","id":"zAaDR2dIC-4SdFRSjmXai","data":[],"key":"Fk6Csl3acs"}],"key":"IvXaiG0i9u"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":375,"column":1},"end":{"line":375,"column":1}},"children":[{"type":"text","value":"Properties ensure data consistency. If total_pixels were a regular attribute, you’d have to remember to update it every time width or height changed. With properties, it’s always correct because it’s calculated on demand.","position":{"start":{"line":375,"column":1},"end":{"line":375,"column":1}},"key":"HlWQzaSO81"}],"key":"WGqDUy8vF3"},{"type":"heading","depth":3,"position":{"start":{"line":377,"column":1},"end":{"line":377,"column":1}},"children":[{"type":"text","value":"Setters and Validation","position":{"start":{"line":377,"column":1},"end":{"line":377,"column":1}},"key":"GfmsZ6T3bZ"}],"identifier":"setters-and-validation","label":"Setters and Validation","html_id":"setters-and-validation","implicit":true,"key":"OiH9rgVjgP"},{"type":"paragraph","position":{"start":{"line":379,"column":1},"end":{"line":379,"column":1}},"children":[{"type":"text","value":"Properties can also validate data when it’s set, preventing invalid states. This is crucial for scientific code where physical constraints must be respected:","position":{"start":{"line":379,"column":1},"end":{"line":379,"column":1}},"key":"MT39OufCmn"}],"key":"jRqr2yb8x4"}],"key":"wuRzgE2mwU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Filter:\n    \"\"\"Astronomical filter with wavelength validation.\"\"\"\n    \n    def __init__(self, name, central_wavelength_nm):\n        self.name = name\n        self._wavelength = central_wavelength_nm  # Note: underscore for internal\n    \n    @property\n    def wavelength(self):\n        \"\"\"Central wavelength in nanometers.\"\"\"\n        return self._wavelength\n    \n    @wavelength.setter\n    def wavelength(self, value):\n        \"\"\"Set wavelength with validation.\"\"\"\n        if value < 100:  # Below UV\n            raise ValueError(f\"Wavelength {value} nm below UV range\")\n        if value > 30000:  # Beyond far-IR\n            raise ValueError(f\"Wavelength {value} nm beyond far-IR\")\n        self._wavelength = value\n    \n    @property\n    def wavelength_angstrom(self):\n        \"\"\"Wavelength in Angstroms.\"\"\"\n        return self._wavelength * 10\n    \n    @property\n    def frequency_hz(self):\n        \"\"\"Frequency in Hz.\"\"\"\n        c = 2.998e17  # Speed of light in nm/s\n        return c / self._wavelength\n\n# Validation prevents invalid states\nv_filter = Filter(\"V\", 550)\nprint(f\"V band: {v_filter.wavelength} nm = {v_filter.wavelength_angstrom} Å\")\n\n# This would raise an error:\n# v_filter.wavelength = 50  # ValueError: below UV range","key":"e3RcT75xIS"},{"type":"output","id":"GIyEBm7tT975iFP3OHngt","data":[],"key":"lUVfllDT4A"}],"key":"NhbCCMWzyk"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":422,"column":1},"end":{"line":422,"column":1}},"children":[{"type":"text","value":"The underscore prefix (","position":{"start":{"line":422,"column":1},"end":{"line":422,"column":1}},"key":"HvnfVZxNKR"},{"type":"inlineCode","value":"_wavelength","position":{"start":{"line":422,"column":1},"end":{"line":422,"column":1}},"key":"HTpK34Vzx3"},{"type":"text","value":") is Python’s convention for “internal” attributes. It signals to users “don’t access this directly, use the property instead.”","position":{"start":{"line":422,"column":1},"end":{"line":422,"column":1}},"key":"iid7QZHIlx"}],"key":"Q95xWyYnPw"},{"type":"heading","depth":3,"position":{"start":{"line":424,"column":1},"end":{"line":424,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":424,"column":1},"end":{"line":424,"column":1}},"key":"H0PqaA548A"},{"type":"strong","position":{"start":{"line":424,"column":1},"end":{"line":424,"column":1}},"children":[{"type":"text","value":"Why This Matters: Preventing Spacecraft Disasters with Properties","position":{"start":{"line":424,"column":1},"end":{"line":424,"column":1}},"key":"ogYCpVH1Gb"}],"key":"HGwnVKy7ZP"}],"identifier":"id-why-this-matters-preventing-spacecraft-disasters-with-properties","label":"🌟 Why This Matters: Preventing Spacecraft Disasters with Properties","html_id":"id-why-this-matters-preventing-spacecraft-disasters-with-properties","implicit":true,"key":"YwZKWprRRl"},{"type":"code","lang":"","value":"REAL-WORLD CONNECTION: Unit Safety in Astropy\n\nRemember the Mars Climate Orbiter? It crashed because one team used \nmetric units while another used imperial. Properties prevent such \ndisasters in modern astronomy software.\n\nAstropy's Quantity class uses properties to ensure unit consistency:\n\n    >>> distance = 10 * u.parsec\n    >>> distance.to(u.lightyear)  # Property converts safely\n    <Quantity 32.6156 lyr>\n    \n    >>> velocity = 200 * u.km/u.s\n    >>> velocity.si  # Property returns SI units\n    <Quantity 200000. m/s>\n\nProperties validate and convert units automatically:\n- Setting invalid units raises an error immediately\n- Conversions are handled consistently\n- Unit metadata travels with the data\n\nEvery major space mission now uses similar property-based \nvalidation. The James Webb Space Telescope's command software \nvalidates every parameter through properties before uplink.\n\nYou're learning the same defensive programming that keeps \nbillion-dollar missions safe!","position":{"start":{"line":426,"column":1},"end":{"line":454,"column":1}},"key":"aCrG4bwnby"},{"type":"heading","depth":3,"position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"key":"t46pOWQiYd"},{"type":"strong","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Property Recursion","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"key":"lF4eFrmTOg"}],"key":"GZGHaoGNuy"}],"identifier":"id-common-bug-alert-property-recursion","label":"⚠️ Common Bug Alert: Property Recursion","html_id":"id-common-bug-alert-property-recursion","implicit":true,"key":"aaq8YSg18k"}],"key":"DfqT3xWIpe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# WRONG - Infinite recursion!\nclass BadClass:\n    @property\n    def value(self):\n        return self.value  # Calls itself forever!\n\n# CORRECT - Use different internal name\nclass GoodClass:\n    @property\n    def value(self):\n        return self._value  # Different name\n\n# Always use a different name (usually with underscore) for storage","key":"WlhID7yo9t"},{"type":"output","id":"NcrBD2dly1tTPdhntg0Ug","data":[],"key":"oXHqd9rDMk"}],"key":"YuR2eFl8SB"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":474,"column":1},"end":{"line":474,"column":1}},"children":[{"type":"text","value":"6.3 Inheritance: Building on Existing Classes","position":{"start":{"line":474,"column":1},"end":{"line":474,"column":1}},"key":"OtRXtT6lYe"}],"identifier":"id-6-3-inheritance-building-on-existing-classes","label":"6.3 Inheritance: Building on Existing Classes","html_id":"id-6-3-inheritance-building-on-existing-classes","implicit":true,"key":"WCbD6DNvGT"},{"type":"paragraph","position":{"start":{"line":476,"column":1},"end":{"line":476,"column":1}},"children":[{"type":"text","value":"Inheritance lets you create new classes based on existing ones, inheriting their attributes and methods while adding or modifying functionality. This models “is-a” relationships that are everywhere in astronomy: a WhiteDwarf is-a Star, a GlobularCluster is-a StellarPopulation, a SpacetelEscope is-a Telescope.","position":{"start":{"line":476,"column":1},"end":{"line":476,"column":1}},"key":"YAyDczQML7"}],"key":"ZdpgFJTuCy"},{"type":"heading","depth":3,"position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"key":"g1oI6I7PKb"},{"type":"strong","position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"children":[{"type":"text","value":"Why This Matters: Chandra’s Software Architecture","position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"key":"ycW4gsfWmD"}],"key":"Z96rXRIwwl"}],"identifier":"id-why-this-matters-chandras-software-architecture","label":"🌟 Why This Matters: Chandra’s Software Architecture","html_id":"id-why-this-matters-chandras-software-architecture","implicit":true,"key":"ij3PI1j2xn"},{"type":"code","lang":"","value":"REAL-WORLD CONNECTION: X-ray Observatory Software Hierarchy\n\nThe Chandra X-ray Observatory's data processing pipeline uses \ndeep inheritance hierarchies to model its complex instruments:\n\nChardraDetector (base class)\n├── ACIS (Advanced CCD Imaging Spectrometer)\n│   ├── ACIS_I (Imaging array)\n│   └── ACIS_S (Spectroscopy array)\n└── HRC (High Resolution Camera)\n    ├── HRC_I (Imaging detector)\n    └── HRC_S (Spectroscopy detector)\n\nEach detector inherits common methods:\n- read_event_list()\n- apply_calibration()\n- detect_cosmic_rays()\n\nBut each subclass overrides specific behaviors:\n- ACIS handles charge transfer inefficiency\n- HRC handles timing with microsecond precision\n- ACIS_S adds grating spectroscopy methods\n\nThis inheritance structure allows the pipeline to process\ndata from ANY detector using the same interface, while each\ndetector type handles its unique characteristics.\n\nWhen astronomers write:\n    detector.process_observation(data)\n\nThe correct processing happens automatically based on the\ndetector type - polymorphism in action! This design pattern\nis why Chandra can still process new observation modes 25\nyears after launch.","position":{"start":{"line":480,"column":1},"end":{"line":515,"column":1}},"key":"rCf6UnzusS"},{"type":"mermaid","value":"classDiagram\n    class CelestialBody {\n        +name: str\n        +mass: float\n        +radius: float\n        +surface_gravity()\n        +density()\n    }\n    \n    class Star {\n        +temperature: float\n        +luminosity()\n        +spectral_class()\n    }\n    \n    class Planet {\n        +orbital_period: float\n        +moons: int\n        +orbital_velocity()\n    }\n    \n    class WhiteDwarf {\n        +cooling_age: float\n        +crystallization_fraction()\n    }\n    \n    class GasGiant {\n        +ring_system: bool\n        +cloud_layers()\n    }\n    \n    CelestialBody <|-- Star : inherits\n    CelestialBody <|-- Planet : inherits\n    Star <|-- WhiteDwarf : inherits\n    Planet <|-- GasGiant : inherits\n    \n    note for CelestialBody \"Base class with common properties\"\n    note for Star \"Adds stellar-specific features\"","key":"vTrxeMgrmw"},{"type":"heading","depth":3,"position":{"start":{"line":558,"column":1},"end":{"line":558,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":558,"column":1},"end":{"line":558,"column":1}},"key":"eKZpwSVXMm"},{"type":"strong","position":{"start":{"line":558,"column":1},"end":{"line":558,"column":1}},"children":[{"type":"text","value":"Why This Matters: Building Astronomical Software","position":{"start":{"line":558,"column":1},"end":{"line":558,"column":1}},"key":"wZPypJJLhx"}],"key":"vpUkfrbihl"}],"identifier":"id-why-this-matters-building-astronomical-software","label":"🌟 Why This Matters: Building Astronomical Software","html_id":"id-why-this-matters-building-astronomical-software","implicit":true,"key":"jKD2tFsn7E"},{"type":"code","lang":"","value":"REAL-WORLD CONNECTION: Inheritance in Action\n\nMajor astronomy packages use inheritance extensively:\n\nAstropy coordinates:\n- BaseCoordinateFrame (base)\n  └── ICRS (International Celestial Reference System)\n  └── Galactic (Galactic coordinates)\n  └── AltAz (Horizontal coordinates)\n\nEach frame inherits transformation methods but implements\nits own specific coordinate system.\n\nPhotutils (photometry package):\n- Aperture (base)\n  └── CircularAperture\n  └── EllipticalAperture\n  └── RectangularAperture\n\nAll apertures inherit area calculation and plotting,\nbut each implements its own geometry.\n\nThis design lets you write code that works with ANY\ncoordinate system or ANY aperture shape!","position":{"start":{"line":560,"column":1},"end":{"line":585,"column":1}},"key":"VCuKIjawgp"},{"type":"heading","depth":3,"position":{"start":{"line":587,"column":1},"end":{"line":587,"column":1}},"children":[{"type":"text","value":"Basic Inheritance - Progressive Build","position":{"start":{"line":587,"column":1},"end":{"line":587,"column":1}},"key":"W5hrgCA57v"}],"identifier":"basic-inheritance-progressive-build","label":"Basic Inheritance - Progressive Build","html_id":"basic-inheritance-progressive-build","implicit":true,"key":"mXGG170dQo"},{"type":"paragraph","position":{"start":{"line":589,"column":1},"end":{"line":589,"column":1}},"children":[{"type":"text","value":"Let’s build an inheritance hierarchy step by step:","position":{"start":{"line":589,"column":1},"end":{"line":589,"column":1}},"key":"N5YQpHA6Kd"}],"key":"hTEoxDGV7I"}],"key":"AI6P0ukCN3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 1: Define the base class\nclass CelestialBody:\n    \"\"\"Base class for astronomical objects.\"\"\"\n    \n    def __init__(self, name, mass, radius):\n        self.name = name\n        self.mass = mass      # kg\n        self.radius = radius  # meters\n    \n    def surface_gravity(self):\n        \"\"\"Calculate surface gravity in m/s².\"\"\"\n        G = 6.674e-11  # SI units\n        return G * self.mass / self.radius**2\n    \n    def escape_velocity(self):\n        \"\"\"Calculate escape velocity in m/s.\"\"\"\n        import math\n        G = 6.674e-11\n        return math.sqrt(2 * G * self.mass / self.radius)","key":"f0aOUCRaeh"},{"type":"output","id":"ZD_IyXusI1JUlXSLu2yDJ","data":[],"key":"Ni2DKPqmO2"}],"key":"KbwGHWMB96"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 2: Create a derived class that extends the base\nclass Planet(CelestialBody):\n    \"\"\"A planet with additional properties.\"\"\"\n    \n    def __init__(self, name, mass, radius, orbital_period, moons=0):\n        # Call parent class constructor\n        super().__init__(name, mass, radius)\n        # Add planet-specific attributes\n        self.orbital_period = orbital_period  # days\n        self.moons = moons\n    \n    def day_length_hours(self):\n        \"\"\"Estimate day length (simplified).\"\"\"\n        # This is a simplification for demonstration\n        return 24 * (self.radius / 6.371e6)**0.5","key":"FacXfRBwtr"},{"type":"output","id":"A5auejly9htnx32V0hLvl","data":[],"key":"qPv7BPnSC7"}],"key":"TsK2fIU174"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 3: Use the inheritance hierarchy\nearth = Planet(\"Earth\", 5.972e24, 6.371e6, 365.25, moons=1)\n\n# Planet inherits methods from CelestialBody\nprint(f\"Surface gravity: {earth.surface_gravity():.1f} m/s²\")\nprint(f\"Escape velocity: {earth.escape_velocity()/1000:.1f} km/s\")\n\n# And has its own methods\nprint(f\"Estimated day length: {earth.day_length_hours():.1f} hours\")\nprint(f\"Number of moons: {earth.moons}\")","key":"FoSgo7QDn9"},{"type":"output","id":"3_9uAB4hcW0XzBSf5Ioxu","data":[],"key":"eNP6xYXctJ"}],"key":"TujDH35Z8D"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":644,"column":1},"end":{"line":644,"column":1}},"children":[{"type":"text","value":"Understanding super()","position":{"start":{"line":644,"column":1},"end":{"line":644,"column":1}},"key":"Gslt72kNlg"}],"identifier":"understanding-super","label":"Understanding super()","html_id":"understanding-super","implicit":true,"key":"KRTZ01sZHH"},{"type":"paragraph","position":{"start":{"line":646,"column":1},"end":{"line":646,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":646,"column":1},"end":{"line":646,"column":1}},"key":"ZJXIIikfFg"},{"type":"inlineCode","value":"super()","position":{"start":{"line":646,"column":1},"end":{"line":646,"column":1}},"key":"qxypQUiEVh"},{"type":"text","value":" function is crucial for inheritance. It ensures parent classes are properly initialized and is essential for complex inheritance hierarchies:","position":{"start":{"line":646,"column":1},"end":{"line":646,"column":1}},"key":"oXhxhzsiAf"}],"key":"c636tzsn9j"}],"key":"kIH0zaOKXc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Star(CelestialBody):\n    \"\"\"A star with luminosity.\"\"\"\n    \n    def __init__(self, name, mass, radius, temperature):\n        super().__init__(name, mass, radius)  # Initialize parent\n        self.temperature = temperature  # Kelvin\n    \n    def luminosity(self):\n        \"\"\"Calculate luminosity using Stefan-Boltzmann law.\"\"\"\n        import math\n        sigma = 5.670e-8  # Stefan-Boltzmann constant\n        return 4 * math.pi * self.radius**2 * sigma * self.temperature**4\n    \n    def spectral_class(self):\n        \"\"\"Determine spectral class from temperature.\"\"\"\n        if self.temperature > 30000: return 'O'\n        elif self.temperature > 10000: return 'B'\n        elif self.temperature > 7500: return 'A'\n        elif self.temperature > 6000: return 'F'\n        elif self.temperature > 5200: return 'G'\n        elif self.temperature > 3700: return 'K'\n        else: return 'M'\n\nsun = Star(\"Sun\", 1.989e30, 6.96e8, 5778)\nprint(f\"Sun's spectral class: {sun.spectral_class()}\")\nprint(f\"Luminosity: {sun.luminosity():.2e} watts\")","key":"Kx8x6l6ADT"},{"type":"output","id":"50_DyU6v9HGBTbx7CpEu7","data":[],"key":"s0xVXgTFeU"}],"key":"JBlXAg39P6"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"children":[{"type":"text","value":"Method Overriding","position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"key":"stU7y8bQHn"}],"identifier":"method-overriding","label":"Method Overriding","html_id":"method-overriding","implicit":true,"key":"nwe4H3dcfi"},{"type":"paragraph","position":{"start":{"line":679,"column":1},"end":{"line":679,"column":1}},"children":[{"type":"text","value":"Child classes can override parent methods to provide specialized behavior:","position":{"start":{"line":679,"column":1},"end":{"line":679,"column":1}},"key":"Q2cgCov7R9"}],"key":"me6TgCfxLW"}],"key":"Y0w8XGL8KR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class WhiteDwarf(Star):\n    \"\"\"A white dwarf star with special density calculation.\"\"\"\n    \n    def __init__(self, name, mass, radius, temperature, cooling_age_gyr):\n        super().__init__(name, mass, radius, temperature)\n        self.cooling_age = cooling_age_gyr  # Billion years\n    \n    def density(self):\n        \"\"\"Override density to add extreme density warning.\"\"\"\n        import math\n        volume = 4/3 * math.pi * self.radius**3\n        density = self.mass / volume\n        \n        # White dwarfs have extreme densities\n        if density > 1e9:  # kg/m³\n            print(f\"⚠️ Extreme density: {density:.2e} kg/m³\")\n            print(f\"   (A teaspoon would weigh {density*5e-6:.0f} kg!)\")\n        \n        return density\n    \n    def crystallization_fraction(self):\n        \"\"\"Estimate crystallized fraction based on cooling age.\"\"\"\n        # Simplified model for demonstration\n        if self.cooling_age < 1:\n            return 0.0\n        elif self.cooling_age > 10:\n            return 0.9\n        else:\n            return self.cooling_age / 11\n\nsirius_b = WhiteDwarf(\"Sirius B\", 2.02e30, 5.8e6, 25000, 0.12)\ndensity = sirius_b.density()","key":"BslZaqqCqa"},{"type":"output","id":"LtlpjXAbW7g752m1EWp2g","data":[],"key":"lZfcjgBQ6f"}],"key":"mZiAhm1fmi"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":716,"column":1},"end":{"line":716,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":716,"column":1},"end":{"line":716,"column":1}},"key":"wXeqPm5wRs"},{"type":"strong","position":{"start":{"line":716,"column":1},"end":{"line":716,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":716,"column":1},"end":{"line":716,"column":1}},"key":"vcxPU9QCDd"}],"key":"YABIKp5D7m"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-1","implicit":true,"key":"uyRmLfQXO8"},{"type":"paragraph","position":{"start":{"line":718,"column":1},"end":{"line":718,"column":1}},"children":[{"type":"text","value":"What’s the output of this code? Why?","position":{"start":{"line":718,"column":1},"end":{"line":718,"column":1}},"key":"McxIdR9YOJ"}],"key":"KdytP6FzXv"}],"key":"MUZlJrvS3B"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class A:\n    def method(self): return \"A\"\n\nclass B(A):\n    def method(self): return \"B\"\n\nclass C(A):\n    def method(self): return \"C\"\n\nclass D(B, C):\n    pass\n\nobj = D()\nprint(obj.method())\nprint(D.__mro__)  # Method Resolution Order","key":"StAcpWvRLS"},{"type":"output","id":"IWfHhzPN6IPHJeN2IeUfN","data":[],"key":"p8AqUjOv3U"}],"key":"lnp9chpDC0"},{"type":"block","children":[{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"KZiWiARhvD"}],"key":"Pu8vTpEG3l"},{"type":"paragraph","children":[{"type":"text","value":"Output is “B” because Python uses the Method Resolution Order (MRO) to determine which method to call. The MRO for class D is: D → B → C → A → object. Since D doesn’t have its own method(), Python looks in B next and finds it there. The MRO ensures each class appears only once and respects the inheritance order you specified (B before C).","key":"nbqONR2je9"}],"key":"JpyD3o2wEx"}],"key":"ZnmrOTueLA"},{"type":"heading","depth":3,"position":{"start":{"line":745,"column":1},"end":{"line":745,"column":1}},"children":[{"type":"text","value":"Composition vs Inheritance","position":{"start":{"line":745,"column":1},"end":{"line":745,"column":1}},"key":"VgJeekND3B"}],"identifier":"composition-vs-inheritance","label":"Composition vs Inheritance","html_id":"composition-vs-inheritance","implicit":true,"key":"VcZt8MZxB4"},{"type":"paragraph","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"children":[{"type":"text","value":"Sometimes “has-a” relationships (composition) are better than “is-a” relationships (inheritance):","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"key":"QCxLu41hi7"}],"key":"pNLUQKwvZt"}],"key":"vpANtF1Lk9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Orbit:\n    \"\"\"Orbital parameters (composition approach).\"\"\"\n    \n    def __init__(self, semi_major_axis_au, eccentricity, period_years):\n        self.a = semi_major_axis_au  # Astronomical units\n        self.e = eccentricity\n        self.period = period_years\n    \n    def perihelion(self):\n        \"\"\"Closest approach distance.\"\"\"\n        return self.a * (1 - self.e)\n    \n    def aphelion(self):\n        \"\"\"Farthest distance.\"\"\"\n        return self.a * (1 + self.e)\n\nclass Comet:\n    \"\"\"Comet with orbital information (has-a orbit).\"\"\"\n    \n    def __init__(self, name, orbit, magnitude):\n        self.name = name\n        self.orbit = orbit  # Composition: Comet HAS an Orbit\n        self.magnitude = magnitude\n    \n    def is_visible(self):\n        \"\"\"Check if visible to naked eye.\"\"\"\n        return self.magnitude < 6\n\n# Create comet with orbit\nhalley_orbit = Orbit(17.8, 0.967, 75.3)\nhalley = Comet(\"Halley\", halley_orbit, 4.5)\n\nprint(f\"{halley.name}'s perihelion: {halley.orbit.perihelion():.2f} AU\")\nprint(f\"Visible to naked eye: {halley.is_visible()}\")","key":"Miz1a5Kmgc"},{"type":"output","id":"ALarxo2KK84fSe2yEOHjS","data":[],"key":"HnbzZHGjdA"}],"key":"qMSjJeXLsi"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":786,"column":1},"end":{"line":786,"column":1}},"children":[{"type":"text","value":"Use inheritance when objects share an “is-a” relationship (WhiteDwarf is-a Star). Use composition when objects have a “has-a” relationship (Comet has-a Orbit).","position":{"start":{"line":786,"column":1},"end":{"line":786,"column":1}},"key":"jZixYC0Iro"}],"key":"HeqZ7dTXHh"},{"type":"heading","depth":2,"position":{"start":{"line":788,"column":1},"end":{"line":788,"column":1}},"children":[{"type":"text","value":"6.4 Special Methods: Making Objects Pythonic","position":{"start":{"line":788,"column":1},"end":{"line":788,"column":1}},"key":"p7zcjTr0R9"}],"identifier":"id-6-4-special-methods-making-objects-pythonic","label":"6.4 Special Methods: Making Objects Pythonic","html_id":"id-6-4-special-methods-making-objects-pythonic","implicit":true,"key":"CeYDtqFcgF"},{"type":"paragraph","position":{"start":{"line":790,"column":1},"end":{"line":790,"column":1}},"children":[{"type":"text","value":"Special methods (also called magic methods or dunder methods) let your objects behave like built-in Python types. They’re surrounded by double underscores and are called automatically by Python in specific situations.","position":{"start":{"line":790,"column":1},"end":{"line":790,"column":1}},"key":"pEAQN4Z7st"}],"key":"x3ZV7oupJ9"},{"type":"mermaid","value":"flowchart LR\n    A[Python Operation] --> B[Special Method Called]\n    \n    C[print(obj)] --> D[__str__]\n    E[obj1 + obj2] --> F[__add__]\n    G[len(obj)] --> H[__len__]\n    I[obj bracket i bracket] --> J[__getitem__]\n    K[for x in obj] --> L[__iter__]\n    M[obj1 == obj2] --> N[__eq__]\n    \n    style A fill:#f9f\n    style B fill:#9ff","key":"Brjz51f0TP"},{"type":"heading","depth":3,"position":{"start":{"line":807,"column":1},"end":{"line":807,"column":1}},"children":[{"type":"text","value":"String Representation and Arithmetic","position":{"start":{"line":807,"column":1},"end":{"line":807,"column":1}},"key":"jp1CVsFHJF"}],"identifier":"string-representation-and-arithmetic","label":"String Representation and Arithmetic","html_id":"string-representation-and-arithmetic","implicit":true,"key":"WvfUCIv1PT"}],"key":"fPyrHuxCVX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Vector3D:\n    \"\"\"A 3D vector for astronomical coordinates.\"\"\"\n    \n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        \"\"\"Human-readable string for print().\"\"\"\n        return f\"Vector({self.x:.2f}, {self.y:.2f}, {self.z:.2f})\"\n    \n    def __repr__(self):\n        \"\"\"Developer-friendly representation.\"\"\"\n        return f\"Vector3D(x={self.x}, y={self.y}, z={self.z})\"\n    \n    def __add__(self, other):\n        \"\"\"Vector addition with + operator.\"\"\"\n        return Vector3D(\n            self.x + other.x,\n            self.y + other.y,\n            self.z + other.z\n        )\n    \n    def __abs__(self):\n        \"\"\"Magnitude with abs().\"\"\"\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n    \n    def __eq__(self, other):\n        \"\"\"Equality comparison with ==.\"\"\"\n        return (self.x == other.x and \n                self.y == other.y and \n                self.z == other.z)\n\n# Using special methods\nv1 = Vector3D(3, 4, 0)\nv2 = Vector3D(1, 0, 0)\n\nprint(v1)  # Calls __str__\nprint(f\"Magnitude: {abs(v1)}\")  # Calls __abs__\n\nv3 = v1 + v2  # Calls __add__\nprint(f\"Sum: {v3}\")","key":"P2XtCbSZPg"},{"type":"output","id":"5t35F0IMt5sjQNF8iR8fy","data":[],"key":"RKSgfdoUQ4"}],"key":"VBBuiLX0vM"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":855,"column":1},"end":{"line":855,"column":1}},"children":[{"type":"text","value":"Container Behavior","position":{"start":{"line":855,"column":1},"end":{"line":855,"column":1}},"key":"H9Kdgs14C2"}],"identifier":"container-behavior","label":"Container Behavior","html_id":"container-behavior","implicit":true,"key":"u3JBSUHZBn"},{"type":"paragraph","position":{"start":{"line":857,"column":1},"end":{"line":857,"column":1}},"children":[{"type":"text","value":"Make your objects act like containers:","position":{"start":{"line":857,"column":1},"end":{"line":857,"column":1}},"key":"NPhLP4BlR5"}],"key":"P98T0KzoAg"}],"key":"KpAEO0c7tg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class ObservationLog:\n    \"\"\"A log of observations that acts like a list.\"\"\"\n    \n    def __init__(self):\n        self._observations = []\n    \n    def add(self, target, time, conditions):\n        self._observations.append({\n            'target': target,\n            'time': time,\n            'conditions': conditions\n        })\n    \n    def __len__(self):\n        \"\"\"Number of observations.\"\"\"\n        return len(self._observations)\n    \n    def __getitem__(self, index):\n        \"\"\"Access with square brackets.\"\"\"\n        return self._observations[index]\n    \n    def __iter__(self):\n        \"\"\"Make iterable with for loops.\"\"\"\n        return iter(self._observations)\n    \n    def __contains__(self, target):\n        \"\"\"Support 'in' operator.\"\"\"\n        return any(obs['target'] == target for obs in self._observations)\n\n# Use like a container\nlog = ObservationLog()\nlog.add(\"M31\", \"2024-01-15 22:30\", \"Clear\")\nlog.add(\"M42\", \"2024-01-15 23:15\", \"Partly cloudy\")\n\nprint(f\"Total observations: {len(log)}\")\nprint(f\"First observation: {log[0]['target']}\")\nprint(f\"M31 in log: {'M31' in log}\")\n\nfor obs in log:\n    print(f\"  {obs['target']} at {obs['time']}\")","key":"OcYuFHFMyQ"},{"type":"output","id":"tfnnRzwnvTmS5fOntdoC0","data":[],"key":"ycq4q83DTJ"}],"key":"tUXMBnZk1y"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":902,"column":1},"end":{"line":902,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":902,"column":1},"end":{"line":902,"column":1}},"key":"gCaoIW6JWy"},{"type":"strong","position":{"start":{"line":902,"column":1},"end":{"line":902,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":902,"column":1},"end":{"line":902,"column":1}},"key":"aQsxiAyrrw"}],"key":"cImfmnWpIY"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-2","implicit":true,"key":"uHk4ah2HzC"},{"type":"paragraph","position":{"start":{"line":904,"column":1},"end":{"line":904,"column":1}},"children":[{"type":"text","value":"If you implement ","position":{"start":{"line":904,"column":1},"end":{"line":904,"column":1}},"key":"niDhp6XbSF"},{"type":"inlineCode","value":"__eq__","position":{"start":{"line":904,"column":1},"end":{"line":904,"column":1}},"key":"ymPNHieRZV"},{"type":"text","value":" but not ","position":{"start":{"line":904,"column":1},"end":{"line":904,"column":1}},"key":"aHc7fi7qKc"},{"type":"inlineCode","value":"__hash__","position":{"start":{"line":904,"column":1},"end":{"line":904,"column":1}},"key":"fhHtn14fk6"},{"type":"text","value":", can your objects be dictionary keys? Why or why not?","position":{"start":{"line":904,"column":1},"end":{"line":904,"column":1}},"key":"HkplMjNX8D"}],"key":"ERERgVLzP4"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"aIROOBQBoF"}],"key":"wqI9OPEYqa"},{"type":"paragraph","children":[{"type":"text","value":"No, they cannot be dictionary keys or added to sets! When you override ","key":"Dk7XvbOLj1"},{"type":"inlineCode","value":"__eq__","key":"KUe7sJFKwd"},{"type":"text","value":", Python automatically sets ","key":"LIMF4Rm4Nu"},{"type":"inlineCode","value":"__hash__","key":"QRwmZfQNKR"},{"type":"text","value":" to None to prevent a subtle bug. Here’s why:","key":"ImFsOSvUfR"}],"key":"yqsUjFjKxE"},{"type":"code","lang":"python","meta":null,"value":"class BadStar:\n    def __init__(self, name):\n        self.name = name\n    \n    def __eq__(self, other):\n        return self.name == other.name\n    # No __hash__ defined!\n\nstar1 = BadStar(\"Vega\")\nstar2 = BadStar(\"Vega\")\n\n# These are equal according to __eq__\nprint(star1 == star2)  # True\n\n# But can't be used as dictionary keys:\n# catalog = {star1: \"bright\"}  # TypeError: unhashable type: 'BadStar'","key":"ZQJSKL1BH5"},{"type":"paragraph","children":[{"type":"text","value":"The rule is: objects that are equal (according to ","key":"SnfpObnGwW"},{"type":"inlineCode","value":"__eq__","key":"STUCgLOqW6"},{"type":"text","value":") must have the same hash value. If you could use objects with only ","key":"WszYRjNopL"},{"type":"inlineCode","value":"__eq__","key":"PacAOVmKgi"},{"type":"text","value":" as dictionary keys, you could have two “equal” keys with different hashes, breaking the dictionary!","key":"vvgAKZXOWY"}],"key":"NdQeWIGYSG"},{"type":"paragraph","children":[{"type":"text","value":"To fix it, implement both together:","key":"iIyVYRMSME"}],"key":"I1qeYexPW5"},{"type":"code","lang":"python","meta":null,"value":"class GoodStar:\n    def __init__(self, name):\n        self.name = name\n    \n    def __eq__(self, other):\n        return self.name == other.name\n    \n    def __hash__(self):\n        return hash(self.name)  # Hash based on equality criteria\n\n# Now it works!\ncatalog = {GoodStar(\"Vega\"): \"bright\"}","key":"LBsASohCc4"},{"type":"paragraph","children":[{"type":"text","value":"This is part of Python’s “protocol” system - certain methods must work together. You’re learning the same patterns that make NumPy arrays and Astropy coordinates work seamlessly with Python’s built-in functions!","key":"eUpoPUR0VA"}],"key":"wGhIfjmTvY"}],"key":"ZmF9JcXxNP"},{"type":"heading","depth":3,"position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"RrtMKxEbMe"},{"type":"strong","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Protocol Pattern","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"v10bq63bVZ"}],"key":"WZkXne1p0H"}],"identifier":"id-computational-thinking-box-the-protocol-pattern","label":"📦 Computational Thinking Box: The Protocol Pattern","html_id":"id-computational-thinking-box-the-protocol-pattern","implicit":true,"key":"vq8OfEnOaZ"},{"type":"code","lang":"","value":"PATTERN: Duck Typing and Protocols\n\n\"If it walks like a duck and quacks like a duck, it's a duck\"\n\nPython doesn't care about object type, only behavior.\nObjects that implement certain special methods can be used\nanywhere that behavior is expected.\n\nCommon Protocols:\n- Iterator: __iter__ and __next__\n- Context Manager: __enter__ and __exit__\n- Container: __len__, __getitem__, __contains__\n- Numeric: __add__, __mul__, __abs__, etc.\n\nAstronomical example:\nAny object with ra, dec, and transform_to() can be used\nas a coordinate, regardless of its actual class. This is\nwhy Astropy coordinates are so flexible - they follow\nprotocols rather than rigid inheritance.\n\nThis protocol approach is key to Python's flexibility and\nwhy your custom classes can seamlessly integrate with\nbuilt-in functions and scientific libraries.","position":{"start":{"line":954,"column":1},"end":{"line":978,"column":1}},"key":"tTY4GeluPu"},{"type":"heading","depth":2,"position":{"start":{"line":980,"column":1},"end":{"line":980,"column":1}},"children":[{"type":"text","value":"6.5 Context Managers","position":{"start":{"line":980,"column":1},"end":{"line":980,"column":1}},"key":"ax2fO7MNvq"}],"identifier":"id-6-5-context-managers","label":"6.5 Context Managers","html_id":"id-6-5-context-managers","implicit":true,"key":"xjWHCvTkg8"},{"type":"paragraph","position":{"start":{"line":982,"column":1},"end":{"line":982,"column":1}},"children":[{"type":"text","value":"Context managers are objects that define setup and cleanup actions for ","position":{"start":{"line":982,"column":1},"end":{"line":982,"column":1}},"key":"Y6qhDPir0e"},{"type":"inlineCode","value":"with","position":{"start":{"line":982,"column":1},"end":{"line":982,"column":1}},"key":"riWs6Bp7Oo"},{"type":"text","value":" statements. They’re crucial for resource management in scientific computing:","position":{"start":{"line":982,"column":1},"end":{"line":982,"column":1}},"key":"IsRswpZXua"}],"key":"nodW4mLeNK"}],"key":"P13NG6bHIM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 1: Basic context manager structure\nclass TelescopeConnection:\n    \"\"\"Manages telescope connection lifecycle.\"\"\"\n    \n    def __init__(self, telescope_id):\n        self.telescope_id = telescope_id\n        self.connected = False\n    \n    def __enter__(self):\n        \"\"\"Called when entering 'with' block.\"\"\"\n        print(f\"Connecting to {self.telescope_id}...\")\n        self.connected = True\n        return self  # Return self for use with 'as'\n    \n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"Called when leaving 'with' block.\"\"\"\n        print(f\"Disconnecting from {self.telescope_id}\")\n        self.connected = False\n        return False  # Don't suppress exceptions\n\n# Usage ensures cleanup even if errors occur\nwith TelescopeConnection(\"Keck-1\") as telescope:\n    print(f\"Connected: {telescope.connected}\")\n    # Connection automatically closed after this block","key":"NW4BXiABiz"},{"type":"output","id":"ebUMTpBI8u8pola3OKp2q","data":[],"key":"bHwOmOqlFH"}],"key":"P0yJzpcYrr"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1011,"column":1},"end":{"line":1011,"column":1}},"children":[{"type":"text","value":"Now let’s build a more complete example for data files:","position":{"start":{"line":1011,"column":1},"end":{"line":1011,"column":1}},"key":"uAF183xVQj"}],"key":"LD7dHaj71B"}],"key":"MAoKvvOn9z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 2: Complete context manager with error handling\nclass FITSReader:\n    \"\"\"Context manager for reading FITS files.\"\"\"\n    \n    def __init__(self, filename):\n        self.filename = filename\n        self.file = None\n        self.header = {}\n        self.data = None\n    \n    def __enter__(self):\n        \"\"\"Open and read FITS file.\"\"\"\n        print(f\"Opening {self.filename}\")\n        # Simulate file operations\n        self.file = f\"Handle for {self.filename}\"\n        self.header = {'TELESCOP': 'HST', 'EXPTIME': 1200}\n        self.data = [1, 2, 3, 4]  # Simplified\n        return self\n    \n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"Clean up resources.\"\"\"\n        if self.file:\n            print(f\"Closing {self.filename}\")\n            self.file = None\n        \n        # Handle specific exceptions\n        if exc_type is ValueError:\n            print(f\"Data error in {self.filename}: {exc_value}\")\n            return True  # Suppress this exception\n        \n        return False  # Let other exceptions propagate","key":"x6jUUvJIvT"},{"type":"output","id":"kd9uTbRNOAM4kb004-a_-","data":[],"key":"seAzcamVWq"}],"key":"eUJDMQdD8Q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Step 3: Using the context manager\nwith FITSReader(\"observation.fits\") as fits:\n    print(f\"Telescope: {fits.header['TELESCOP']}\")\n    print(f\"Exposure: {fits.header['EXPTIME']}s\")\n    # File automatically closed even if an error occurs\n\nprint(\"File has been closed automatically\")","key":"r8E2vkjUUf"},{"type":"output","id":"Jt9Fq6XaCw6nkatasSFde","data":[],"key":"DUYRSsds8D"}],"key":"rgBQztghh0"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1057,"column":1},"end":{"line":1057,"column":1}},"children":[{"type":"text","value":"Context managers ensure resources are properly released even when errors occur - essential for telescope connections, file handles, and database connections.","position":{"start":{"line":1057,"column":1},"end":{"line":1057,"column":1}},"key":"J2xuEIBEIB"}],"key":"KLkMmLDG2n"},{"type":"heading","depth":2,"position":{"start":{"line":1059,"column":1},"end":{"line":1059,"column":1}},"children":[{"type":"text","value":"6.6 Debugging and Testing Classes","position":{"start":{"line":1059,"column":1},"end":{"line":1059,"column":1}},"key":"TYL98XLmMp"}],"identifier":"id-6-6-debugging-and-testing-classes","label":"6.6 Debugging and Testing Classes","html_id":"id-6-6-debugging-and-testing-classes","implicit":true,"key":"fXkHW96PAc"},{"type":"paragraph","position":{"start":{"line":1061,"column":1},"end":{"line":1061,"column":1}},"children":[{"type":"text","value":"Understanding how to debug and test objects is crucial for reliable scientific software.","position":{"start":{"line":1061,"column":1},"end":{"line":1061,"column":1}},"key":"WDAgD3XNmS"}],"key":"PuwUhEHzfS"},{"type":"heading","depth":3,"position":{"start":{"line":1063,"column":1},"end":{"line":1063,"column":1}},"children":[{"type":"text","value":"Introspection Tools","position":{"start":{"line":1063,"column":1},"end":{"line":1063,"column":1}},"key":"K3UicY5SE7"}],"identifier":"introspection-tools","label":"Introspection Tools","html_id":"introspection-tools","implicit":true,"key":"K6fF7UXzAv"},{"type":"paragraph","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"children":[{"type":"text","value":"Python provides powerful tools for examining objects:","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"key":"jYVWcoLvDG"}],"key":"s0PM8I6ulR"}],"key":"vQ75ZEqnsz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Instrument:\n    \"\"\"Example instrument for debugging demonstration.\"\"\"\n    \n    class_var = \"shared\"\n    \n    def __init__(self, name, wavelength):\n        self.name = name\n        self.wavelength = wavelength\n        self._calibrated = False\n    \n    def calibrate(self):\n        self._calibrated = True\n\n# Create an instrument\nspectrograph = Instrument(\"HIRES\", 500)\n\n# Introspection functions\nprint(f\"Type: {type(spectrograph)}\")\nprint(f\"ID: {id(spectrograph)}\")\nprint(f\"Has 'calibrate': {hasattr(spectrograph, 'calibrate')}\")\n\n# List all attributes\nattrs = [a for a in dir(spectrograph) if not a.startswith('__')]\nprint(f\"Attributes: {attrs}\")\n\n# Get instance dictionary\nprint(f\"Instance dict: {vars(spectrograph)}\")","key":"xHMBFsfJb4"},{"type":"output","id":"B4dAt-FUVl1jU_0Zjh4QP","data":[],"key":"LCnRSor7Ej"}],"key":"DxxEjWpJpV"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1097,"column":1},"end":{"line":1097,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":1097,"column":1},"end":{"line":1097,"column":1}},"key":"mAhSAp5G84"},{"type":"strong","position":{"start":{"line":1097,"column":1},"end":{"line":1097,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Mutable Default Arguments in Classes","position":{"start":{"line":1097,"column":1},"end":{"line":1097,"column":1}},"key":"gqdzk7xjsc"}],"key":"bWkj95GGRA"}],"identifier":"id-common-bug-alert-mutable-default-arguments-in-classes","label":"⚠️ Common Bug Alert: Mutable Default Arguments in Classes","html_id":"id-common-bug-alert-mutable-default-arguments-in-classes","implicit":true,"key":"RXw2xhfdQb"}],"key":"VPb5VeTctM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# DANGEROUS - Mutable default argument\nclass BadObservatory:\n    def __init__(self, name, telescopes=[]):  # BAD!\n        self.name = name\n        self.telescopes = telescopes  # All instances share same list!\n\n# CORRECT - Use None and create new list\nclass GoodObservatory:\n    def __init__(self, name, telescopes=None):\n        self.name = name\n        self.telescopes = telescopes if telescopes is not None else []\n\n# The bug in action:\nobs1 = BadObservatory(\"Mauna Kea\")\nobs1.telescopes.append(\"Keck I\")\nobs2 = BadObservatory(\"La Silla\")\nprint(f\"La Silla telescopes: {obs2.telescopes}\")  # Has Keck I!","key":"m372E64PwK"},{"type":"output","id":"K_M6DXhjHnkDQimUkI7yQ","data":[],"key":"JriXQqLvPL"}],"key":"CwJpEwxcFE"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1119,"column":1},"end":{"line":1119,"column":1}},"children":[{"type":"text","value":"Testing Classes with unittest","position":{"start":{"line":1119,"column":1},"end":{"line":1119,"column":1}},"key":"y0x6bBOAwz"}],"identifier":"testing-classes-with-unittest","label":"Testing Classes with unittest","html_id":"testing-classes-with-unittest","implicit":true,"key":"yFksZyVC9R"}],"key":"zxSgGKEfMw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import unittest\n\nclass TestVector3D(unittest.TestCase):\n    \"\"\"Test cases for Vector3D class.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Create test vectors before each test.\"\"\"\n        self.v1 = Vector3D(3, 4, 0)\n        self.v2 = Vector3D(1, 0, 0)\n    \n    def test_magnitude(self):\n        \"\"\"Test magnitude calculation.\"\"\"\n        self.assertEqual(abs(self.v1), 5.0)\n        self.assertEqual(abs(self.v2), 1.0)\n    \n    def test_addition(self):\n        \"\"\"Test vector addition.\"\"\"\n        v3 = self.v1 + self.v2\n        self.assertEqual(v3.x, 4)\n        self.assertEqual(v3.y, 4)\n        self.assertEqual(v3.z, 0)\n    \n    def test_equality(self):\n        \"\"\"Test equality comparison.\"\"\"\n        v_copy = Vector3D(3, 4, 0)\n        self.assertEqual(self.v1, v_copy)\n        self.assertNotEqual(self.v1, self.v2)\n\n# Run tests (in Jupyter, use this approach)\nsuite = unittest.TestLoader().loadTestsFromTestCase(TestVector3D)\nrunner = unittest.TextTestRunner(verbosity=2)\nrunner.run(suite)","key":"WUJqliq4Bk"},{"type":"output","id":"D-80Ai64J50phSHYp-DQb","data":[],"key":"okRFMQ3QO8"}],"key":"qGzlzhLT4e"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"text","value":"6.7 When to Use OOP","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"key":"NE8YJy1m9A"}],"identifier":"id-6-7-when-to-use-oop","label":"6.7 When to Use OOP","html_id":"id-6-7-when-to-use-oop","implicit":true,"key":"bz0BDDCCC7"},{"type":"paragraph","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"children":[{"type":"text","value":"OOP isn’t always the answer. Here’s how to decide:","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"key":"IqTAVs2ylR"}],"key":"j7qZ05fNGl"},{"type":"mermaid","value":"flowchart TD\n    A[Design Decision] --> B{Maintains state<br/>over time?}\n    B -->|Yes| C{Multiple operations<br/>on same data?}\n    B -->|No| D[Use Functions]\n    C -->|Yes| E[Use Classes]\n    C -->|No| F[Consider Functions]\n    \n    E --> G[Examples:<br/>Telescope<br/>Observation<br/>Pipeline]\n    D --> H[Examples:<br/>unit_conversion<br/>calculate_airmass]\n    \n    style E fill:#9f9\n    style D fill:#9ff","key":"DWaF2ExjZt"},{"type":"heading","depth":3,"position":{"start":{"line":1175,"column":1},"end":{"line":1175,"column":1}},"children":[{"type":"text","value":"When OOP Shines","position":{"start":{"line":1175,"column":1},"end":{"line":1175,"column":1}},"key":"LKnZ9gb7mi"}],"identifier":"when-oop-shines","label":"When OOP Shines","html_id":"when-oop-shines","implicit":true,"key":"E8FuhDzVRO"},{"type":"paragraph","position":{"start":{"line":1177,"column":1},"end":{"line":1177,"column":1}},"children":[{"type":"text","value":"Use classes for:","position":{"start":{"line":1177,"column":1},"end":{"line":1177,"column":1}},"key":"IDHRWAAhZv"}],"key":"wUt8BbbyX6"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":1179,"column":1},"end":{"line":1179,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1179,"column":1},"end":{"line":1179,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1179,"column":1},"end":{"line":1179,"column":1}},"children":[{"type":"text","value":"Objects with state that evolves:","position":{"start":{"line":1179,"column":1},"end":{"line":1179,"column":1}},"key":"zCIafrgjDu"}],"key":"ETokj2Jlgw"}],"key":"HFHaoVhFwG"}],"key":"eURO8b4oIm"}],"key":"oHc3bnIFOF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Observation:\n    \"\"\"Tracks observation state over time.\"\"\"\n    \n    def __init__(self, target):\n        self.target = target\n        self.start_time = None\n        self.photons = []\n        self.total_exposure = 0\n    \n    def start_exposure(self, time):\n        self.start_time = time\n    \n    def add_photons(self, count):\n        self.photons.append(count)\n        self.total_exposure += 1","key":"npbaMaHzDi"},{"type":"output","id":"5dqAZ_xhL5C9knxBMFeE0","data":[],"key":"bpBKbQ34qo"}],"key":"lRrzGspGzl"},{"type":"block","children":[{"type":"list","ordered":true,"start":2,"spread":false,"position":{"start":{"line":1198,"column":1},"end":{"line":1198,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1198,"column":1},"end":{"line":1198,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1198,"column":1},"end":{"line":1198,"column":1}},"children":[{"type":"text","value":"Complex data with associated operations:","position":{"start":{"line":1198,"column":1},"end":{"line":1198,"column":1}},"key":"XOoLymohf7"}],"key":"brqIV9klBa"}],"key":"wPbtdRO3Xg"}],"key":"YRiUGv4hTL"}],"key":"TLoWjUameU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class Spectrum:\n    \"\"\"Spectrum with analysis methods.\"\"\"\n    \n    def __init__(self, wavelength, flux):\n        self.wavelength = wavelength\n        self.flux = flux\n    \n    def find_lines(self, threshold):\n        \"\"\"Find emission lines.\"\"\"\n        # Complex analysis\n        pass\n    \n    def normalize(self):\n        \"\"\"Normalize flux.\"\"\"\n        # Modifies internal state\n        pass","key":"dBlkXGV5dg"},{"type":"output","id":"J-K2fW1dyt4Yncav-Hab3","data":[],"key":"IXcIRWJKId"}],"key":"fAXt5AYcyg"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1218,"column":1},"end":{"line":1218,"column":1}},"children":[{"type":"text","value":"When to Avoid OOP","position":{"start":{"line":1218,"column":1},"end":{"line":1218,"column":1}},"key":"ITseYBm2ms"}],"identifier":"when-to-avoid-oop","label":"When to Avoid OOP","html_id":"when-to-avoid-oop","implicit":true,"key":"AkNKvUXFj7"},{"type":"paragraph","position":{"start":{"line":1220,"column":1},"end":{"line":1220,"column":1}},"children":[{"type":"text","value":"Don’t use classes for:","position":{"start":{"line":1220,"column":1},"end":{"line":1220,"column":1}},"key":"ljiJIRlqBR"}],"key":"Q5VEf3zI3n"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":1222,"column":1},"end":{"line":1222,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1222,"column":1},"end":{"line":1222,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1222,"column":1},"end":{"line":1222,"column":1}},"children":[{"type":"text","value":"Simple calculations:","position":{"start":{"line":1222,"column":1},"end":{"line":1222,"column":1}},"key":"q4VBD2wWmq"}],"key":"IpCHoEMlGQ"}],"key":"s1AVB7dcS5"}],"key":"O4TvZLhvUW"}],"key":"KprnNFglpB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Unnecessary OOP\nclass Converter:\n    def parsec_to_lightyear(self, parsec):\n        return parsec * 3.26156\n\n# Better as a simple function\ndef parsec_to_lightyear(parsec):\n    return parsec * 3.26156","key":"flkIEOaLUW"},{"type":"output","id":"L-MmUmaE71xxGzskJKRbZ","data":[],"key":"Id1c0zFe8E"}],"key":"nNaHMTRnmw"},{"type":"block","children":[{"type":"list","ordered":true,"start":2,"spread":false,"position":{"start":{"line":1234,"column":1},"end":{"line":1234,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1234,"column":1},"end":{"line":1234,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1234,"column":1},"end":{"line":1234,"column":1}},"children":[{"type":"text","value":"Collections of unrelated utilities:","position":{"start":{"line":1234,"column":1},"end":{"line":1234,"column":1}},"key":"rVOLBRVTA9"}],"key":"AgP3AbCcY0"}],"key":"mbiuBBfh6j"}],"key":"xRgvzjvzZw"}],"key":"o6Bxd7d58q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Better as a module with functions, not a class\n# In astro_utils.py:\ndef airmass(zenith_angle):\n    \"\"\"Calculate airmass.\"\"\"\n    import math\n    return 1 / math.cos(math.radians(zenith_angle))\n\ndef julian_date(year, month, day):\n    \"\"\"Convert to Julian date.\"\"\"\n    # Calculation here\n    pass","key":"zxWNJ0Y02n"},{"type":"output","id":"Monp2g8aT40bKkRtP3Xho","data":[],"key":"ibpbkpbO2g"}],"key":"Vba0fJnOfD"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1249,"column":1},"end":{"line":1249,"column":1}},"children":[{"type":"text","value":"🛠️ ","position":{"start":{"line":1249,"column":1},"end":{"line":1249,"column":1}},"key":"jLnlOOVFKR"},{"type":"strong","position":{"start":{"line":1249,"column":1},"end":{"line":1249,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":1249,"column":1},"end":{"line":1249,"column":1}},"key":"Myozkj7quq"}],"key":"BI5kqnrrDL"}],"identifier":"id-debug-this","label":"🛠️ Debug This!","html_id":"id-debug-this","implicit":true,"key":"MqyMghvnyM"},{"type":"paragraph","position":{"start":{"line":1251,"column":1},"end":{"line":1251,"column":1}},"children":[{"type":"text","value":"This class has a subtle bug. Can you find it?","position":{"start":{"line":1251,"column":1},"end":{"line":1251,"column":1}},"key":"QHXwrmEcy3"}],"key":"ZjdtTOGA6E"}],"key":"sDEcjgYD0j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class PhotonCounter:\n    def __init__(self, dark_current=0.1, bins=[]):\n        self.dark_current = dark_current\n        self.bins = bins\n    \n    def add_count(self, bin_number, count):\n        while len(self.bins) <= bin_number:\n            self.bins.append(0)\n        self.bins[bin_number] += count\n\n# Test code\ncounter1 = PhotonCounter()\ncounter1.add_count(0, 100)\ncounter2 = PhotonCounter()\ncounter2.add_count(0, 200)\nprint(f\"Counter1 bins: {counter1.bins}\")\nprint(f\"Counter2 bins: {counter2.bins}\")","key":"BaAKHy4ZKT"},{"type":"output","id":"cOH9Adj9U1If7dl0dhbJ5","data":[],"key":"s30JSskKOg"}],"key":"zmBEBwDwXY"},{"type":"block","children":[{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Bug and Solution","key":"zHBB5rTgQI"}],"key":"dL6cosJW67"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bug","key":"URyRQkResV"}],"key":"V6YDjZ04yp"},{"type":"text","value":": Mutable default argument! Both counters share the same bins list.","key":"T86J93DNa8"}],"key":"KfHZNtCe9R"},{"type":"paragraph","children":[{"type":"text","value":"Output will be:","key":"m02yar7514"}],"key":"epgVe44ukc"},{"type":"code","lang":null,"meta":null,"value":"Counter1 bins: [300]\nCounter2 bins: [300]","key":"InjYZMzshu"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution","key":"g4MrWTeqV2"}],"key":"tkYJriIVuX"},{"type":"text","value":": Use None as default and create new list in ","key":"AgTFxri2lU"},{"type":"strong","children":[{"type":"text","value":"init","key":"OetRFsmRPL"}],"key":"iux0b5kPYN"},{"type":"text","value":":","key":"eHzJyhrvJG"}],"key":"FWzdM5aw28"},{"type":"code","lang":"python","meta":null,"value":"def __init__(self, dark_current=0.1, bins=None):\n    self.dark_current = dark_current\n    self.bins = bins if bins is not None else []","key":"mr3RgvKwph"},{"type":"paragraph","children":[{"type":"text","value":"This bug is especially dangerous in scientific code where data integrity is crucial!","key":"glCF1k6zUF"}],"key":"eMOBnFUAyo"}],"key":"LPBObZ3P72"},{"type":"heading","depth":2,"position":{"start":{"line":1295,"column":1},"end":{"line":1295,"column":1}},"children":[{"type":"text","value":"6.8 Performance Considerations","position":{"start":{"line":1295,"column":1},"end":{"line":1295,"column":1}},"key":"Z1zNAnLDm1"}],"identifier":"id-6-8-performance-considerations","label":"6.8 Performance Considerations","html_id":"id-6-8-performance-considerations","implicit":true,"key":"e8rHndcZK4"},{"type":"paragraph","position":{"start":{"line":1297,"column":1},"end":{"line":1297,"column":1}},"children":[{"type":"text","value":"Understanding object performance helps you make informed design decisions.","position":{"start":{"line":1297,"column":1},"end":{"line":1297,"column":1}},"key":"N3iFGGyfLm"}],"key":"k9kkM6X4Rc"},{"type":"heading","depth":3,"position":{"start":{"line":1299,"column":1},"end":{"line":1299,"column":1}},"children":[{"type":"text","value":"Memory and Speed Tradeoffs","position":{"start":{"line":1299,"column":1},"end":{"line":1299,"column":1}},"key":"cvUIzdX5Ff"}],"identifier":"memory-and-speed-tradeoffs","label":"Memory and Speed Tradeoffs","html_id":"memory-and-speed-tradeoffs","implicit":true,"key":"v73FGKMNE8"}],"key":"akcbkzpeHH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import sys\nimport time\n\n# Compare different approaches\nclass StarObject:\n    def __init__(self, name, mag):\n        self.name = name\n        self.mag = mag\n\n# Object approach\nstar_obj = StarObject(\"Vega\", 0.03)\nprint(f\"Object size: {sys.getsizeof(star_obj) + sys.getsizeof(star_obj.__dict__)} bytes\")\n\n# Dictionary approach\nstar_dict = {\"name\": \"Vega\", \"mag\": 0.03}\nprint(f\"Dict size: {sys.getsizeof(star_dict)} bytes\")\n\n# Tuple approach (most memory efficient)\nstar_tuple = (\"Vega\", 0.03)\nprint(f\"Tuple size: {sys.getsizeof(star_tuple)} bytes\")\n\n# For many objects, consider NumPy\nimport numpy as np\nstar_array = np.array([(\"Vega\", 0.03)], dtype=[('name', 'U10'), ('mag', 'f4')])\nprint(f\"NumPy size per star: {star_array.nbytes} bytes\")","key":"tzEhno0U1h"},{"type":"output","id":"xPaX1oGB3GEeiC6dYKyzt","data":[],"key":"kNKwg5EP2j"}],"key":"CaP1FruHJp"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"key":"NGzqtCyLv0"},{"type":"strong","position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"children":[{"type":"text","value":"slots","position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"key":"xMMPhCMsIz"}],"key":"sVeoBLpBhj"},{"type":"text","value":" for Memory Efficiency","position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"key":"CyfA4ElckX"}],"identifier":"using-slots-for-memory-efficiency","label":"Using slots for Memory Efficiency","html_id":"using-slots-for-memory-efficiency","implicit":true,"key":"QdJ31GZF3C"},{"type":"paragraph","position":{"start":{"line":1331,"column":1},"end":{"line":1331,"column":1}},"children":[{"type":"text","value":"For classes with many instances (like particles in a simulation), ","position":{"start":{"line":1331,"column":1},"end":{"line":1331,"column":1}},"key":"d708k7BDoE"},{"type":"inlineCode","value":"__slots__","position":{"start":{"line":1331,"column":1},"end":{"line":1331,"column":1}},"key":"QTfOZP9Vzq"},{"type":"text","value":" can save significant memory:","position":{"start":{"line":1331,"column":1},"end":{"line":1331,"column":1}},"key":"VE9jgzR8qO"}],"key":"TycD9iMAOm"}],"key":"WRCdPeuRA1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"class RegularParticle:\n    \"\"\"Normal class - flexible but uses more memory.\"\"\"\n    def __init__(self, x, y, z, vx, vy, vz):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.vx = vx\n        self.vy = vy\n        self.vz = vz\n\nclass SlottedParticle:\n    \"\"\"Slotted class - fixed attributes, less memory.\"\"\"\n    __slots__ = ['x', 'y', 'z', 'vx', 'vy', 'vz']\n    \n    def __init__(self, x, y, z, vx, vy, vz):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.vx = vx\n        self.vy = vy\n        self.vz = vz\n\n# Memory comparison\nregular = RegularParticle(1, 2, 3, 0.1, 0.2, 0.3)\nslotted = SlottedParticle(1, 2, 3, 0.1, 0.2, 0.3)\n\nprint(f\"Regular: {sys.getsizeof(regular) + sys.getsizeof(regular.__dict__)} bytes\")\nprint(f\"Slotted: {sys.getsizeof(slotted)} bytes\")","key":"UvTR0YG4Go"},{"type":"output","id":"v-cb3px4I8gYx15u0wkUp","data":[],"key":"PAFnK5ZFsw"}],"key":"QFXk5AM5Qr"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"children":[{"type":"text","value":"When to use ","position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"key":"LXZKf6FFp6"},{"type":"inlineCode","value":"__slots__","position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"key":"EgVIRMnaJG"},{"type":"text","value":":","position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"key":"N78C6V2n8j"}],"key":"gzuIoAWr2M"}],"key":"zWp1oeQj5L"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1365,"column":1},"end":{"line":1368,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1365,"column":1},"end":{"line":1365,"column":1}},"children":[{"type":"text","value":"Thousands+ of instances (particle simulations, pixel data)","position":{"start":{"line":1365,"column":1},"end":{"line":1365,"column":1}},"key":"HZ37aAQ7hc"}],"key":"aNYyhvUZCN"},{"type":"listItem","spread":true,"position":{"start":{"line":1366,"column":1},"end":{"line":1366,"column":1}},"children":[{"type":"text","value":"Fixed, known attributes","position":{"start":{"line":1366,"column":1},"end":{"line":1366,"column":1}},"key":"fDyGnr5iGK"}],"key":"mVNkLufqjY"},{"type":"listItem","spread":true,"position":{"start":{"line":1367,"column":1},"end":{"line":1368,"column":1}},"children":[{"type":"text","value":"Memory is a constraint","position":{"start":{"line":1367,"column":1},"end":{"line":1367,"column":1}},"key":"edC1sNvUSy"}],"key":"QmbukcLpYx"}],"key":"kr24TbdmOx"},{"type":"paragraph","position":{"start":{"line":1369,"column":1},"end":{"line":1369,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1369,"column":1},"end":{"line":1369,"column":1}},"children":[{"type":"text","value":"When to avoid ","position":{"start":{"line":1369,"column":1},"end":{"line":1369,"column":1}},"key":"J0hoIwu6vk"},{"type":"inlineCode","value":"__slots__","position":{"start":{"line":1369,"column":1},"end":{"line":1369,"column":1}},"key":"QP413P4O7y"},{"type":"text","value":":","position":{"start":{"line":1369,"column":1},"end":{"line":1369,"column":1}},"key":"wve5PAr4U1"}],"key":"l3LvX20WtU"}],"key":"bqfp0EhW1B"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1370,"column":1},"end":{"line":1373,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1370,"column":1},"end":{"line":1370,"column":1}},"children":[{"type":"text","value":"Need dynamic attributes","position":{"start":{"line":1370,"column":1},"end":{"line":1370,"column":1}},"key":"ozctCqpMsD"}],"key":"sYsui7CEGm"},{"type":"listItem","spread":true,"position":{"start":{"line":1371,"column":1},"end":{"line":1371,"column":1}},"children":[{"type":"text","value":"Using multiple inheritance","position":{"start":{"line":1371,"column":1},"end":{"line":1371,"column":1}},"key":"fX9f6RdDsU"}],"key":"y80LWDlbRD"},{"type":"listItem","spread":true,"position":{"start":{"line":1372,"column":1},"end":{"line":1373,"column":1}},"children":[{"type":"text","value":"Prototyping/design not final","position":{"start":{"line":1372,"column":1},"end":{"line":1372,"column":1}},"key":"LcvIaC8RIb"}],"key":"sJK3y7GYFA"}],"key":"Y4Zh90wDbB"},{"type":"heading","depth":2,"position":{"start":{"line":1374,"column":1},"end":{"line":1374,"column":1}},"children":[{"type":"text","value":"6.9 Practice Exercises","position":{"start":{"line":1374,"column":1},"end":{"line":1374,"column":1}},"key":"Z8GVfc41Pq"}],"identifier":"id-6-9-practice-exercises","label":"6.9 Practice Exercises","html_id":"id-6-9-practice-exercises","implicit":true,"key":"TBwiEx1f2D"},{"type":"heading","depth":3,"position":{"start":{"line":1376,"column":1},"end":{"line":1376,"column":1}},"children":[{"type":"text","value":"Quick Practice: Create a VariableStar Class","position":{"start":{"line":1376,"column":1},"end":{"line":1376,"column":1}},"key":"fBc3eaHmhE"}],"identifier":"quick-practice-create-a-variablestar-class","label":"Quick Practice: Create a VariableStar Class","html_id":"quick-practice-create-a-variablestar-class","implicit":true,"key":"Zok5D7n65z"},{"type":"paragraph","position":{"start":{"line":1378,"column":1},"end":{"line":1378,"column":1}},"children":[{"type":"text","value":"Let’s start with a fundamental building block for photometry analysis. This simple class will become the foundation for more complex astronomical software:","position":{"start":{"line":1378,"column":1},"end":{"line":1378,"column":1}},"key":"LVjJfApO7E"}],"key":"MToUEqtSr8"}],"key":"GbjSmHRRE8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nQuick Practice: Variable Star Class (5-10 lines)\n\nCreate a VariableStar class that:\n1. Stores name, period (days), min_mag, and max_mag\n2. Has a method to calculate amplitude\n3. Implements __str__ for readable output\n\nThis is how professional packages like lightkurve start - \nwith simple, well-designed base classes!\n\"\"\"\n\nclass VariableStar:\n    \"\"\"A variable star with photometric properties.\"\"\"\n    \n    def __init__(self, name, period, min_mag, max_mag):\n        self.name = name\n        self.period = period\n        self.min_mag = min_mag\n        self.max_mag = max_mag\n    \n    def amplitude(self):\n        \"\"\"Calculate peak-to-peak amplitude.\"\"\"\n        return self.max_mag - self.min_mag\n    \n    def __str__(self):\n        return f\"{self.name}: P={self.period:.2f}d, Amp={self.amplitude():.2f}mag\"\n\n# Test with real Cepheid data\ndelta_cep = VariableStar(\"Delta Cephei\", 5.366, 3.48, 4.37)\nprint(delta_cep)\nprint(f\"Amplitude: {delta_cep.amplitude():.2f} magnitudes\")\n\n# You've just created the same kind of object used in\n# professional variable star databases like AAVSO!","key":"AvFHxOaxdF"},{"type":"output","id":"Q7JVG2-13IbvX68S8nIu_","data":[],"key":"do5j8alo69"}],"key":"L7zp24KHar"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1418,"column":1},"end":{"line":1418,"column":1}},"children":[{"type":"text","value":"Synthesis Exercise: Variable Star Type Hierarchy","position":{"start":{"line":1418,"column":1},"end":{"line":1418,"column":1}},"key":"QF1vMOoKYa"}],"identifier":"synthesis-exercise-variable-star-type-hierarchy","label":"Synthesis Exercise: Variable Star Type Hierarchy","html_id":"synthesis-exercise-variable-star-type-hierarchy","implicit":true,"key":"LoRiUvKrHp"},{"type":"paragraph","position":{"start":{"line":1420,"column":1},"end":{"line":1420,"column":1}},"children":[{"type":"text","value":"Now let’s build a realistic inheritance hierarchy that models different types of variable stars. This demonstrates how professional astronomy software organizes related but distinct objects:","position":{"start":{"line":1420,"column":1},"end":{"line":1420,"column":1}},"key":"gzLsuyx6lb"}],"key":"wliGGRczKC"}],"key":"GSPdBh46z6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nSynthesis: Variable Star Type Hierarchy\n\nBuild an inheritance tree modeling real astrophysics:\n- Each type has its own physics for absolute magnitude\n- Uses super() to maintain parent functionality\n- Demonstrates polymorphism in action\n\nThis mirrors how packages like PyAstronomy organize stellar types!\n\"\"\"\n\nimport math\n\nclass VariableStar:\n    \"\"\"Base class for all variable stars.\"\"\"\n    \n    def __init__(self, name, period, apparent_mag, distance_pc):\n        self.name = name\n        self.period = period  # days\n        self.apparent_mag = apparent_mag\n        self.distance_pc = distance_pc\n    \n    def calculate_absolute_magnitude(self):\n        \"\"\"Default distance modulus calculation.\"\"\"\n        return self.apparent_mag - 5 * math.log10(self.distance_pc) + 5\n    \n    def __str__(self):\n        return f\"{self.__class__.__name__} {self.name}\"\n\nclass Cepheid(VariableStar):\n    \"\"\"Classical Cepheid with period-luminosity relation.\"\"\"\n    \n    def __init__(self, name, period, apparent_mag, distance_pc, pulsation_mode='fundamental'):\n        super().__init__(name, period, apparent_mag, distance_pc)\n        self.pulsation_mode = pulsation_mode\n    \n    def calculate_absolute_magnitude(self):\n        \"\"\"Use Leavitt's period-luminosity relation.\"\"\"\n        # Classical relation: M_V = -2.81 * log(P) - 1.43\n        if self.period > 0:\n            return -2.81 * math.log10(self.period) - 1.43\n        return super().calculate_absolute_magnitude()\n    \n    def distance_from_pl_relation(self):\n        \"\"\"Calculate distance using period-luminosity relation.\"\"\"\n        abs_mag = self.calculate_absolute_magnitude()\n        distance = 10 ** ((self.apparent_mag - abs_mag + 5) / 5)\n        return distance\n\nclass RRLyrae(VariableStar):\n    \"\"\"RR Lyrae star with metallicity dependence.\"\"\"\n    \n    def __init__(self, name, period, apparent_mag, distance_pc, metallicity=-1.5):\n        super().__init__(name, period, apparent_mag, distance_pc)\n        self.metallicity = metallicity  # [Fe/H]\n    \n    def calculate_absolute_magnitude(self):\n        \"\"\"RR Lyrae have nearly constant absolute magnitude.\"\"\"\n        # M_V ≈ 0.23 * [Fe/H] + 0.93 (simplified relation)\n        return 0.23 * self.metallicity + 0.93\n    \n    def is_oosterhoff_type_i(self):\n        \"\"\"Classify based on period.\"\"\"\n        return 0.4 < self.period < 0.7\n\nclass EclipsingBinary(VariableStar):\n    \"\"\"Eclipsing binary star system.\"\"\"\n    \n    def __init__(self, name, period, apparent_mag, distance_pc, \n                 mass_ratio=1.0, inclination=90):\n        super().__init__(name, period, apparent_mag, distance_pc)\n        self.mass_ratio = mass_ratio  # M2/M1\n        self.inclination = inclination  # degrees\n    \n    def calculate_absolute_magnitude(self):\n        \"\"\"Combined magnitude of both stars.\"\"\"\n        # For equal stars, combined magnitude is 0.75 mag brighter\n        if self.mass_ratio > 0.8:\n            base_mag = super().calculate_absolute_magnitude()\n            return base_mag - 0.75\n        return super().calculate_absolute_magnitude()\n    \n    def is_contact_binary(self):\n        \"\"\"Check if likely W UMa type.\"\"\"\n        return self.period < 1.0 and self.mass_ratio > 0.5\n\n# Test the hierarchy with real variable stars\nstars = [\n    Cepheid(\"Polaris\", 3.97, 1.98, 132.5),\n    RRLyrae(\"RR Lyrae\", 0.567, 7.1, 262, metallicity=-1.2),\n    EclipsingBinary(\"Algol\", 2.867, 2.12, 27.5, mass_ratio=0.68)\n]\n\nprint(\"Variable Star Catalog:\")\nfor star in stars:\n    abs_mag = star.calculate_absolute_magnitude()\n    print(f\"  {star}: M_V = {abs_mag:.2f}\")\n    \n    # Polymorphism - each type calculates differently!\n    if isinstance(star, Cepheid):\n        dist = star.distance_from_pl_relation()\n        print(f\"    P-L distance: {dist:.1f} pc\")\n    elif isinstance(star, RRLyrae):\n        print(f\"    Oosterhoff I: {star.is_oosterhoff_type_i()}\")\n    elif isinstance(star, EclipsingBinary):\n        print(f\"    Contact binary: {star.is_contact_binary()}\")\n\n# This is exactly how professional catalogs like Gaia's\n# variable star database organize their data!","key":"e3LzBMrrrs"},{"type":"output","id":"w4GTo1cUoaP-trHTUi-3J","data":[],"key":"islaTaJeLE"}],"key":"u41wtoDMNb"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"children":[{"type":"text","value":"Challenge Exercise: Complete Photometry Pipeline","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"key":"LUGmiAG5X5"}],"identifier":"challenge-exercise-complete-photometry-pipeline","label":"Challenge Exercise: Complete Photometry Pipeline","html_id":"challenge-exercise-complete-photometry-pipeline","implicit":true,"key":"MlXYqsh4A4"},{"type":"paragraph","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"children":[{"type":"text","value":"This advanced exercise demonstrates professional-level OOP design, mimicking the structure of packages like ","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"WNhcCJlm2r"},{"type":"inlineCode","value":"lightkurve","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"yMm5AHWoMd"},{"type":"text","value":" or ","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"UyhO70HcLB"},{"type":"inlineCode","value":"astropy.timeseries","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"UGulPjGYfA"},{"type":"text","value":":","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"S7Q3xP3C6D"}],"key":"sQqa2fV0DV"}],"key":"VmkImxwiS2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nChallenge: Professional Photometry Pipeline\n\nDesign a complete OOP system for time-series photometry:\n- Uses composition (LightCurve HAS-A ObservationSet)\n- Implements special methods for Pythonic behavior  \n- Properties for computed values\n- Context managers for file I/O\n- Multiple analysis algorithms via strategy pattern\n\nThis is how NASA's Kepler/TESS pipelines are structured!\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Optional\nimport contextlib\n\nclass Observation:\n    \"\"\"Single photometric observation.\"\"\"\n    \n    def __init__(self, time: float, magnitude: float, error: float):\n        self.time = time  # Julian Date\n        self.magnitude = magnitude\n        self.error = error\n    \n    def __repr__(self):\n        return f\"Obs(t={self.time:.2f}, m={self.magnitude:.2f}±{self.error:.3f})\"\n\nclass ObservationSet:\n    \"\"\"Container for time-series observations.\"\"\"\n    \n    def __init__(self):\n        self._observations: List[Observation] = []\n    \n    def add(self, obs: Observation):\n        \"\"\"Add observation, maintaining time order.\"\"\"\n        import bisect\n        # Keep sorted by time for efficiency\n        times = [o.time for o in self._observations]\n        idx = bisect.bisect_left(times, obs.time)\n        self._observations.insert(idx, obs)\n    \n    def __len__(self):\n        \"\"\"Number of observations.\"\"\"\n        return len(self._observations)\n    \n    def __getitem__(self, idx):\n        \"\"\"Access observations by index.\"\"\"\n        return self._observations[idx]\n    \n    def __iter__(self):\n        \"\"\"Iterate over observations.\"\"\"\n        return iter(self._observations)\n    \n    @property\n    def times(self):\n        \"\"\"Array of observation times.\"\"\"\n        return np.array([obs.time for obs in self._observations])\n    \n    @property\n    def magnitudes(self):\n        \"\"\"Array of magnitudes.\"\"\"\n        return np.array([obs.magnitude for obs in self._observations])\n    \n    @property\n    def errors(self):\n        \"\"\"Array of measurement errors.\"\"\"\n        return np.array([obs.error for obs in self._observations])\n\nclass LightCurve:\n    \"\"\"Light curve with analysis methods.\"\"\"\n    \n    def __init__(self, obs_set: ObservationSet, star_name: str = \"Unknown\"):\n        self.observations = obs_set  # Composition: HAS-A ObservationSet\n        self.star_name = star_name\n        self._period = None  # Cached period\n    \n    @property\n    def mean_magnitude(self):\n        \"\"\"Weighted mean magnitude.\"\"\"\n        if len(self.observations) == 0:\n            return np.nan\n        weights = 1.0 / self.observations.errors**2\n        return np.average(self.observations.magnitudes, weights=weights)\n    \n    @property\n    def amplitude(self):\n        \"\"\"Peak-to-peak amplitude.\"\"\"\n        if len(self.observations) == 0:\n            return 0.0\n        return np.ptp(self.observations.magnitudes)\n    \n    def phase_fold(self, period: float):\n        \"\"\"Fold light curve at given period.\"\"\"\n        phases = (self.observations.times % period) / period\n        return phases, self.observations.magnitudes\n    \n    def find_period(self, method='lomb-scargle'):\n        \"\"\"Find best period using specified algorithm.\"\"\"\n        if method == 'lomb-scargle':\n            return self._lomb_scargle_period()\n        elif method == 'string-length':\n            return self._string_length_period()\n        else:\n            raise ValueError(f\"Unknown method: {method}\")\n    \n    def _lomb_scargle_period(self):\n        \"\"\"Simplified Lomb-Scargle periodogram.\"\"\"\n        # In real code, use astropy.timeseries.LombScargle\n        test_periods = np.linspace(0.1, 10, 1000)\n        # Simplified - just find period with minimum scatter\n        best_period = test_periods[0]\n        min_scatter = float('inf')\n        \n        for period in test_periods:\n            phases, mags = self.phase_fold(period)\n            scatter = np.std(mags)\n            if scatter < min_scatter:\n                min_scatter = scatter\n                best_period = period\n        \n        self._period = best_period\n        return best_period\n    \n    def __str__(self):\n        return (f\"LightCurve({self.star_name}): \"\n                f\"{len(self.observations)} obs, \"\n                f\"<m>={self.mean_magnitude:.2f}, \"\n                f\"Amp={self.amplitude:.2f}\")\n\nclass PhotometryFileReader:\n    \"\"\"Context manager for reading photometry files.\"\"\"\n    \n    def __init__(self, filename: str):\n        self.filename = filename\n        self.file = None\n        self.light_curve = None\n    \n    def __enter__(self):\n        \"\"\"Open file and read header.\"\"\"\n        print(f\"Opening {self.filename}\")\n        self.file = open(self.filename, 'r')\n        \n        # Read star name from first line\n        star_name = self.file.readline().strip().replace('#', '').strip()\n        \n        # Read observations\n        obs_set = ObservationSet()\n        for line in self.file:\n            if line.startswith('#'):\n                continue\n            parts = line.split()\n            if len(parts) >= 3:\n                obs = Observation(\n                    float(parts[0]),  # time\n                    float(parts[1]),  # magnitude\n                    float(parts[2])   # error\n                )\n                obs_set.add(obs)\n        \n        self.light_curve = LightCurve(obs_set, star_name)\n        return self.light_curve\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Clean up resources.\"\"\"\n        if self.file:\n            print(f\"Closing {self.filename}\")\n            self.file.close()\n        return False  # Don't suppress exceptions\n\n# Demonstration of the complete pipeline\nprint(\"=== Professional Photometry Pipeline Demo ===\\n\")\n\n# Create synthetic variable star data\nobs_set = ObservationSet()\ntrue_period = 2.5  # days\ntimes = np.linspace(0, 20, 100)\nfor t in times:\n    # Sinusoidal variation\n    phase = 2 * np.pi * t / true_period\n    magnitude = 10.0 + 0.5 * np.sin(phase)\n    error = 0.01 + 0.02 * np.random.random()\n    obs_set.add(Observation(t, magnitude, error))\n\n# Create light curve and analyze\nlc = LightCurve(obs_set, \"Simulated Cepheid\")\nprint(lc)\nprint(f\"Mean magnitude: {lc.mean_magnitude:.3f}\")\nprint(f\"Amplitude: {lc.amplitude:.3f} mag\")\n\n# Find period\nfound_period = lc.find_period(method='lomb-scargle')\nprint(f\"Found period: {found_period:.3f} days (true: {true_period} days)\")\n\n# Demonstrate special methods\nprint(f\"\\nLight curve has {len(lc.observations)} observations\")\nprint(f\"First observation: {lc.observations[0]}\")\nprint(f\"Last observation: {lc.observations[-1]}\")\n\n# Show how this would work with a file\n# with PhotometryFileReader('cepheid_data.txt') as light_curve:\n#     period = light_curve.find_period()\n#     print(f\"Period: {period:.3f} days\")\n\nprint(\"\\n🎉 Congratulations! You've built a photometry pipeline\")\nprint(\"    using the same OOP patterns as lightkurve and\")\nprint(\"    astropy.timeseries. This is professional-level\")\nprint(\"    astronomical software design!\")","key":"QfkuYzgzGQ"},{"type":"output","id":"C01Kbv-njLZ3eS019VB3U","data":[],"key":"QyQcn4vnrA"}],"key":"hx9SAglx1g"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1749,"column":1},"end":{"line":1749,"column":1}},"children":[{"type":"text","value":"These exercises demonstrate how OOP transforms astronomical data analysis from scattered functions into organized, reusable systems. You’re learning the same design patterns used in packages that analyze data from Kepler, TESS, and ground-based surveys like ASAS-SN and ZTF!","position":{"start":{"line":1749,"column":1},"end":{"line":1749,"column":1}},"key":"dXzPuaQfaB"}],"key":"Rekyk4T9ai"},{"type":"heading","depth":3,"position":{"start":{"line":1751,"column":1},"end":{"line":1751,"column":1}},"children":[{"type":"text","value":"Exercise 6.1: Design a Measurement Class","position":{"start":{"line":1751,"column":1},"end":{"line":1751,"column":1}},"key":"igifvrLqFT"}],"identifier":"exercise-6-1-design-a-measurement-class","label":"Exercise 6.1: Design a Measurement Class","html_id":"exercise-6-1-design-a-measurement-class","implicit":true,"key":"BDVgXdWjP2"},{"type":"paragraph","position":{"start":{"line":1753,"column":1},"end":{"line":1753,"column":1}},"children":[{"type":"text","value":"Create a class for scientific measurements with uncertainty:","position":{"start":{"line":1753,"column":1},"end":{"line":1753,"column":1}},"key":"O8yF7uVhV3"}],"key":"eTxVvUWWEd"}],"key":"M560HUak7M"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nDesign a Measurement class with:\n1. Store value and uncertainty\n2. Arithmetic operations with error propagation\n3. String output with significant figures\n4. Method to check agreement within uncertainty\n\nError propagation:\n- Addition: δz = sqrt(δx² + δy²)\n- Multiplication: δz/z = sqrt((δx/x)² + (δy/y)²)\n\"\"\"\n\nclass Measurement:\n    def __init__(self, value, uncertainty):\n        self.value = value\n        self.uncertainty = uncertainty\n    \n    def __str__(self):\n        # Format with appropriate precision\n        return f\"{self.value:.2f} ± {self.uncertainty:.2f}\"\n    \n    def __add__(self, other):\n        # Implement error propagation for addition\n        import math\n        new_value = self.value + other.value\n        new_unc = math.sqrt(self.uncertainty**2 + other.uncertainty**2)\n        return Measurement(new_value, new_unc)\n    \n    def agrees_with(self, other):\n        # Check if measurements agree within uncertainty\n        import math\n        diff = abs(self.value - other.value)\n        combined_unc = math.sqrt(self.uncertainty**2 + other.uncertainty**2)\n        return diff <= combined_unc\n\n# Test\nm1 = Measurement(10.0, 0.1)\nm2 = Measurement(10.05, 0.08)\nprint(f\"m1: {m1}\")\nprint(f\"m2: {m2}\")\nprint(f\"Agreement: {m1.agrees_with(m2)}\")\nprint(f\"Sum: {m1 + m2}\")","key":"Ryv4LnpDVS"},{"type":"output","id":"mTl1NkSGbeTQLZgKx6Enn","data":[],"key":"u2mHOE4axz"}],"key":"gTAsvw6ObL"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1800,"column":1},"end":{"line":1800,"column":1}},"children":[{"type":"text","value":"Exercise 6.2: Astronomical Observation Class","position":{"start":{"line":1800,"column":1},"end":{"line":1800,"column":1}},"key":"lQoo5OlK64"}],"identifier":"exercise-6-2-astronomical-observation-class","label":"Exercise 6.2: Astronomical Observation Class","html_id":"exercise-6-2-astronomical-observation-class","implicit":true,"key":"yKTzCkDkSp"}],"key":"SCa4gjNH2S"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nCreate an observation class hierarchy:\n1. Base Observation class\n2. OpticalObservation subclass\n3. SpectroscopicObservation subclass\n\"\"\"\n\nfrom datetime import datetime\n\nclass Observation:\n    \"\"\"Base observation class.\"\"\"\n    \n    def __init__(self, target, instrument, observer):\n        self.target = target\n        self.instrument = instrument\n        self.observer = observer\n        self.timestamp = datetime.now()\n    \n    def is_valid(self):\n        \"\"\"Check if observation is valid.\"\"\"\n        return all([self.target, self.instrument, self.observer])\n\nclass OpticalObservation(Observation):\n    \"\"\"Optical observation with photometry.\"\"\"\n    \n    def __init__(self, target, instrument, observer, \n                 filter_name, exposure_time, counts):\n        super().__init__(target, instrument, observer)\n        self.filter = filter_name\n        self.exposure_time = exposure_time\n        self.counts = counts\n    \n    def signal_to_noise(self):\n        \"\"\"Calculate SNR.\"\"\"\n        import math\n        return math.sqrt(self.counts)\n\n# Test the hierarchy\nobs = OpticalObservation(\"M42\", \"CCD\", \"Student\", \"V\", 30, 10000)\nprint(f\"Valid: {obs.is_valid()}\")\nprint(f\"SNR: {obs.signal_to_noise():.1f}\")","key":"HhV8h21fGt"},{"type":"output","id":"0hwJ8rvl_Zrj5wzAEGB50","data":[],"key":"cIDRDw7xwJ"}],"key":"PY7tol5OQk"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"children":[{"type":"text","value":"Exercise 6.3: Performance Comparison","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"key":"w3BUueT3KX"}],"identifier":"exercise-6-3-performance-comparison","label":"Exercise 6.3: Performance Comparison","html_id":"exercise-6-3-performance-comparison","implicit":true,"key":"F2FUNr32N5"}],"key":"t8ikgBZnhk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nCompare OOP vs procedural for 1000 stars\n\"\"\"\n\nimport time\nimport numpy as np\n\n# OOP approach\nclass Star:\n    def __init__(self, ra, dec, mag):\n        self.ra = ra\n        self.dec = dec\n        self.mag = mag\n    \n    def flux(self):\n        return 10**(-self.mag/2.5)\n\n# Create and time OOP\nstart = time.perf_counter()\nstars = [Star(i, i, 10) for i in range(1000)]\nfluxes_oop = [s.flux() for s in stars]\noop_time = time.perf_counter() - start\n\n# NumPy approach\nstart = time.perf_counter()\nstar_data = np.array([(i, i, 10) for i in range(1000)],\n                     dtype=[('ra', 'f8'), ('dec', 'f8'), ('mag', 'f8')])\nfluxes_np = 10**(-star_data['mag']/2.5)\nnp_time = time.perf_counter() - start\n\nprint(f\"OOP time: {oop_time*1000:.2f} ms\")\nprint(f\"NumPy time: {np_time*1000:.2f} ms\")\nprint(f\"Speedup: {oop_time/np_time:.1f}x\")","key":"F0SR38B6z2"},{"type":"output","id":"9Ipt-3K0v8GINdm48KYp9","data":[],"key":"iOgwMBkT74"}],"key":"VnwTWV2GEj"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"children":[{"type":"text","value":"Main Takeaways","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"key":"P0XKOxcBjL"}],"identifier":"main-takeaways","label":"Main Takeaways","html_id":"main-takeaways","implicit":true,"key":"IJdwQTLBMY"},{"type":"paragraph","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"text","value":"You’ve just learned one of programming’s most powerful organizational paradigms — object-oriented programming. This isn’t just about syntax or following rules; it’s about modeling the world (and universe!) in code. When you create a Star class with mass, temperature, and luminosity attributes, along with methods to calculate its spectral class or evolution, you’re not just organizing data — you’re creating a computational model that mirrors how we think about stars scientifically.","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"key":"XFPTApwIO3"}],"key":"MTvcMBXgcm"},{"type":"paragraph","position":{"start":{"line":1888,"column":1},"end":{"line":1888,"column":1}},"children":[{"type":"text","value":"The beauty of OOP in astronomy is how naturally it maps to our domain. Telescopes are objects with properties (aperture, focal_length) and behaviors (slew_to_target, take_exposure). Observations have data and methods to reduce them. Galaxies contain stellar populations which contain stars. This hierarchical, object-based thinking is already how astronomers conceptualize the universe. OOP just gives us the tools to express it in code.","position":{"start":{"line":1888,"column":1},"end":{"line":1888,"column":1}},"key":"YRfd3aIDpg"}],"key":"N7TZCEstTd"},{"type":"paragraph","position":{"start":{"line":1890,"column":1},"end":{"line":1890,"column":1}},"children":[{"type":"text","value":"But perhaps the most important lesson is knowing when NOT to use OOP. Not every problem needs a class. Simple calculations should remain functions. Collections of utilities work better as modules. The art lies in recognizing when you have entities with state and behavior (use classes), versus pure transformations of data (use functions). This judgment comes with practice, but you now have the foundation to make these decisions thoughtfully.","position":{"start":{"line":1890,"column":1},"end":{"line":1890,"column":1}},"key":"TpDO2013Cf"}],"key":"GclnJXj24r"},{"type":"paragraph","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"children":[{"type":"text","value":"Looking ahead, you’ll see OOP everywhere in scientific Python. NumPy arrays are objects with methods like reshape() and mean(). Matplotlib figures maintain state and expose methods like savefig(). Astropy coordinates know their reference frame and can transform themselves. Understanding OOP isn’t just about writing your own classes — it’s about leveraging the rich ecosystem of scientific objects that others have created. You’re now equipped to not just use these tools, but understand their design and even contribute to them.","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"key":"lmu983GFo2"}],"key":"qMAUIyKFYc"},{"type":"heading","depth":2,"position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"children":[{"type":"text","value":"Definitions","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"key":"aApm3h5rFY"}],"identifier":"definitions","label":"Definitions","html_id":"definitions","implicit":true,"key":"maEySeSm6J"},{"type":"paragraph","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"children":[{"type":"text","value":"Attribute","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"bpYI3MWyzb"}],"key":"VfDT3bs3pk"},{"type":"text","value":": A variable that belongs to an object or class. Instance attributes belong to specific objects, while class attributes are shared by all instances.","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"g7ptLHB2IB"}],"key":"tQzaCYNlD6"},{"type":"paragraph","position":{"start":{"line":1898,"column":1},"end":{"line":1898,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1898,"column":1},"end":{"line":1898,"column":1}},"children":[{"type":"text","value":"Class","position":{"start":{"line":1898,"column":1},"end":{"line":1898,"column":1}},"key":"R5SNnY9Xdl"}],"key":"p2GwpJOG3u"},{"type":"text","value":": A blueprint for creating objects. Defines what attributes and methods objects will have.","position":{"start":{"line":1898,"column":1},"end":{"line":1898,"column":1}},"key":"wgAvrayHty"}],"key":"pX0KwA8t2B"},{"type":"paragraph","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"children":[{"type":"text","value":"Class Method","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"key":"y6D5feDsam"}],"key":"ZyoIPSvkx7"},{"type":"text","value":": A method that receives the class as first argument (","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"key":"GpQmmESznO"},{"type":"inlineCode","value":"@classmethod","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"key":"Ct6hD5QuQJ"},{"type":"text","value":"). Often used for alternative constructors.","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"key":"ISkUpXtd0i"}],"key":"KDdwTyZowW"},{"type":"paragraph","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"children":[{"type":"text","value":"Composition","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"key":"LGCcya3t46"}],"key":"EtE6n8wz7O"},{"type":"text","value":": Design pattern where objects contain other objects (“has-a” relationship).","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"key":"w9eWa5L41K"}],"key":"ciRgFrF0ds"},{"type":"paragraph","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"RuSIJSNp12"}],"key":"Y2ohNHAOo1"},{"type":"text","value":": The ","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"q17jmaj9Af"},{"type":"inlineCode","value":"__init__","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"xFBdYiedu1"},{"type":"text","value":" method that initializes new objects when they’re created.","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"uMlo893h2P"}],"key":"uqxmiK6c7j"},{"type":"paragraph","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"children":[{"type":"text","value":"Context Manager","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"RdoQuatsGi"}],"key":"kQfSnfLGRk"},{"type":"text","value":": Object implementing ","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"ylJIf0hUg9"},{"type":"inlineCode","value":"__enter__","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"KelyU0eGrS"},{"type":"text","value":" and ","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"CEFfZpvUGJ"},{"type":"inlineCode","value":"__exit__","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"tNoNCWE4uP"},{"type":"text","value":" methods for use with ","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"gZHGt4zLyT"},{"type":"inlineCode","value":"with","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"RxHwOc0Mi0"},{"type":"text","value":" statements.","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"PE6vRgJXwr"}],"key":"nW2oSdbNSH"},{"type":"paragraph","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"children":[{"type":"text","value":"Decorator","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"wJbM1tJ09w"}],"key":"LCvj5YdJw9"},{"type":"text","value":": Special syntax using ","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"tNJrAmREX3"},{"type":"inlineCode","value":"@","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"hPoniwlDZj"},{"type":"text","value":" that modifies functions or methods (","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"ZB4KxtrIDJ"},{"type":"inlineCode","value":"@property","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"OaRzaKrvFF"},{"type":"text","value":", ","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"PR4C7LHomz"},{"type":"inlineCode","value":"@staticmethod","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"sGYUeHDhGQ"},{"type":"text","value":").","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"Y4RI4oxE8k"}],"key":"L0dilZUju9"},{"type":"paragraph","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"children":[{"type":"text","value":"Duck Typing","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"key":"DgFkVXY22y"}],"key":"RlgVGlkY5Z"},{"type":"text","value":": Python philosophy that an object’s suitability is determined by its methods/attributes, not its type.","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"key":"VA91L8HvOx"}],"key":"mXZ012bW5O"},{"type":"paragraph","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"key":"pbKbpiTgXI"}],"key":"eMgIiiqDBo"},{"type":"text","value":": Bundling data and methods that operate on that data within a single unit (class).","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"key":"qO3o9SwLON"}],"key":"Rxlf9na8JA"},{"type":"paragraph","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"children":[{"type":"text","value":"Inheritance","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"key":"uUZ6e72Rb8"}],"key":"ZgXCDIqdf1"},{"type":"text","value":": Mechanism where a class derives attributes and methods from another class (“is-a” relationship).","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"key":"sCKG1NkOkG"}],"key":"ULGx9e3kDy"},{"type":"paragraph","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"children":[{"type":"text","value":"Instance","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"Cqal1zp0ml"}],"key":"SDf0H6vObu"},{"type":"text","value":": A specific object created from a class.","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"Uop7d36koL"}],"key":"B5U8yCsC5y"},{"type":"paragraph","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"children":[{"type":"text","value":"Method","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"key":"nQIOvkXHbR"}],"key":"jYkhCShdEG"},{"type":"text","value":": A function defined inside a class that operates on instances of that class.","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"key":"L8Cs6os2Xq"}],"key":"MM5mtbVJda"},{"type":"paragraph","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"children":[{"type":"text","value":"Method Resolution Order (MRO)","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"key":"r28KdbAmpQ"}],"key":"pni5eZlZu4"},{"type":"text","value":": The order Python searches through classes when looking for methods in inheritance hierarchies.","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"key":"yniBBfm665"}],"key":"RjFgrV0N4d"},{"type":"paragraph","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"children":[{"type":"text","value":"Property","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"n3ikZaJ2LY"}],"key":"eq34qIoOwP"},{"type":"text","value":": Special attribute that executes methods when accessed (","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"EYBZRvyDRA"},{"type":"inlineCode","value":"@property","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"Cxk9awIesn"},{"type":"text","value":" decorator).","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"MntWgR0HgJ"}],"key":"M4Zl9R4b3h"},{"type":"paragraph","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"children":[{"type":"text","value":"Self","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"key":"MoKXnDndfT"}],"key":"xqxz2md0Dq"},{"type":"text","value":": First parameter of instance methods, referring to the specific instance being operated on.","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"key":"WMRQXUSF5w"}],"key":"rAmYqHSpLB"},{"type":"paragraph","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"children":[{"type":"text","value":"Special Methods","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"pLJpHql05W"}],"key":"Vljk37ge3j"},{"type":"text","value":": Methods with double underscores (","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"lULr5iPfB7"},{"type":"inlineCode","value":"__init__","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"h5b7kTpe4v"},{"type":"text","value":", ","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"zLyzl4hjv2"},{"type":"inlineCode","value":"__str__","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"nzIXYNL5nW"},{"type":"text","value":") that define object behavior for built-in operations.","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"ESD4mFVAUa"}],"key":"UwtPv9fAVB"},{"type":"paragraph","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"children":[{"type":"text","value":"Super","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"key":"fSqK4qKyeH"}],"key":"EyXard88h1"},{"type":"text","value":": Built-in function for accessing parent class methods in inheritance hierarchies.","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"key":"C80mEIvDzv"}],"key":"GcNzmBnDcI"},{"type":"heading","depth":2,"position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"key":"NorVn2wQsd"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"BCiyxKYKx2"},{"type":"paragraph","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"key":"EvEEktQB0j"},{"type":"strong","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"children":[{"type":"text","value":"Classes bundle data and behavior together","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"key":"dk8hXO2Vxz"}],"key":"MLSS30FWPI"},{"type":"text","value":" — When data and operations naturally belong together (like a star’s properties and calculations), classes provide clean organization with state persistence.","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"key":"lSlpW95mcU"}],"key":"kNoYhq0gPB"},{"type":"paragraph","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"key":"Yq4aaqaPzO"},{"type":"strong","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"children":[{"type":"text","value":"The self parameter connects methods to their object","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"key":"gF0OLINUQ4"}],"key":"WmoAhLfuzO"},{"type":"text","value":" — It’s just Python’s way of passing the object to its methods. Forgetting it is the most common OOP error.","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"key":"IjFupVeVhI"}],"key":"gic8lDNkJh"},{"type":"paragraph","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"OEPOJXCtuH"},{"type":"strong","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"children":[{"type":"text","value":"Properties provide controlled access","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"mCzV7y4OG0"}],"key":"y1r74bfJ27"},{"type":"text","value":" — Use ","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"Pdp4lBHoY0"},{"type":"inlineCode","value":"@property","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"tDQOQKohlT"},{"type":"text","value":" for computed attributes, validation, and maintaining data consistency without explicit method calls.","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"Z0b0CSbnW4"}],"key":"s53oAxQRKW"},{"type":"paragraph","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"key":"lTXgJqzmhC"},{"type":"strong","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"children":[{"type":"text","value":"Inheritance models “is-a”, composition models “has-a”","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"key":"xNSG4zEObI"}],"key":"JLhBAid7gO"},{"type":"text","value":" — Choose inheritance for specialized versions (WhiteDwarf is-a Star), composition for contained objects (Telescope has-a Mount).","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"key":"ICjtS0zpSt"}],"key":"AJrH2eXnuL"},{"type":"paragraph","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"AZXAtBsGcJ"},{"type":"strong","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"children":[{"type":"text","value":"Special methods make objects Pythonic","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"uRkXbJsH8i"}],"key":"ogUIUgcM6s"},{"type":"text","value":" — Implementing ","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"cKWn40guGj"},{"type":"inlineCode","value":"__str__","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"lignwWbFWS"},{"type":"text","value":", ","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"xLlndMco5P"},{"type":"inlineCode","value":"__len__","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"dfpBIITGLU"},{"type":"text","value":", ","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"B7nK81NoKo"},{"type":"inlineCode","value":"__add__","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"IKQlAf1Pj2"},{"type":"text","value":" lets your objects work seamlessly with built-in functions and operators.","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"Vlay3NYph0"}],"key":"FKeexyjrtC"},{"type":"paragraph","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"LW9MHtD8Xc"},{"type":"strong","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"children":[{"type":"text","value":"Context managers ensure cleanup","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"iv7D6Soesi"}],"key":"NqFddQgAKd"},{"type":"text","value":" — Use ","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"wOjQaWcg2l"},{"type":"inlineCode","value":"__enter__","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"ng4TcpoOml"},{"type":"text","value":" and ","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"WRtaI1MzLg"},{"type":"inlineCode","value":"__exit__","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"UVInPALkiv"},{"type":"text","value":" for resources that need guaranteed cleanup (files, connections, locks).","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"yys2E43m96"}],"key":"zBfOx3624X"},{"type":"paragraph","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"key":"eWWqX5bmFy"},{"type":"strong","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"children":[{"type":"text","value":"Performance has tradeoffs","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"key":"CGkLI6YgZB"}],"key":"o20Mi2i4iC"},{"type":"text","value":" — Objects use more memory than tuples, but provide better organization. Use ","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"key":"OB2NSO2bsB"},{"type":"inlineCode","value":"__slots__","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"key":"VXHVMIIQGp"},{"type":"text","value":" for memory-critical applications with many instances.","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"key":"CE50fEsdNN"}],"key":"VYDTIaSPYW"},{"type":"paragraph","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"key":"Nzv2881AQg"},{"type":"strong","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"children":[{"type":"text","value":"Not everything needs classes","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"key":"jhacK73b7Z"}],"key":"XMr6c8RRVf"},{"type":"text","value":" — Use functions for simple calculations, modules for utilities, classes for stateful objects with behavior.","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"key":"Rx23bTmC4H"}],"key":"k6t6B4CJWv"},{"type":"paragraph","position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"key":"zmeMtNVRup"},{"type":"strong","position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"children":[{"type":"text","value":"OOP is everywhere in scientific Python","position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"key":"hIdbeN2Kg7"}],"key":"fr2p3nuaoD"},{"type":"text","value":" — NumPy arrays, Matplotlib figures, and Astropy objects all use these principles. Understanding OOP helps you leverage the entire ecosystem.","position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"key":"LHAtHBPmCy"}],"key":"O36CjTpHvd"},{"type":"paragraph","position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"key":"NHTvYnCUls"},{"type":"strong","position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"children":[{"type":"text","value":"Testing classes requires special consideration","position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"key":"PbQoSXWXHv"}],"key":"mvqyJjIzQ3"},{"type":"text","value":" — Test initialization, methods, and properties separately. Mock external dependencies for reliable tests.","position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"key":"sCOPFN6mWd"}],"key":"K6EPNFmVne"},{"type":"heading","depth":2,"position":{"start":{"line":1952,"column":1},"end":{"line":1952,"column":1}},"children":[{"type":"text","value":"Quick Reference Tables","position":{"start":{"line":1952,"column":1},"end":{"line":1952,"column":1}},"key":"KsLMWkM5qy"}],"identifier":"quick-reference-tables","label":"Quick Reference Tables","html_id":"quick-reference-tables","implicit":true,"key":"gQ5B51o6hc"},{"type":"heading","depth":3,"position":{"start":{"line":1954,"column":1},"end":{"line":1954,"column":1}},"children":[{"type":"text","value":"Class Definition Syntax","position":{"start":{"line":1954,"column":1},"end":{"line":1954,"column":1}},"key":"c2U9gqg3ft"}],"identifier":"class-definition-syntax","label":"Class Definition Syntax","html_id":"class-definition-syntax","implicit":true,"key":"oi7Rynejfy"},{"type":"table","position":{"start":{"line":1956,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"children":[{"type":"text","value":"Concept","position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"key":"knxFBHcpk4"}],"key":"Glje3QZFjG"},{"type":"tableCell","header":true,"position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"key":"lcxcWxzljD"}],"key":"hPdL88f3TZ"},{"type":"tableCell","header":true,"position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"key":"OpFS4r8y48"}],"key":"KWEuMQ7zBS"}],"key":"c763QZSf8R"},{"type":"tableRow","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"children":[{"type":"text","value":"Define class","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"key":"PRMgNKs5MY"}],"key":"UcmjiOf4ZB"},{"type":"tableCell","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"children":[{"type":"inlineCode","value":"class Name:","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"key":"r9tcjVJgGl"}],"key":"gmdtR5rOez"},{"type":"tableCell","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"children":[{"type":"inlineCode","value":"class Star:","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"key":"xmiHWgcwPX"}],"key":"Z9MI0FfnLg"}],"key":"wJeDBZqMS5"},{"type":"tableRow","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"key":"Br6iky77Tr"}],"key":"qYgoeVFHu2"},{"type":"tableCell","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"children":[{"type":"inlineCode","value":"def __init__(self):","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"key":"sZ3TiM3hQ0"}],"key":"wwQgkmEIfD"},{"type":"tableCell","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"children":[{"type":"inlineCode","value":"def __init__(self, name):","position":{"start":{"line":1959,"column":1},"end":{"line":1959,"column":1}},"key":"j56gtdEcZC"}],"key":"M35VmcLtMK"}],"key":"Le5iFy4Ke9"},{"type":"tableRow","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"children":[{"type":"text","value":"Instance attribute","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"key":"BLIoSa0t4k"}],"key":"IakxfiuCkl"},{"type":"tableCell","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"children":[{"type":"inlineCode","value":"self.attr = value","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"key":"QAEHxVumXI"}],"key":"T50llZ71rJ"},{"type":"tableCell","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"children":[{"type":"inlineCode","value":"self.mass = 1.989e30","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"key":"a7ONLypyhx"}],"key":"mKYOekcvG6"}],"key":"QoIwPuk9lb"},{"type":"tableRow","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"children":[{"type":"text","value":"Class attribute","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"key":"p0wzmD1bRE"}],"key":"YbDFobjql3"},{"type":"tableCell","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"children":[{"type":"inlineCode","value":"attr = value","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"key":"w15rmd0acP"}],"key":"uTJkrWYuYs"},{"type":"tableCell","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"children":[{"type":"inlineCode","value":"SPEED_OF_LIGHT = 3e8","position":{"start":{"line":1961,"column":1},"end":{"line":1961,"column":1}},"key":"DkT4NmLR2r"}],"key":"BNhEn0TsQ5"}],"key":"clkWli6iAi"},{"type":"tableRow","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"text","value":"Instance method","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"key":"nGvf0aFKAO"}],"key":"qD09AahrLV"},{"type":"tableCell","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"inlineCode","value":"def method(self):","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"key":"PyAH07CRpW"}],"key":"FrDY0ObU39"},{"type":"tableCell","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"inlineCode","value":"def luminosity(self):","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"key":"aWw8PiZmbB"}],"key":"qiqrCmUjDd"}],"key":"QShEnyEth4"},{"type":"tableRow","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"children":[{"type":"text","value":"Class method","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"key":"hxL8VZFf5E"}],"key":"N87Y0PqbvA"},{"type":"tableCell","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"children":[{"type":"inlineCode","value":"@classmethod","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"key":"pLXgs8z6Da"}],"key":"YIE6qSlzEI"},{"type":"tableCell","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"children":[{"type":"inlineCode","value":"@classmethod def from_file(cls):","position":{"start":{"line":1963,"column":1},"end":{"line":1963,"column":1}},"key":"ei1cDXSfyt"}],"key":"M1PfcvLED0"}],"key":"kvUrfHRg3k"},{"type":"tableRow","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"text","value":"Static method","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"key":"kpEEA0kbBs"}],"key":"zZG65xVuiI"},{"type":"tableCell","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"inlineCode","value":"@staticmethod","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"key":"Z7e4H6eemN"}],"key":"t6NIUhG5mb"},{"type":"tableCell","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"inlineCode","value":"@staticmethod def validate():","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"key":"cn5twcBtx9"}],"key":"zdjRXYEOqN"}],"key":"lIqU6dht8q"},{"type":"tableRow","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"text","value":"Property","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"key":"coqqMcfXsm"}],"key":"rKDFmI1NqO"},{"type":"tableCell","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"inlineCode","value":"@property","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"key":"jJckMzPBWZ"}],"key":"HApQYIw16F"},{"type":"tableCell","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"inlineCode","value":"@property def temperature(self):","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"key":"qfRIQNSiOC"}],"key":"qxyI1SpQWz"}],"key":"LlwYZ6nZWU"},{"type":"tableRow","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"text","value":"Inheritance","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"key":"BGA84D9s6K"}],"key":"CDxFnl3rEs"},{"type":"tableCell","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"inlineCode","value":"class Child(Parent):","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"key":"uAJ6ofgwCq"}],"key":"PKd54Kj4ua"},{"type":"tableCell","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"inlineCode","value":"class Planet(CelestialBody):","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"key":"ImUKmC2Jxc"}],"key":"NlWy6jZfFe"}],"key":"YY2KWGKzim"}],"key":"fZm2ZcDkdL"},{"type":"heading","depth":3,"position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"children":[{"type":"text","value":"Common Special Methods","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"key":"XlS6rXpQ4G"}],"identifier":"common-special-methods","label":"Common Special Methods","html_id":"common-special-methods","implicit":true,"key":"DeFOOWRUjA"},{"type":"table","position":{"start":{"line":1970,"column":1},"end":{"line":1983,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"text","value":"Method","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"key":"VC3KQD1klQ"}],"key":"uEV5eBGKm7"},{"type":"tableCell","header":true,"position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"key":"P4WgOgUKw5"}],"key":"SQKIBcFNAH"},{"type":"tableCell","header":true,"position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"text","value":"Called by","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"key":"vij3OqdI6s"}],"key":"kA7Rgwkqyr"}],"key":"EMGWQ6AlSD"},{"type":"tableRow","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"children":[{"type":"inlineCode","value":"__init__","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"key":"urk8FK1hPF"}],"key":"bS6iym9XLp"},{"type":"tableCell","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"key":"rCudZxGaCh"}],"key":"J4mTMXxeAo"},{"type":"tableCell","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"children":[{"type":"inlineCode","value":"Object()","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"key":"BvNcyhcI4U"}],"key":"OVeGxYS7Iu"}],"key":"ZMiQdx2Fhq"},{"type":"tableRow","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"children":[{"type":"inlineCode","value":"__str__","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"key":"joCm5GuLED"}],"key":"jxKFX8Lxfh"},{"type":"tableCell","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"children":[{"type":"text","value":"String for users","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"key":"vC5M0641oW"}],"key":"O6nP0W26Hs"},{"type":"tableCell","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"children":[{"type":"inlineCode","value":"str(obj)","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"key":"FtFo27XKve"},{"type":"text","value":", ","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"key":"Wse6voQkjp"},{"type":"inlineCode","value":"print(obj)","position":{"start":{"line":1973,"column":1},"end":{"line":1973,"column":1}},"key":"AFfQpSFyyX"}],"key":"npLlkbTQyj"}],"key":"n934bmC1yh"},{"type":"tableRow","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"inlineCode","value":"__repr__","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"key":"fg1NbWSweg"}],"key":"w26RS3ekso"},{"type":"tableCell","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"text","value":"String for developers","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"key":"XCw9F7QqF2"}],"key":"v6h9ht4HKQ"},{"type":"tableCell","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"inlineCode","value":"repr(obj)","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"key":"SVWEbNiogH"}],"key":"RVpg0aS8SG"}],"key":"HC8AvEQ9W6"},{"type":"tableRow","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"children":[{"type":"inlineCode","value":"__len__","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"key":"qIhb4Rvd0u"}],"key":"mvePG89qbe"},{"type":"tableCell","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"children":[{"type":"text","value":"Length","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"key":"guckwXSY9p"}],"key":"AhBFbqhTqk"},{"type":"tableCell","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"children":[{"type":"inlineCode","value":"len(obj)","position":{"start":{"line":1975,"column":1},"end":{"line":1975,"column":1}},"key":"s6dQI4ccFp"}],"key":"toyZcmfbTs"}],"key":"CaTqcf8Bo8"},{"type":"tableRow","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"inlineCode","value":"__getitem__","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"key":"GUcp9Zodrg"}],"key":"zeI0BPXI4I"},{"type":"tableCell","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"text","value":"Get by index","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"key":"RrtEb71LMp"}],"key":"akINrKnitL"},{"type":"tableCell","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"inlineCode","value":"obj[index]","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"key":"N14AA3oio7"}],"key":"jJWMT0nHTE"}],"key":"cuCrMCyBtB"},{"type":"tableRow","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"inlineCode","value":"__setitem__","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"key":"MUXAMdsoBr"}],"key":"gwwuG3Ofsw"},{"type":"tableCell","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"text","value":"Set by index","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"key":"CwnTT3G3cT"}],"key":"TQfaJUjAWR"},{"type":"tableCell","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"inlineCode","value":"obj[index] = val","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"key":"oEQ5uCQxHV"}],"key":"OMQzEYRqE3"}],"key":"WevfaO9ATP"},{"type":"tableRow","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"inlineCode","value":"__contains__","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"key":"YvOE3PYA1D"}],"key":"mryirniXnN"},{"type":"tableCell","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"text","value":"Membership","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"key":"DRkujJZFXz"}],"key":"SEZgwshVVf"},{"type":"tableCell","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"inlineCode","value":"item in obj","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"key":"n5RFNlcvDr"}],"key":"sUL2ybVvfn"}],"key":"BkMHNQMSA1"},{"type":"tableRow","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"inlineCode","value":"__iter__","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"key":"croocTUYI4"}],"key":"ERqAKgU2Jz"},{"type":"tableCell","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"text","value":"Iteration","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"key":"Hox8vWYTyM"}],"key":"OOA9tRjQOr"},{"type":"tableCell","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"inlineCode","value":"for item in obj","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"key":"O5P3QqWEdk"}],"key":"MXIPVeYtSX"}],"key":"Oe6acwOwT0"},{"type":"tableRow","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"inlineCode","value":"__add__","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"key":"MPJ9gQ6IEv"}],"key":"sZ2BOdao1J"},{"type":"tableCell","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"text","value":"Addition","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"key":"aHGpHJkVx5"}],"key":"kwqB7FWune"},{"type":"tableCell","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"inlineCode","value":"obj1 + obj2","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"key":"ZjeJigKb9t"}],"key":"fxfRmZZd0Z"}],"key":"J4bXXTe7RC"},{"type":"tableRow","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"children":[{"type":"inlineCode","value":"__eq__","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"key":"TwJO7jYjeV"}],"key":"wspB4n13ny"},{"type":"tableCell","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"children":[{"type":"text","value":"Equality","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"key":"PtEgjDeS5o"}],"key":"j9xC7MZu1w"},{"type":"tableCell","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"children":[{"type":"inlineCode","value":"obj1 == obj2","position":{"start":{"line":1981,"column":1},"end":{"line":1981,"column":1}},"key":"MNnvAgqA5N"}],"key":"pLmXnH3cug"}],"key":"zPmbH7GY2j"},{"type":"tableRow","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"children":[{"type":"inlineCode","value":"__enter__","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"key":"XqQNQ7XtkZ"}],"key":"i7Bhn7PKCP"},{"type":"tableCell","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"children":[{"type":"text","value":"Context entry","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"key":"dx29tHi8iM"}],"key":"WyUCP8qgtZ"},{"type":"tableCell","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"children":[{"type":"inlineCode","value":"with obj:","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"key":"TpOLsMo7aR"}],"key":"KKsCOz6IMX"}],"key":"gh9n1g3gHf"},{"type":"tableRow","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"children":[{"type":"inlineCode","value":"__exit__","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"key":"KJaQr83qJ4"}],"key":"d2sTNHed7v"},{"type":"tableCell","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"children":[{"type":"text","value":"Context exit","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"key":"ENaKc6A2Qo"}],"key":"HUbuooa1w8"},{"type":"tableCell","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"children":[{"type":"text","value":"End of ","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"key":"a4OcId3M9O"},{"type":"inlineCode","value":"with","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"key":"k5XVMYo8we"},{"type":"text","value":" block","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"key":"Eli4yDWnoS"}],"key":"FXAWIWeHhE"}],"key":"fFh310DrBB"}],"key":"mIL0pAzFWT"},{"type":"heading","depth":3,"position":{"start":{"line":1985,"column":1},"end":{"line":1985,"column":1}},"children":[{"type":"text","value":"Debugging Functions","position":{"start":{"line":1985,"column":1},"end":{"line":1985,"column":1}},"key":"pf3vNrVDTb"}],"identifier":"debugging-functions","label":"Debugging Functions","html_id":"debugging-functions","implicit":true,"key":"PbrNkbBM7c"},{"type":"table","position":{"start":{"line":1987,"column":1},"end":{"line":1996,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"text","value":"Function","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"frntw05BJX"}],"key":"hnJIiiFDpm"},{"type":"tableCell","header":true,"position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"fDOkKBzSMt"}],"key":"QcBhoAxv0t"},{"type":"tableCell","header":true,"position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"KdpsxS7gwi"}],"key":"zntGTN1oyl"}],"key":"T7cxFJAuSL"},{"type":"tableRow","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"inlineCode","value":"dir(obj)","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"key":"jcnyfjfwKQ"}],"key":"iucR3GwowZ"},{"type":"tableCell","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"text","value":"List all attributes","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"key":"jJGUYZPZkC"}],"key":"ixv48nMMHI"},{"type":"tableCell","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"inlineCode","value":"dir(star)","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"key":"CcUxHvEgYZ"}],"key":"KDBFbpztRU"}],"key":"j5G5Gv8RRF"},{"type":"tableRow","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"inlineCode","value":"vars(obj)","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"OtDqcjUqPn"}],"key":"LFgz61b8ys"},{"type":"tableCell","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"text","value":"Get instance ","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"bkAXj4w4N3"},{"type":"inlineCode","value":"__dict__","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"cXNUOtvn5T"}],"key":"dvwN6UDEs9"},{"type":"tableCell","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"inlineCode","value":"vars(star)","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"Vknpsp77D9"}],"key":"jrB598qej8"}],"key":"PgwFfyF58O"},{"type":"tableRow","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"inlineCode","value":"type(obj)","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"key":"IYzHiRuckD"}],"key":"di6ED5AySV"},{"type":"tableCell","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"text","value":"Get object’s class","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"key":"QTbCzavSZq"}],"key":"tqY1yyeDx4"},{"type":"tableCell","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"inlineCode","value":"type(star)","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"key":"z7mKlqJLoC"}],"key":"Rn5EalPLbe"}],"key":"KV2LKjjOMJ"},{"type":"tableRow","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"children":[{"type":"inlineCode","value":"isinstance(obj, cls)","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"key":"mt61qwaUaO"}],"key":"NVX8bvNQoo"},{"type":"tableCell","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"children":[{"type":"text","value":"Check type","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"key":"JHSBxckplo"}],"key":"UaWk7jjbfl"},{"type":"tableCell","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"children":[{"type":"inlineCode","value":"isinstance(star, Star)","position":{"start":{"line":1992,"column":1},"end":{"line":1992,"column":1}},"key":"Fyx42kpmB8"}],"key":"DrN49p8wrc"}],"key":"cZ0GrCFjM0"},{"type":"tableRow","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"children":[{"type":"inlineCode","value":"hasattr(obj, attr)","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"key":"pSCIayFL8J"}],"key":"us0btlMSk2"},{"type":"tableCell","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"children":[{"type":"text","value":"Check attribute exists","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"key":"sKLHFBcdSV"}],"key":"Dil0XEL2Wy"},{"type":"tableCell","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"children":[{"type":"inlineCode","value":"hasattr(star, 'mass')","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"key":"Xgi5feAmIK"}],"key":"NUuThwn2UI"}],"key":"Sg739pLcfB"},{"type":"tableRow","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"children":[{"type":"inlineCode","value":"getattr(obj, attr, default)","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"key":"IJ7vcfjpgd"}],"key":"hLpiJ6JI5U"},{"type":"tableCell","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"children":[{"type":"text","value":"Safe attribute access","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"key":"dufVKWEeNC"}],"key":"F7NbNYzzdn"},{"type":"tableCell","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"children":[{"type":"inlineCode","value":"getattr(star, 'age', 0)","position":{"start":{"line":1994,"column":1},"end":{"line":1994,"column":1}},"key":"H2Rjrf21aT"}],"key":"spHBgBVtwE"}],"key":"SE6MoEKppn"},{"type":"tableRow","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"children":[{"type":"inlineCode","value":"id(obj)","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"key":"BSKctWgoBQ"}],"key":"hYqtxUWSVv"},{"type":"tableCell","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"children":[{"type":"text","value":"Get memory address","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"key":"Tp9lrhnFgW"}],"key":"x9XE0b5Ax0"},{"type":"tableCell","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"children":[{"type":"inlineCode","value":"id(star)","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"key":"Rm2HNgUYS6"}],"key":"zyOvZgaFUa"}],"key":"aDEQKFIKE8"},{"type":"tableRow","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"children":[{"type":"inlineCode","value":"Class.__mro__","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"key":"ELUVzDNSMa"}],"key":"eP0fjWHvQe"},{"type":"tableCell","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"children":[{"type":"text","value":"Method resolution order","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"key":"DqWXDABiF4"}],"key":"vkRaNa6ePs"},{"type":"tableCell","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"children":[{"type":"inlineCode","value":"Planet.__mro__","position":{"start":{"line":1996,"column":1},"end":{"line":1996,"column":1}},"key":"kwwRQ8Nj0w"}],"key":"w9mx8hTAp6"}],"key":"ejmj99wrR6"}],"key":"n3SEx8PFkx"},{"type":"heading","depth":2,"position":{"start":{"line":1998,"column":1},"end":{"line":1998,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":1998,"column":1},"end":{"line":1998,"column":1}},"key":"PDIoqEeWWO"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview","implicit":true,"key":"xxaQxGQvhY"},{"type":"paragraph","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"children":[{"type":"text","value":"With object-oriented programming mastered, Chapter 7 introduces NumPy — the foundation of scientific computing in Python. You’ll discover why NumPy arrays are 10-100x faster than Python lists and how vectorization eliminates explicit loops. The OOP concepts from this chapter directly explain NumPy’s design: arrays are objects with methods (","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"a5WEHH7fH2"},{"type":"inlineCode","value":"arr.mean()","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"z4nptLhDYC"},{"type":"text","value":", ","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"kM7nQfEw2I"},{"type":"inlineCode","value":"arr.reshape()","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"JbbNHG75u6"},{"type":"text","value":"), special methods enable mathematical operators (","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"Itxekan5qP"},{"type":"inlineCode","value":"arr1 + arr2","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"fsRSfkNkzK"},{"type":"text","value":"), and properties provide computed attributes (","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"HZ7PvxGJCS"},{"type":"inlineCode","value":"arr.shape","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"uY0BioDRam"},{"type":"text","value":", ","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"azSIYWpVh7"},{"type":"inlineCode","value":"arr.T","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"bOMBVi5Gsw"},{"type":"text","value":"). Understanding objects prepares you to leverage NumPy’s full power and eventually create your own scientific classes that integrate seamlessly with the ecosystem.","position":{"start":{"line":2000,"column":1},"end":{"line":2000,"column":1}},"key":"cXrfsytbWs"}],"key":"qXDPzyeoB6"}],"key":"Fsja8YH37D"}],"key":"Uc6vugohWU"},"references":{"cite":{"order":[],"data":{}}}}