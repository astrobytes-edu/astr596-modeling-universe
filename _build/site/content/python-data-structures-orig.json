{"version":2,"kind":"Article","sha256":"568552edabbbf689c4b468c3de9b7cb98e0582c7d014d3d968ff6b36b0b722a5","slug":"python-data-structures-orig","location":"/03-scientific-computing-with-python/01-python-fundamentals/04-python-data-structures-ORIG.md","dependencies":[],"frontmatter":{"title":"Chapter 4: Data Structures","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/01-python-fundamentals/04-python-data-structures-ORIG.md","exports":[{"format":"md","filename":"04-python-data-structures-ORIG.md","url":"/04-python-data-struc-ece4cbe6df668bd96b9f0c24ba756cf5.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HnMDi1FJk5"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"KFRvVThoSN"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vEaXkGPmuT"}],"key":"SjGPXezuL1"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Choose optimal data structures based on algorithmic requirements and performance constraints","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"JSNE13AJUX"}],"key":"WCrGFohl4J"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Predict whether operations will be O(1) constant time or O(n) linear time","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NFoDWaBIGv"}],"key":"COw0MGSwpm"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Understand memory layout and cache efficiency for scientific computing","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"LM6ZxO1H89"}],"key":"z5PzQMH4Md"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Implement defensive copying strategies to prevent aliasing bugs","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"NMTjMtQ36i"}],"key":"w3gz9CKt1r"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Profile memory usage and optimize data structure choices for large datasets","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"IT9FyjXLvO"}],"key":"gzuIW9FZn4"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Design data structures that prepare you for vectorized computing and JAX","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"cdBwKa2quq"}],"key":"eTP76Y3pMX"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Debug common bugs related to mutability, aliasing, and hashability","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"BNF15xY58T"}],"key":"QakXH37q4v"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Apply data structure patterns to real scientific computing problems","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"lV0xdtSmin"}],"key":"OGPSZHhzpH"}],"key":"yjs2WwfDc6"},{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"C8ONpXwIvP"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check","implicit":true,"key":"fbFzvThxek"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"zvEZI9hCHH"}],"key":"nuCSnjY2Op"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"✓ Write loops and conditional statements fluently (Chapter 3)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"STm8Sn7TRr"}],"key":"aTT3y8bYfV"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"✓ Understand the difference between assignment and equality (Chapter 2)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"KXRyc7rm38"}],"key":"WMnDaj0VMt"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"✓ Use IPython for testing and timing code (Chapter 1)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"dUDoC6gWiw"}],"key":"SZy6Br1L8Q"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"✓ Handle floating-point numbers and comparisons safely (Chapter 2)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"bc3rtX330A"}],"key":"cSChAOQYGF"}],"key":"F81YYqF2jO"},{"type":"heading","depth":2,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"h47obOCvHe"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview","implicit":true,"key":"FXzgiadRSA"},{"type":"paragraph","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"When you’re processing a million stellar spectra or tracking particles in an N-body simulation, the difference between choosing a list versus a set can be the difference between your code running in seconds or hours. Data structures are the fundamental ways we organize information in memory, and each structure makes certain operations efficient while making others expensive.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"R1jNo2B0T2"}],"key":"aMx3jomDxa"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"This chapter builds your intuition for computational complexity through empirical measurement. You’ll learn not just that dictionary lookup is O(1), but ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"jogjneksij"},{"type":"emphasis","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"why","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"iJcFJuwCWC"}],"key":"pfQjOiLG29"},{"type":"text","value":" it’s fast, ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"utXoYVljhe"},{"type":"emphasis","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"when","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"A9KT0Ysyv2"}],"key":"EW05y05AAp"},{"type":"text","value":" it might not be, and ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"jHd2sZPuBk"},{"type":"emphasis","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"how","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"KG09hlEnW4"}],"key":"XwhlZ4iKQi"},{"type":"text","value":" to verify performance characteristics yourself. We’ll explore the critical distinction between mutable and immutable objects — a concept that seems academic until your simulation corrupts its initial conditions because of an aliasing bug.","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"iv871PyDt8"}],"key":"wkpPL5zIcf"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"These concepts directly prepare you for the numerical computing ahead. The memory layout discussions explain why NumPy arrays are 10x more efficient than lists. The immutability concepts prepare you for JAX’s functional programming requirements. The performance profiling skills will help you identify bottlenecks in your Monte Carlo simulations.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"R1nb01cdqk"}],"key":"FnHYijCw3B"},{"type":"heading","depth":2,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"4.1 What Is a Data Structure?","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"C5k6b6csfz"}],"identifier":"id-4-1-what-is-a-data-structure","label":"4.1 What Is a Data Structure?","html_id":"id-4-1-what-is-a-data-structure","implicit":true,"key":"R3MUOMnT1l"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"A data structure is a way of organizing data in computer memory to enable efficient access and modification. Think of it like choosing how to organize astronomical observations: you could keep them in time order (like a list), organize by object ID for quick lookup (like a dictionary), or maintain only unique objects (like a set). Each organization serves different purposes.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"VwRWSq2v0h"}],"key":"VKzcEdVyld"},{"type":"heading","depth":3,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Understanding Big-O Notation","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"esNvgMTj8J"}],"identifier":"understanding-big-o-notation","label":"Understanding Big-O Notation","html_id":"understanding-big-o-notation","implicit":true,"key":"Ril9YQnZw4"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Big-O notation describes how an operation’s time grows with input size. This isn’t abstract computer science — it’s the difference between code that scales and code that doesn’t:","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"fXWTXBBOik"}],"key":"WOHEyQy7Hl"},{"type":"code","lang":"python","value":"In [1]: import time\nIn [2]: import random\n\nIn [3]: # Create test data\nIn [4]: n = 1_000_000\nIn [5]: big_list = list(range(n))\nIn [6]: big_set = set(range(n))\n\nIn [7]: # Search for element not present (worst case)\nIn [8]: target = -1\n\nIn [9]: # O(n) list search - checks every element\nIn [10]: start = time.perf_counter()\nIn [11]: found = target in big_list\nIn [12]: list_time = time.perf_counter() - start\n\nIn [13]: # O(1) set search - direct hash lookup\nIn [14]: start = time.perf_counter()\nIn [15]: found = target in big_set\nIn [16]: set_time = time.perf_counter() - start\n\nIn [17]: print(f\"List search: {list_time*1000:.2f} ms\")\nIn [18]: print(f\"Set search:  {set_time*1000:.4f} ms\")\nIn [19]: print(f\"Set is {list_time/set_time:.0f}x faster!\")\n\nList search: 12.45 ms\nSet search:  0.0012 ms\nSet is 10,375x faster!","position":{"start":{"line":39,"column":1},"end":{"line":68,"column":1}},"key":"lrKYfEBlK7"},{"type":"paragraph","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"children":[{"type":"text","value":"This 10,000x difference isn’t a minor optimization — it determines whether your catalog cross-matching finishes today or next week.","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"UXyBqvyW26"}],"key":"J3xejCPznu"},{"type":"heading","depth":3,"position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"Bj8n4CQRQ0"},{"type":"strong","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Time-Space Tradeoff","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"pVletAQDT9"}],"key":"R5foYDAtpH"}],"identifier":"id-computational-thinking-box-the-time-space-tradeoff","label":"📦 Computational Thinking Box: The Time-Space Tradeoff","html_id":"id-computational-thinking-box-the-time-space-tradeoff","implicit":true,"key":"A9y6MysoVG"},{"type":"code","lang":"","value":"UNIVERSAL PATTERN: Trading Memory for Speed\n\nMany data structures follow this pattern:\n- Use more memory to organize data\n- This organization enables faster access\n- The tradeoff is worthwhile when access is frequent\n\nExamples:\n- Hash tables (dict/set): ~3x memory for O(1) lookup\n- Search trees: 2x memory for O(log n) ordered access\n- Cacheing computed values: memory for avoiding recomputation\n- Spatial indices (octrees): memory for fast neighbor finding\n\nThe pattern appears in:\n- Opacity tables in radiative transfer (cache vs recompute)\n- Neighbor lists in N-body simulations\n- Memoization in dynamic programming\n- Database indices for catalog queries","position":{"start":{"line":74,"column":1},"end":{"line":93,"column":1}},"key":"TZyvvrxW9C"},{"type":"heading","depth":2,"position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"4.2 Lists: Python’s Workhorse Sequence","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"jJ0IdsuBzl"}],"identifier":"id-4-2-lists-pythons-workhorse-sequence","label":"4.2 Lists: Python’s Workhorse Sequence","html_id":"id-4-2-lists-pythons-workhorse-sequence","implicit":true,"key":"mnNkpZVuCz"},{"type":"paragraph","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"children":[{"type":"text","value":"Lists are Python’s most versatile data structure, perfect for ordered collections that change size. However, understanding their internal implementation is crucial for writing efficient code.","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"pd4RptYV2o"}],"key":"ig1CfZ0wp4"},{"type":"heading","depth":3,"position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"How Lists Really Work in Memory","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"fAWIJa6ueg"}],"identifier":"how-lists-really-work-in-memory","label":"How Lists Really Work in Memory","html_id":"how-lists-really-work-in-memory","implicit":true,"key":"cLcBjumgph"},{"type":"paragraph","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"children":[{"type":"text","value":"Python lists don’t store your data directly — they store references to objects elsewhere in memory:","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"EN4VpRNLWb"}],"key":"D679uhecoq"},{"type":"code","lang":"python","value":"In [20]: import sys\n\nIn [21]: # Let's examine memory usage\nIn [22]: numbers = [100, 200, 300]\n\nIn [23]: # The list container\nIn [24]: list_size = sys.getsizeof(numbers)\nIn [25]: print(f\"List container: {list_size} bytes\")\n\nIn [26]: # Each integer is a full object\nIn [27]: element_sizes = [sys.getsizeof(n) for n in numbers]\nIn [28]: print(f\"Each integer: {element_sizes[0]} bytes\")\n\nIn [29]: # Total memory\nIn [30]: total = list_size + sum(element_sizes)\nIn [31]: print(f\"Total: {total} bytes for 3 integers\")\nIn [32]: print(f\"That's {total/12:.1f}x more than raw integers!\")\n\nList container: 80 bytes\nEach integer: 28 bytes\nTotal: 164 bytes for 3 integers\nThat's 13.7x more than raw integers!","position":{"start":{"line":103,"column":1},"end":{"line":126,"column":1}},"key":"nUFJGfrbuF"},{"type":"paragraph","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"Here’s what’s actually happening in memory:","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"GFs6lqYf5G"}],"key":"dWxvZ2hE8p"},{"type":"code","lang":"","value":"Visual: List Memory Layout\n\nPython List 'numbers':          Objects in Heap Memory:\n┌─────────────────┐            \n│  list header    │            ┌─────────────────┐\n│  size: 3        │            │ int object      │\n│  capacity: 4    │            │ type: int       │\n├─────────────────┤            │ refcount: 1     │\n│  ref to 100 ────┼──────────> │ value: 100      │\n├─────────────────┤            └─────────────────┘\n│  ref to 200 ────┼──────────> ┌─────────────────┐\n├─────────────────┤            │ int object      │\n│  ref to 300 ────┼──────────> │ value: 200      │\n├─────────────────┤            └─────────────────┘\n│  (unused slot)  │            ┌─────────────────┐\n└─────────────────┘            │ int object      │\n                               │ value: 300      │\n                               └─────────────────┘\n\nKey Insights:\n- List stores pointers, not values\n- Each integer is a full Python object (28 bytes!)\n- List overallocates (capacity > size) for growth\n- This is why NumPy arrays are more efficient","position":{"start":{"line":130,"column":1},"end":{"line":155,"column":1}},"key":"eBTsGXquOJ"},{"type":"heading","depth":3,"position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"List Operations: Performance Characteristics","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"Q0cqDMf2iX"}],"identifier":"list-operations-performance-characteristics","label":"List Operations: Performance Characteristics","html_id":"list-operations-performance-characteristics","implicit":true,"key":"pemnh15XaD"},{"type":"paragraph","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"children":[{"type":"text","value":"Different list operations have vastly different costs:","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"key":"iDdhHwBWMr"}],"key":"EvgLFILv3E"},{"type":"code","lang":"python","value":"In [33]: def demonstrate_list_performance():\n   ...:     \"\"\"Show why operation location matters.\"\"\"\n   ...:     import time\n   ...:     \n   ...:     test_list = list(range(100_000))\n   ...:     \n   ...:     # Fast O(1): Operations at the END\n   ...:     start = time.perf_counter()\n   ...:     test_list.append(999)\n   ...:     test_list.pop()\n   ...:     end_time = time.perf_counter() - start\n   ...:     \n   ...:     # Slow O(n): Operations at the BEGINNING\n   ...:     start = time.perf_counter()\n   ...:     test_list.insert(0, 999)\n   ...:     test_list.pop(0)\n   ...:     begin_time = time.perf_counter() - start\n   ...:     \n   ...:     print(f\"Operations at end:   {end_time*1e6:.2f} µs\")\n   ...:     print(f\"Operations at start: {begin_time*1e6:.2f} µs\")\n   ...:     print(f\"Beginning is {begin_time/end_time:.0f}x slower!\")\n\nIn [34]: demonstrate_list_performance()\nOperations at end:   0.75 µs\nOperations at start: 524.32 µs\nBeginning is 699x slower!","position":{"start":{"line":161,"column":1},"end":{"line":188,"column":1}},"key":"Df1ZWPjTCq"},{"type":"paragraph","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"text","value":"Why such a huge difference? Operations at the beginning require shifting all elements:","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"key":"FQXF9IuA5s"}],"key":"XHNIalXoCA"},{"type":"code","lang":"","value":"Visual: Why insert(0, x) is O(n)\n\nBefore insert(0, 'X'):\n[0][1][2][3][4][5]\n\nStep 1: Shift everything right\n[_][0][1][2][3][4][5]\n\nStep 2: Insert new element\n[X][0][1][2][3][4][5]\n\nWith a million elements, this means moving a million references!","position":{"start":{"line":192,"column":1},"end":{"line":205,"column":1}},"key":"R7sW4r80ZG"},{"type":"heading","depth":3,"position":{"start":{"line":207,"column":1},"end":{"line":207,"column":1}},"children":[{"type":"text","value":"📊 ","position":{"start":{"line":207,"column":1},"end":{"line":207,"column":1}},"key":"w9C8Jc49C5"},{"type":"strong","position":{"start":{"line":207,"column":1},"end":{"line":207,"column":1}},"children":[{"type":"text","value":"Performance Profile: List Growth Strategy","position":{"start":{"line":207,"column":1},"end":{"line":207,"column":1}},"key":"Gv0VNzsxLH"}],"key":"AFA0C4tlpy"}],"identifier":"id-performance-profile-list-growth-strategy","label":"📊 Performance Profile: List Growth Strategy","html_id":"id-performance-profile-list-growth-strategy","implicit":true,"key":"IG6R0Ly553"},{"type":"paragraph","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"children":[{"type":"text","value":"Python lists use dynamic arrays that grow by ~12.5% when full:","position":{"start":{"line":209,"column":1},"end":{"line":209,"column":1}},"key":"MIOYU1LyZQ"}],"key":"tR8g0P9P5X"},{"type":"code","lang":"python","value":"In [35]: def observe_list_growth():\n   ...:     \"\"\"Watch Python's list growth strategy.\"\"\"\n   ...:     data = []\n   ...:     sizes = []\n   ...:     capacities = []\n   ...:     \n   ...:     for i in range(20):\n   ...:         old_size = sys.getsizeof(data)\n   ...:         data.append(i)\n   ...:         new_size = sys.getsizeof(data)\n   ...:         \n   ...:         if new_size != old_size:\n   ...:             # Calculate capacity from size\n   ...:             capacity = (new_size - sys.getsizeof([])) // 8 + 1\n   ...:             sizes.append(len(data))\n   ...:             capacities.append(capacity)\n   ...:     \n   ...:     print(\"Length → Capacity (overallocation)\")\n   ...:     for s, c in zip(sizes, capacities):\n   ...:         overalloc = (c - s) / s * 100 if s > 0 else 0\n   ...:         print(f\"{s:4d} → {c:4d} ({overalloc:5.1f}% extra)\")\n\nIn [36]: observe_list_growth()\nLength → Capacity (overallocation)\n   1 →    4 (300.0% extra)\n   5 →    8 ( 60.0% extra)\n   9 →   16 ( 77.8% extra)\n  17 →   24 ( 41.2% extra)","position":{"start":{"line":211,"column":1},"end":{"line":240,"column":1}},"key":"fOtb5O1Wx8"},{"type":"paragraph","position":{"start":{"line":242,"column":1},"end":{"line":242,"column":1}},"children":[{"type":"text","value":"This overallocation strategy makes append() ","position":{"start":{"line":242,"column":1},"end":{"line":242,"column":1}},"key":"CKMvqbgWDK"},{"type":"emphasis","position":{"start":{"line":242,"column":1},"end":{"line":242,"column":1}},"children":[{"type":"text","value":"amortized","position":{"start":{"line":242,"column":1},"end":{"line":242,"column":1}},"key":"ZPsc8QWWfB"}],"key":"gERw0raRwi"},{"type":"text","value":" O(1) — usually fast, occasionally slow when reallocation happens.","position":{"start":{"line":242,"column":1},"end":{"line":242,"column":1}},"key":"TdUclraYE4"}],"key":"nDpK6mmgZd"},{"type":"heading","depth":3,"position":{"start":{"line":244,"column":1},"end":{"line":244,"column":1}},"children":[{"type":"text","value":"List Patterns for Scientific Computing","position":{"start":{"line":244,"column":1},"end":{"line":244,"column":1}},"key":"fkVrXImrM9"}],"identifier":"list-patterns-for-scientific-computing","label":"List Patterns for Scientific Computing","html_id":"list-patterns-for-scientific-computing","implicit":true,"key":"zFLgUPwQa9"},{"type":"code","lang":"python","value":"# Pattern 1: Preallocate for known size\nn_particles = 10000\npositions = [None] * n_particles  # Preallocate\nfor i in range(n_particles):\n    positions[i] = compute_position(i)  # Fill in\n\n# Pattern 2: Collect results conditionally\nvalid_measurements = []\nfor measurement in sensor_data:\n    if measurement.quality > threshold:\n        valid_measurements.append(measurement)\n\n# Pattern 3: In-place modification\nfor i in range(len(data)):\n    data[i] *= scaling_factor  # Modifies existing list","position":{"start":{"line":246,"column":1},"end":{"line":262,"column":1}},"key":"gCgocP7dX6"},{"type":"heading","depth":2,"position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"children":[{"type":"text","value":"4.3 Tuples: The Power of Immutability","position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"key":"RtG8zz2SUX"}],"identifier":"id-4-3-tuples-the-power-of-immutability","label":"4.3 Tuples: The Power of Immutability","html_id":"id-4-3-tuples-the-power-of-immutability","implicit":true,"key":"uksFzIR8kS"},{"type":"paragraph","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"children":[{"type":"text","value":"Tuples are immutable sequences. This restriction provides powerful guarantees that prevent entire categories of bugs.","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"key":"qo8GR3S5hM"}],"key":"V7JYmyTxpm"},{"type":"heading","depth":3,"position":{"start":{"line":268,"column":1},"end":{"line":268,"column":1}},"children":[{"type":"text","value":"Understanding Immutability’s Value","position":{"start":{"line":268,"column":1},"end":{"line":268,"column":1}},"key":"D3Ld2aky2a"}],"identifier":"understanding-immutabilitys-value","label":"Understanding Immutability’s Value","html_id":"understanding-immutabilitys-value","implicit":true,"key":"RbR0snaP1k"},{"type":"code","lang":"python","value":"In [40]: # Lists are mutable - source of bugs\nIn [41]: def buggy_function(data, params):\n   ...:     \"\"\"This function accidentally modifies params!\"\"\"\n   ...:     params.append(data.mean())  # Oops, modifying input!\n   ...:     return sum(params)\n\nIn [42]: parameters = [1.0, 2.0, 3.0]\nIn [43]: result = buggy_function(np.array([4, 5, 6]), parameters)\nIn [44]: parameters\nOut[44]: [1.0, 2.0, 3.0, 5.0]  # Changed unexpectedly!\n\nIn [45]: # Tuples prevent this\nIn [46]: def safe_function(data, params):\n   ...:     \"\"\"Can't accidentally modify tuple params.\"\"\"\n   ...:     # params.append(data.mean())  # Would raise AttributeError\n   ...:     return sum(params) + data.mean()\n\nIn [47]: parameters = (1.0, 2.0, 3.0)  # Tuple\nIn [48]: result = safe_function(np.array([4, 5, 6]), parameters)\nIn [49]: parameters\nOut[49]: (1.0, 2.0, 3.0)  # Unchanged, guaranteed!","position":{"start":{"line":270,"column":1},"end":{"line":292,"column":1}},"key":"J1WtvWifwC"},{"type":"heading","depth":3,"position":{"start":{"line":294,"column":1},"end":{"line":294,"column":1}},"children":[{"type":"text","value":"Tuples as Dictionary Keys","position":{"start":{"line":294,"column":1},"end":{"line":294,"column":1}},"key":"geZoFz65FN"}],"identifier":"tuples-as-dictionary-keys","label":"Tuples as Dictionary Keys","html_id":"tuples-as-dictionary-keys","implicit":true,"key":"us27JbZbT1"},{"type":"paragraph","position":{"start":{"line":296,"column":1},"end":{"line":296,"column":1}},"children":[{"type":"text","value":"Immutability enables hashability, allowing tuples as dictionary keys:","position":{"start":{"line":296,"column":1},"end":{"line":296,"column":1}},"key":"vYwbxuYu87"}],"key":"mfSUhpjzEn"},{"type":"code","lang":"python","value":"In [50]: # Cache expensive calculations using position as key\nIn [51]: potential_cache = {}\n\nIn [52]: def gravitational_potential(pos, mass, use_cache=True):\n   ...:     \"\"\"Calculate potential, with caching.\"\"\"\n   ...:     if use_cache and pos in potential_cache:\n   ...:         return potential_cache[pos]\n   ...:     \n   ...:     # Expensive calculation\n   ...:     x, y, z = pos\n   ...:     r = (x**2 + y**2 + z**2) ** 0.5\n   ...:     G = 6.67e-8\n   ...:     potential = -G * mass / r\n   ...:     \n   ...:     if use_cache:\n   ...:         potential_cache[pos] = potential\n   ...:     \n   ...:     return potential\n\nIn [53]: # Must use tuple for position\nIn [54]: pos1 = (1e10, 0, 0)  # Tuple - hashable\nIn [55]: V1 = gravitational_potential(pos1, 1e30)  # Computed\n\nIn [56]: pos2 = (1e10, 0, 0)  # Same position\nIn [57]: V2 = gravitational_potential(pos2, 1e30)  # From cache!\n\nIn [58]: # Lists can't be keys\nIn [59]: pos_list = [1e10, 0, 0]\nIn [60]: # potential_cache[pos_list] = V1  # TypeError!","position":{"start":{"line":298,"column":1},"end":{"line":328,"column":1}},"key":"iLIu2ruatg"},{"type":"heading","depth":3,"position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"children":[{"type":"text","value":"Named Tuples: Self-Documenting Science Code","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"key":"W2fGKs8CBi"}],"identifier":"named-tuples-self-documenting-science-code","label":"Named Tuples: Self-Documenting Science Code","html_id":"named-tuples-self-documenting-science-code","implicit":true,"key":"tLgx2jH6kH"},{"type":"code","lang":"python","value":"In [61]: from collections import namedtuple\n\nIn [62]: # Define structure with meaningful names\nIn [63]: Star = namedtuple('Star', \n   ...:     ['mass', 'radius', 'temperature', 'luminosity'])\n\nIn [64]: # Create instances with clear meaning\nIn [65]: sun = Star(\n   ...:     mass=1.989e33,        # grams\n   ...:     radius=6.96e10,       # cm\n   ...:     temperature=5778,     # Kelvin\n   ...:     luminosity=3.828e33   # erg/s\n   ...: )\n\nIn [66]: # Clear, self-documenting access\nIn [67]: print(f\"Solar mass: {sun.mass:.2e} g\")\nIn [68]: print(f\"Solar radius: {sun.radius:.2e} cm\")\n\nIn [69]: # Still works as regular tuple\nIn [70]: M, R, T, L = sun\nIn [71]: density = M / ((4/3) * 3.14159 * R**3)","position":{"start":{"line":332,"column":1},"end":{"line":354,"column":1}},"key":"gYS1v6TZLy"},{"type":"heading","depth":3,"position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"children":[{"type":"text","value":"🐛 ","position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"key":"d5NKTe4FeH"},{"type":"strong","position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"key":"Mn2WH415d5"}],"key":"b9xgGhITFx"}],"identifier":"id-debug-this","label":"🐛 Debug This!","html_id":"id-debug-this","implicit":true,"key":"RR7UABy9CY"},{"type":"paragraph","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"children":[{"type":"text","value":"This code has a subtle bug. Can you find it?","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"NcK35XTvDS"}],"key":"HbK7w4IPkn"},{"type":"code","lang":"python","value":"def process_coordinates(coords_list):\n    \"\"\"Process a list of coordinate tuples.\"\"\"\n    \n    results = []\n    for coords in coords_list:\n        # Try to normalize coordinates\n        coords[0] = coords[0] / 1000  # Convert to km\n        coords[1] = coords[1] / 1000\n        coords[2] = coords[2] / 1000\n        results.append(coords)\n    \n    return results\n\n# Test\npositions = [(1000, 2000, 3000), (4000, 5000, 6000)]\nnormalized = process_coordinates(positions)","position":{"start":{"line":360,"column":1},"end":{"line":377,"column":1}},"key":"bnByXNDa8Y"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Bug and Solution","key":"UsDVWxBEbb"}],"key":"ZYwSrUnrbO"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bug","key":"zDrucc3PPV"}],"key":"sPUUr0WBaq"},{"type":"text","value":": Tuples are immutable! Can’t modify coords[0].","key":"Ub15xgWMfh"}],"key":"wSruvQwgX6"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution 1","key":"GqYEQ86ZlW"}],"key":"KC4IL8kkWS"},{"type":"text","value":": Create new tuples","key":"fUVoHSOIq3"}],"key":"EWBYOm4Kbs"},{"type":"code","lang":"python","meta":null,"value":"def process_coordinates(coords_list):\n    results = []\n    for coords in coords_list:\n        normalized = (\n            coords[0] / 1000,\n            coords[1] / 1000,\n            coords[2] / 1000\n        )\n        results.append(normalized)\n    return results","key":"DUh2uSkrGT"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solution 2","key":"Q2ryITZ4QS"}],"key":"bTSZdml8vp"},{"type":"text","value":": Use list comprehension","key":"PhOSB6IPRT"}],"key":"vPaWbHHOCF"},{"type":"code","lang":"python","meta":null,"value":"def process_coordinates(coords_list):\n    return [(x/1000, y/1000, z/1000) for x, y, z in coords_list]","key":"DOR8gVDN8G"}],"key":"MSzQFgrElm"},{"type":"heading","depth":2,"position":{"start":{"line":406,"column":1},"end":{"line":406,"column":1}},"children":[{"type":"text","value":"4.4 The Mutable vs Immutable Distinction","position":{"start":{"line":406,"column":1},"end":{"line":406,"column":1}},"key":"eg7mkqZbnE"}],"identifier":"id-4-4-the-mutable-vs-immutable-distinction","label":"4.4 The Mutable vs Immutable Distinction","html_id":"id-4-4-the-mutable-vs-immutable-distinction","implicit":true,"key":"SZWKUWjKcO"},{"type":"paragraph","position":{"start":{"line":408,"column":1},"end":{"line":408,"column":1}},"children":[{"type":"text","value":"Understanding mutability is crucial for avoiding bugs and preparing for functional programming paradigms (essential for JAX).","position":{"start":{"line":408,"column":1},"end":{"line":408,"column":1}},"key":"znwK4THXql"}],"key":"hDXoPjYWTA"},{"type":"heading","depth":3,"position":{"start":{"line":410,"column":1},"end":{"line":410,"column":1}},"children":[{"type":"text","value":"Python’s Reference Model","position":{"start":{"line":410,"column":1},"end":{"line":410,"column":1}},"key":"wf9n5FweZL"}],"identifier":"pythons-reference-model","label":"Python’s Reference Model","html_id":"pythons-reference-model","implicit":true,"key":"QhcJgZXbzY"},{"type":"code","lang":"python","value":"In [72]: # Visualize Python's reference model\nIn [73]: import id\n\nIn [74]: # Immutable: creates new objects\nIn [75]: a = 1000\nIn [76]: b = a\nIn [77]: print(f\"Initially: a={a}, b={b}, same object: {a is b}\")\n\nIn [78]: b = 2000  # Creates NEW object\nIn [79]: print(f\"After b=2000: a={a}, b={b}, same object: {a is b}\")\n\nInitially: a=1000, b=1000, same object: True\nAfter b=2000: a=1000, b=2000, same object: False\n\nIn [80]: # Mutable: modifies existing object\nIn [81]: list1 = [1, 2, 3]\nIn [82]: list2 = list1  # Both refer to SAME list\nIn [83]: print(f\"Initially: same object: {list1 is list2}\")\n\nIn [84]: list2.append(4)  # Modifies THE list\nIn [85]: print(f\"After append: list1={list1}, list2={list2}\")\n\nInitially: same object: True\nAfter append: list1=[1, 2, 3, 4], list2=[1, 2, 3, 4]","position":{"start":{"line":412,"column":1},"end":{"line":437,"column":1}},"key":"s1BxhdPzNR"},{"type":"paragraph","position":{"start":{"line":439,"column":1},"end":{"line":439,"column":1}},"children":[{"type":"text","value":"Visual representation:","position":{"start":{"line":439,"column":1},"end":{"line":439,"column":1}},"key":"JXe9KUm1qg"}],"key":"z9BKHXy8Ge"},{"type":"code","lang":"","value":"Immutable (after b = 2000):        Mutable (after append):\na ──→ [1000]                       list1 ──→ [1,2,3,4]\nb ──→ [2000]                       list2 ──┘\n\nSeparate objects                   Same object!","position":{"start":{"line":441,"column":1},"end":{"line":447,"column":1}},"key":"hwJRDTYnqU"},{"type":"heading","depth":3,"position":{"start":{"line":449,"column":1},"end":{"line":449,"column":1}},"children":[{"type":"text","value":"The Classic Mutable Default Argument Bug","position":{"start":{"line":449,"column":1},"end":{"line":449,"column":1}},"key":"S34z7UWieR"}],"identifier":"the-classic-mutable-default-argument-bug","label":"The Classic Mutable Default Argument Bug","html_id":"the-classic-mutable-default-argument-bug","implicit":true,"key":"lvlXwSLwLJ"},{"type":"code","lang":"python","value":"In [86]: # THE BUG: Mutable default created ONCE\nIn [87]: def accumulate_data_buggy(value, data=[]):\n   ...:     \"\"\"BUGGY: Default list created once at definition!\"\"\"\n   ...:     data.append(value)\n   ...:     return data\n\nIn [88]: result1 = accumulate_data_buggy(10)\nIn [89]: print(f\"First call: {result1}\")\n\nIn [90]: result2 = accumulate_data_buggy(20)\nIn [91]: print(f\"Second call: {result2}\")  # Contains both!\n\nIn [92]: result1 is result2\nOut[92]: True  # Same list object!\n\nFirst call: [10]\nSecond call: [10, 20]\n\nIn [93]: # THE FIX: Use None sentinel\nIn [94]: def accumulate_data_fixed(value, data=None):\n   ...:     \"\"\"Safe version using None default.\"\"\"\n   ...:     if data is None:\n   ...:         data = []  # Fresh list each call\n   ...:     data.append(value)\n   ...:     return data","position":{"start":{"line":451,"column":1},"end":{"line":477,"column":1}},"key":"AGBxF3i0vo"},{"type":"heading","depth":3,"position":{"start":{"line":479,"column":1},"end":{"line":479,"column":1}},"children":[{"type":"text","value":"📈 ","position":{"start":{"line":479,"column":1},"end":{"line":479,"column":1}},"key":"TwNfM4Id6B"},{"type":"strong","position":{"start":{"line":479,"column":1},"end":{"line":479,"column":1}},"children":[{"type":"text","value":"Algorithm Archaeology: Why Mutable Defaults Exist","position":{"start":{"line":479,"column":1},"end":{"line":479,"column":1}},"key":"zcs0YvWKoM"}],"key":"gdDPxkmx4Z"}],"identifier":"id-algorithm-archaeology-why-mutable-defaults-exist","label":"📈 Algorithm Archaeology: Why Mutable Defaults Exist","html_id":"id-algorithm-archaeology-why-mutable-defaults-exist","implicit":true,"key":"KVMeF3DfTu"},{"type":"paragraph","position":{"start":{"line":481,"column":1},"end":{"line":481,"column":1}},"children":[{"type":"text","value":"Python evaluates default arguments once when the function is defined, not each time it’s called. This was a design choice for efficiency — evaluating defaults every call would be expensive.","position":{"start":{"line":481,"column":1},"end":{"line":481,"column":1}},"key":"O1CgAqqFim"}],"key":"kfI4Fujen6"},{"type":"paragraph","position":{"start":{"line":483,"column":1},"end":{"line":483,"column":1}},"children":[{"type":"text","value":"This decision made sense in 1991 when Python was created, but it’s been a source of bugs ever since. Modern languages like Rust and Swift evaluate defaults at call time. Python keeps this behavior for backward compatibility.","position":{"start":{"line":483,"column":1},"end":{"line":483,"column":1}},"key":"aGE7zmgC40"}],"key":"SSAoBbIZ6O"},{"type":"paragraph","position":{"start":{"line":485,"column":1},"end":{"line":485,"column":1}},"children":[{"type":"text","value":"The mutable default bug is so common that linters specifically check for it. Always use the None sentinel pattern for mutable defaults.","position":{"start":{"line":485,"column":1},"end":{"line":485,"column":1}},"key":"LXTkIvyTsT"}],"key":"bdHWsZU70t"},{"type":"heading","depth":3,"position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"children":[{"type":"text","value":"Shallow vs Deep Copies: Critical for Scientific Data","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"W77MyosMsM"}],"identifier":"shallow-vs-deep-copies-critical-for-scientific-data","label":"Shallow vs Deep Copies: Critical for Scientific Data","html_id":"shallow-vs-deep-copies-critical-for-scientific-data","implicit":true,"key":"Iz8Fe8AUDK"},{"type":"code","lang":"python","value":"In [95]: import copy\n\nIn [96]: # Original nested structure - like a 2D grid\nIn [97]: grid = [[1, 2], [3, 4], [5, 6]]\n\nIn [98]: # Shallow copy - new outer list, same inner lists\nIn [99]: shallow = grid.copy()\n\nIn [100]: # Modify through shallow copy\nIn [101]: shallow[0][0] = 999\n\nIn [102]: print(f\"Original: {grid}\")\nIn [103]: print(f\"Shallow:  {shallow}\")\n\nOriginal: [[999, 2], [3, 4], [5, 6]]  # Changed!\nShallow:  [[999, 2], [3, 4], [5, 6]]","position":{"start":{"line":489,"column":1},"end":{"line":506,"column":1}},"key":"U7JAaCtGXz"},{"type":"paragraph","position":{"start":{"line":508,"column":1},"end":{"line":508,"column":1}},"children":[{"type":"text","value":"Memory visualization:","position":{"start":{"line":508,"column":1},"end":{"line":508,"column":1}},"key":"axvBp4NBMp"}],"key":"M7bOOAxc3D"},{"type":"code","lang":"","value":"Shallow Copy:\ngrid ──→ [ ref1, ref2, ref3 ] ──→ [1,2] [3,4] [5,6]\n                                     ↑     ↑     ↑\nshallow → [ ref1, ref2, ref3 ] ─────┘     │     │\n          (new outer list, same inner lists!)","position":{"start":{"line":510,"column":1},"end":{"line":516,"column":1}},"key":"kLN6Of6iCW"},{"type":"paragraph","position":{"start":{"line":518,"column":1},"end":{"line":518,"column":1}},"children":[{"type":"text","value":"Deep copy solves this:","position":{"start":{"line":518,"column":1},"end":{"line":518,"column":1}},"key":"uWP5WoY0Lf"}],"key":"K2iXEuH5lM"},{"type":"code","lang":"python","value":"In [104]: # Reset\nIn [105]: grid = [[1, 2], [3, 4], [5, 6]]\n\nIn [106]: # Deep copy - all new objects\nIn [107]: deep = copy.deepcopy(grid)\n\nIn [108]: deep[0][0] = 999\nIn [109]: print(f\"Original: {grid}\")\nIn [110]: print(f\"Deep:     {deep}\")\n\nOriginal: [[1, 2], [3, 4], [5, 6]]  # Unchanged!\nDeep:     [[999, 2], [3, 4], [5, 6]]","position":{"start":{"line":520,"column":1},"end":{"line":533,"column":1}},"key":"F83Fx0odmL"},{"type":"heading","depth":3,"position":{"start":{"line":535,"column":1},"end":{"line":535,"column":1}},"children":[{"type":"text","value":"Defensive Copying in Scientific Code","position":{"start":{"line":535,"column":1},"end":{"line":535,"column":1}},"key":"d8xkV9VBVo"}],"identifier":"defensive-copying-in-scientific-code","label":"Defensive Copying in Scientific Code","html_id":"defensive-copying-in-scientific-code","implicit":true,"key":"JmTTh3Y01e"},{"type":"code","lang":"python","value":"def safe_normalize(data, reference=None):\n    \"\"\"\n    Normalize data without modifying inputs.\n    Demonstrates defensive copying patterns.\n    \"\"\"\n    # Defensive copy of mutable input\n    working_data = copy.deepcopy(data)\n    \n    # Safe to modify working_data now\n    if reference is None:\n        reference = max(max(row) for row in working_data)\n    \n    for i in range(len(working_data)):\n        for j in range(len(working_data[i])):\n            working_data[i][j] /= reference\n    \n    return working_data\n\n# Original data unchanged\noriginal = [[100, 200], [300, 400]]\nnormalized = safe_normalize(original)\nprint(f\"Original unchanged: {original}\")\nprint(f\"Normalized: {normalized}\")","position":{"start":{"line":537,"column":1},"end":{"line":561,"column":1}},"key":"w07J0udGXa"},{"type":"heading","depth":2,"position":{"start":{"line":563,"column":1},"end":{"line":563,"column":1}},"children":[{"type":"text","value":"4.5 Dictionaries: O(1) Lookup via Hash Tables","position":{"start":{"line":563,"column":1},"end":{"line":563,"column":1}},"key":"zwseVFqZF9"}],"identifier":"id-4-5-dictionaries-o-1-lookup-via-hash-tables","label":"4.5 Dictionaries: O(1) Lookup via Hash Tables","html_id":"id-4-5-dictionaries-o-1-lookup-via-hash-tables","implicit":true,"key":"UiizSaAoDJ"},{"type":"paragraph","position":{"start":{"line":565,"column":1},"end":{"line":565,"column":1}},"children":[{"type":"text","value":"Dictionaries provide near-instantaneous lookup regardless of size, using a hash table implementation.","position":{"start":{"line":565,"column":1},"end":{"line":565,"column":1}},"key":"GB4KYyQTPN"}],"key":"KNfCRZJif8"},{"type":"heading","depth":3,"position":{"start":{"line":567,"column":1},"end":{"line":567,"column":1}},"children":[{"type":"text","value":"Understanding Hash Tables (Simplified)","position":{"start":{"line":567,"column":1},"end":{"line":567,"column":1}},"key":"w6WbwVIbOO"}],"identifier":"understanding-hash-tables-simplified","label":"Understanding Hash Tables (Simplified)","html_id":"understanding-hash-tables-simplified","implicit":true,"key":"fwlwtDZLgT"},{"type":"code","lang":"python","value":"# Conceptual demonstration of hashing\ndef simple_hash_demo():\n    \"\"\"Show how hash tables enable O(1) lookup.\"\"\"\n    \n    # Python's hash() converts objects to integers\n    keys = [\"mass\", \"radius\", \"temperature\"]\n    \n    for key in keys:\n        hash_value = hash(key)\n        # In real hash table: index = hash_value % table_size\n        index = abs(hash_value) % 10\n        print(f\"'{key}' → hash: {hash_value:12d} → bucket: {index}\")\n    \n    print(\"\\nThis is why lookup is O(1):\")\n    print(\"1. Hash the key (fast)\")\n    print(\"2. Go directly to bucket (fast)\")\n    print(\"3. Check if key matches (fast)\")\n\nsimple_hash_demo()","position":{"start":{"line":569,"column":1},"end":{"line":589,"column":1}},"key":"bH1AQSIYGy"},{"type":"heading","depth":3,"position":{"start":{"line":591,"column":1},"end":{"line":591,"column":1}},"children":[{"type":"text","value":"Dictionary Performance in Practice","position":{"start":{"line":591,"column":1},"end":{"line":591,"column":1}},"key":"YcqQtBaE2Q"}],"identifier":"dictionary-performance-in-practice","label":"Dictionary Performance in Practice","html_id":"dictionary-performance-in-practice","implicit":true,"key":"alXDMPN7nf"},{"type":"code","lang":"python","value":"In [120]: # Compare list search vs dict lookup\nIn [121]: n = 1_000_000\n\nIn [122]: # List of tuples (slow search)\nIn [123]: star_list = [(f\"HD{i}\", random.random()) \n   ...:                for i in range(n)]\n\nIn [124]: # Dictionary (fast lookup)\nIn [125]: star_dict = {f\"HD{i}\": random.random() \n   ...:                for i in range(n)}\n\nIn [126]: # Search for specific star\nIn [127]: target = \"HD500000\"\n\nIn [128]: # List search - O(n)\nIn [129]: %timeit next((mag for name, mag in star_list if name == target))\n24.3 ms ± 312 µs per loop\n\nIn [130]: # Dict lookup - O(1)\nIn [131]: %timeit star_dict[target]\n41.2 ns ± 0.8 ns per loop\n\nDict is 590,000x faster!","position":{"start":{"line":593,"column":1},"end":{"line":617,"column":1}},"key":"xjZVPEHRL0"},{"type":"heading","depth":3,"position":{"start":{"line":619,"column":1},"end":{"line":619,"column":1}},"children":[{"type":"text","value":"Dictionary Patterns for Scientific Computing","position":{"start":{"line":619,"column":1},"end":{"line":619,"column":1}},"key":"oSY3Ci4Kt9"}],"identifier":"dictionary-patterns-for-scientific-computing","label":"Dictionary Patterns for Scientific Computing","html_id":"dictionary-patterns-for-scientific-computing","implicit":true,"key":"aDcL8M6DhH"},{"type":"code","lang":"python","value":"# Pattern 1: Configuration management\nsimulation_params = {\n    'n_particles': 10000,\n    'timestep': 1e-4,\n    'total_time': 100.0,\n    'G': 6.67e-8,\n    'softening': 1e-6,\n    'output_freq': 100\n}\n\n# Safe access with defaults\ndt = simulation_params.get('timestep', 1e-3)\nn = simulation_params.get('n_particles', 1000)\n\n# Pattern 2: Caching expensive computations\nfrom functools import lru_cache\n\n@lru_cache(maxsize=1000)\ndef expensive_calculation(n):\n    \"\"\"Automatically caches last 1000 results.\"\"\"\n    result = sum(i**2 for i in range(n))\n    return result\n\n# Pattern 3: Grouping data\nfrom collections import defaultdict\n\ndef group_by_type(observations):\n    \"\"\"Group observations by object type.\"\"\"\n    groups = defaultdict(list)\n    \n    for obs in observations:\n        groups[obs['type']].append(obs)\n    \n    return dict(groups)\n\n# Pattern 4: Counting occurrences\nfrom collections import Counter\n\ndef analyze_spectral_types(stars):\n    \"\"\"Count distribution of spectral types.\"\"\"\n    types = [star.spectral_type for star in stars]\n    return Counter(types)","position":{"start":{"line":621,"column":1},"end":{"line":664,"column":1}},"key":"HAGJeKGCMO"},{"type":"heading","depth":3,"position":{"start":{"line":666,"column":1},"end":{"line":666,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":666,"column":1},"end":{"line":666,"column":1}},"key":"ghfX8YjOkk"},{"type":"strong","position":{"start":{"line":666,"column":1},"end":{"line":666,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Caching Pattern","position":{"start":{"line":666,"column":1},"end":{"line":666,"column":1}},"key":"CdCwe3jh8M"}],"key":"HptUj0NMhO"}],"identifier":"id-computational-thinking-box-the-caching-pattern","label":"📦 Computational Thinking Box: The Caching Pattern","html_id":"id-computational-thinking-box-the-caching-pattern","implicit":true,"key":"ext39nZpfz"},{"type":"code","lang":"","value":"UNIVERSAL PATTERN: Trading Memory for Computation\n\ncache = {}\n\nFUNCTION compute_expensive(input):\n    IF input IN cache:\n        RETURN cache[input]\n    \n    result = expensive_calculation(input)\n    cache[input] = result\n    RETURN result\n\nThis pattern appears everywhere:\n- Opacity tables in radiative transfer\n- Basis function evaluation in spectral methods\n- Distance matrices in clustering\n- Factorial/combinatorial calculations\n- Interpolation table lookups\n\nPython's @lru_cache decorator implements this pattern automatically.","position":{"start":{"line":668,"column":1},"end":{"line":689,"column":1}},"key":"co4JRnmYsj"},{"type":"heading","depth":2,"position":{"start":{"line":691,"column":1},"end":{"line":691,"column":1}},"children":[{"type":"text","value":"4.6 Sets: Mathematical Operations on Unique Elements","position":{"start":{"line":691,"column":1},"end":{"line":691,"column":1}},"key":"nxfOzJYhzn"}],"identifier":"id-4-6-sets-mathematical-operations-on-unique-elements","label":"4.6 Sets: Mathematical Operations on Unique Elements","html_id":"id-4-6-sets-mathematical-operations-on-unique-elements","implicit":true,"key":"LR0WsnOjsE"},{"type":"paragraph","position":{"start":{"line":693,"column":1},"end":{"line":693,"column":1}},"children":[{"type":"text","value":"Sets provide O(1) membership testing and elegant mathematical operations:","position":{"start":{"line":693,"column":1},"end":{"line":693,"column":1}},"key":"JzXUbSe7tb"}],"key":"dc50TaJtQY"},{"type":"code","lang":"python","value":"In [140]: # Catalog cross-matching example\nIn [141]: observed = {'HD209458', 'HD189733', 'WASP-12', 'HAT-P-7'}\nIn [142]: confirmed = {'HD209458', 'WASP-12', 'Kepler-7', 'WASP-43'}\n\nIn [143]: # Set operations\nIn [144]: both = observed & confirmed  # Intersection\nIn [145]: either = observed | confirmed  # Union\nIn [146]: only_observed = observed - confirmed  # Difference\nIn [147]: different = observed ^ confirmed  # Symmetric difference\n\nIn [148]: print(f\"Both catalogs: {both}\")\nIn [149]: print(f\"Only in observed: {only_observed}\")\n\nBoth catalogs: {'HD209458', 'WASP-12'}\nOnly in observed: {'HAT-P-7', 'HD189733'}","position":{"start":{"line":695,"column":1},"end":{"line":711,"column":1}},"key":"xrgANaBFey"},{"type":"heading","depth":3,"position":{"start":{"line":713,"column":1},"end":{"line":713,"column":1}},"children":[{"type":"text","value":"Set Performance for Membership Testing","position":{"start":{"line":713,"column":1},"end":{"line":713,"column":1}},"key":"yVnJ4I4pws"}],"identifier":"set-performance-for-membership-testing","label":"Set Performance for Membership Testing","html_id":"set-performance-for-membership-testing","implicit":true,"key":"VkhBd3g7KM"},{"type":"code","lang":"python","value":"In [150]: # Create large catalogs\nIn [151]: catalog_list = [f\"Object_{i}\" for i in range(1_000_000)]\nIn [152]: catalog_set = set(catalog_list)\n\nIn [153]: # Test membership for non-existent object\nIn [154]: %timeit \"Object_-1\" in catalog_list\n15.2 ms ± 89.3 µs per loop\n\nIn [155]: %timeit \"Object_-1\" in catalog_set\n42.3 ns ± 0.5 ns per loop\n\nSet is 359,000x faster!","position":{"start":{"line":715,"column":1},"end":{"line":728,"column":1}},"key":"nq4pH1ot7o"},{"type":"heading","depth":3,"position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"children":[{"type":"text","value":"Common Set Patterns","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"key":"nONCoMB3s7"}],"identifier":"common-set-patterns","label":"Common Set Patterns","html_id":"common-set-patterns","implicit":true,"key":"lHgsQy2wWJ"},{"type":"code","lang":"python","value":"# Pattern 1: Remove duplicates while preserving order\ndef remove_duplicates_ordered(items):\n    \"\"\"Remove duplicates, preserve order.\"\"\"\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n\n# Pattern 2: Find common elements efficiently\ndef find_common_objects(catalog1, catalog2, catalog3):\n    \"\"\"Find objects in all three catalogs.\"\"\"\n    return set(catalog1) & set(catalog2) & set(catalog3)\n\n# Pattern 3: Check if all elements are unique\ndef all_unique(items):\n    \"\"\"Check if all elements are unique.\"\"\"\n    return len(items) == len(set(items))","position":{"start":{"line":732,"column":1},"end":{"line":753,"column":1}},"key":"cUMFHhdgIQ"},{"type":"heading","depth":2,"position":{"start":{"line":755,"column":1},"end":{"line":755,"column":1}},"children":[{"type":"text","value":"4.7 Optional: Hash Table Implementation Details","position":{"start":{"line":755,"column":1},"end":{"line":755,"column":1}},"key":"jgDUkNCrd5"}],"identifier":"id-4-7-optional-hash-table-implementation-details","label":"4.7 Optional: Hash Table Implementation Details","html_id":"id-4-7-optional-hash-table-implementation-details","implicit":true,"key":"NzPE9jdkjG"},{"type":"paragraph","position":{"start":{"line":757,"column":1},"end":{"line":757,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":757,"column":1},"end":{"line":757,"column":1}},"children":[{"type":"text","value":"This section provides deeper understanding of dictionary/set performance for those interested.","position":{"start":{"line":757,"column":1},"end":{"line":757,"column":1}},"key":"NcjkoACeY9"}],"key":"Yv7NG7GNUc"}],"key":"Url1sNbAmM"},{"type":"heading","depth":3,"position":{"start":{"line":759,"column":1},"end":{"line":759,"column":1}},"children":[{"type":"text","value":"How Hash Tables Really Work","position":{"start":{"line":759,"column":1},"end":{"line":759,"column":1}},"key":"QJ68IGbHbZ"}],"identifier":"how-hash-tables-really-work","label":"How Hash Tables Really Work","html_id":"how-hash-tables-really-work","implicit":true,"key":"RxfA459x1Z"},{"type":"code","lang":"python","value":"class SimpleHashTable:\n    \"\"\"\n    Simplified hash table to understand dict/set internals.\n    Real Python dicts are much more sophisticated!\n    \"\"\"\n    \n    def __init__(self, size=8):\n        self.size = size\n        self.keys = [None] * size\n        self.values = [None] * size\n        self.count = 0\n    \n    def _hash(self, key):\n        \"\"\"Convert key to array index.\"\"\"\n        return hash(key) % self.size\n    \n    def put(self, key, value):\n        \"\"\"Insert key-value pair.\"\"\"\n        index = self._hash(key)\n        \n        # Linear probing for collision resolution\n        while self.keys[index] is not None:\n            if self.keys[index] == key:\n                # Update existing\n                self.values[index] = value\n                return\n            index = (index + 1) % self.size\n        \n        # Insert new\n        self.keys[index] = key\n        self.values[index] = value\n        self.count += 1\n        \n        # Resize if getting full\n        if self.count > self.size * 0.7:\n            self._resize()\n    \n    def get(self, key):\n        \"\"\"Retrieve value for key.\"\"\"\n        index = self._hash(key)\n        \n        while self.keys[index] is not None:\n            if self.keys[index] == key:\n                return self.values[index]\n            index = (index + 1) % self.size\n        \n        raise KeyError(key)\n    \n    def _resize(self):\n        \"\"\"Double the table size when getting full.\"\"\"\n        old_keys = self.keys\n        old_values = self.values\n        \n        self.size *= 2\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n        self.count = 0\n        \n        for key, value in zip(old_keys, old_values):\n            if key is not None:\n                self.put(key, value)","position":{"start":{"line":761,"column":1},"end":{"line":823,"column":1}},"key":"vi06aekKK7"},{"type":"heading","depth":3,"position":{"start":{"line":825,"column":1},"end":{"line":825,"column":1}},"children":[{"type":"text","value":"Why Hash Tables Can Degrade to O(n)","position":{"start":{"line":825,"column":1},"end":{"line":825,"column":1}},"key":"oKVCgIqisT"}],"identifier":"why-hash-tables-can-degrade-to-o-n","label":"Why Hash Tables Can Degrade to O(n)","html_id":"why-hash-tables-can-degrade-to-o-n","implicit":true,"key":"bn9TjJF4eB"},{"type":"code","lang":"python","value":"# Pathological case: hash collisions\nclass BadHash:\n    \"\"\"Object with terrible hash function.\"\"\"\n    def __init__(self, value):\n        self.value = value\n    \n    def __hash__(self):\n        return 42  # Always same hash!\n    \n    def __eq__(self, other):\n        return self.value == other.value\n\n# All objects hash to same bucket - O(n) performance!\nbad_dict = {BadHash(i): i for i in range(1000)}","position":{"start":{"line":827,"column":1},"end":{"line":842,"column":1}},"key":"kX0MaOPdkM"},{"type":"heading","depth":2,"position":{"start":{"line":844,"column":1},"end":{"line":844,"column":1}},"children":[{"type":"text","value":"4.8 Memory and Performance Considerations","position":{"start":{"line":844,"column":1},"end":{"line":844,"column":1}},"key":"tU9gijEWqb"}],"identifier":"id-4-8-memory-and-performance-considerations","label":"4.8 Memory and Performance Considerations","html_id":"id-4-8-memory-and-performance-considerations","implicit":true,"key":"HaY6816JQt"},{"type":"heading","depth":3,"position":{"start":{"line":846,"column":1},"end":{"line":846,"column":1}},"children":[{"type":"text","value":"Memory Profiling Your Data Structures","position":{"start":{"line":846,"column":1},"end":{"line":846,"column":1}},"key":"PdlHUuFl05"}],"identifier":"memory-profiling-your-data-structures","label":"Memory Profiling Your Data Structures","html_id":"memory-profiling-your-data-structures","implicit":true,"key":"kYZJIWrGKO"},{"type":"code","lang":"python","value":"In [160]: from memory_profiler import profile\n\nIn [161]: @profile\n   ...: def compare_memory_usage():\n   ...:     \"\"\"Compare memory usage of different structures.\"\"\"\n   ...:     n = 100_000\n   ...:     \n   ...:     # List of integers\n   ...:     int_list = list(range(n))\n   ...:     \n   ...:     # List of lists (2D)\n   ...:     nested_list = [[i, i+1] for i in range(n)]\n   ...:     \n   ...:     # Dictionary\n   ...:     int_dict = {i: i**2 for i in range(n)}\n   ...:     \n   ...:     # Set\n   ...:     int_set = set(range(n))\n   ...:     \n   ...:     # NumPy array (preview)\n   ...:     import numpy as np\n   ...:     np_array = np.arange(n)\n   ...:     \n   ...:     return int_list, nested_list, int_dict, int_set, np_array","position":{"start":{"line":848,"column":1},"end":{"line":873,"column":1}},"key":"lszuwoTHV9"},{"type":"heading","depth":3,"position":{"start":{"line":875,"column":1},"end":{"line":875,"column":1}},"children":[{"type":"text","value":"Cache Efficiency and Memory Layout","position":{"start":{"line":875,"column":1},"end":{"line":875,"column":1}},"key":"vrWF3g0qY4"}],"identifier":"cache-efficiency-and-memory-layout","label":"Cache Efficiency and Memory Layout","html_id":"cache-efficiency-and-memory-layout","implicit":true,"key":"CgDirCYwb0"},{"type":"code","lang":"python","value":"In [162]: def demonstrate_cache_effects():\n   ...:     \"\"\"Show why memory layout matters.\"\"\"\n   ...:     import time\n   ...:     \n   ...:     # Create 2D array (list of lists)\n   ...:     size = 1000\n   ...:     matrix = [[i*size + j for j in range(size)] \n   ...:               for i in range(size)]\n   ...:     \n   ...:     # Row-wise access (cache-friendly)\n   ...:     start = time.perf_counter()\n   ...:     total = 0\n   ...:     for i in range(size):\n   ...:         for j in range(size):\n   ...:             total += matrix[i][j]\n   ...:     row_time = time.perf_counter() - start\n   ...:     \n   ...:     # Column-wise access (cache-hostile)\n   ...:     start = time.perf_counter()\n   ...:     total = 0\n   ...:     for j in range(size):\n   ...:         for i in range(size):\n   ...:             total += matrix[i][j]\n   ...:     col_time = time.perf_counter() - start\n   ...:     \n   ...:     print(f\"Row-wise:    {row_time*1000:.1f} ms\")\n   ...:     print(f\"Column-wise: {col_time*1000:.1f} ms\")\n   ...:     print(f\"Column-wise is {col_time/row_time:.1f}x slower\")\n\nIn [163]: demonstrate_cache_effects()\nRow-wise:    42.3 ms\nColumn-wise: 78.9 ms\nColumn-wise is 1.9x slower","position":{"start":{"line":877,"column":1},"end":{"line":911,"column":1}},"key":"ZJyqHwRJ45"},{"type":"paragraph","position":{"start":{"line":913,"column":1},"end":{"line":913,"column":1}},"children":[{"type":"text","value":"Visual explanation:","position":{"start":{"line":913,"column":1},"end":{"line":913,"column":1}},"key":"RAQMwUPASp"}],"key":"BlnLol69bw"},{"type":"code","lang":"","value":"Cache-Friendly Access (Row-wise):\nMemory: [row0][row1][row2]...\nAccess: →→→→→→ (sequential, cache hits)\n\nCache-Hostile Access (Column-wise):\nMemory: [row0][row1][row2]...\nAccess: ↓  ↓  ↓ (jumping, cache misses)","position":{"start":{"line":915,"column":1},"end":{"line":923,"column":1}},"key":"SnHLQJENqE"},{"type":"heading","depth":2,"position":{"start":{"line":925,"column":1},"end":{"line":925,"column":1}},"children":[{"type":"text","value":"4.9 Choosing the Right Data Structure","position":{"start":{"line":925,"column":1},"end":{"line":925,"column":1}},"key":"YkaoMPhDTs"}],"identifier":"id-4-9-choosing-the-right-data-structure","label":"4.9 Choosing the Right Data Structure","html_id":"id-4-9-choosing-the-right-data-structure","implicit":true,"key":"qBqKA3TviE"},{"type":"heading","depth":3,"position":{"start":{"line":927,"column":1},"end":{"line":927,"column":1}},"children":[{"type":"text","value":"Decision Framework","position":{"start":{"line":927,"column":1},"end":{"line":927,"column":1}},"key":"mMfaLBH2Gb"}],"identifier":"decision-framework","label":"Decision Framework","html_id":"decision-framework","implicit":true,"key":"GL2RH3Noqr"},{"type":"code","lang":"python","value":"def choose_data_structure(requirements):\n    \"\"\"\n    Decision tree for data structure selection.\n    \n    This is the thought process you should follow.\n    \"\"\"\n    \n    if \"unique elements only\" in requirements:\n        if \"need ordering\" in requirements:\n            return \"sorted set or sorted(set(...))\"\n        else:\n            return \"set\"\n    \n    if \"key-value pairs\" in requirements:\n        if \"need ordering\" in requirements:\n            return \"OrderedDict or dict (Python 3.7+)\"\n        else:\n            return \"dict\"\n    \n    if \"immutable\" in requirements:\n        return \"tuple\"\n    \n    if \"fast membership test\" in requirements:\n        return \"set or dict\"\n    \n    if \"ordered sequence\" in requirements:\n        if \"fast random access\" in requirements:\n            return \"list or array\"\n        if \"fast insertion/deletion at ends\" in requirements:\n            return \"collections.deque\"\n    \n    return \"list (default choice)\"","position":{"start":{"line":929,"column":1},"end":{"line":962,"column":1}},"key":"KEhFxt5DKk"},{"type":"heading","depth":3,"position":{"start":{"line":964,"column":1},"end":{"line":964,"column":1}},"children":[{"type":"text","value":"Performance Comparison Table","position":{"start":{"line":964,"column":1},"end":{"line":964,"column":1}},"key":"drLyiXbKGV"}],"identifier":"performance-comparison-table","label":"Performance Comparison Table","html_id":"performance-comparison-table","implicit":true,"key":"UiAjE1CHF2"},{"type":"table","position":{"start":{"line":966,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"Operation","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"s5rKXP1Lin"}],"key":"i6jiTNcGnT"},{"type":"tableCell","header":true,"position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"List","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"bVzi5IukbG"}],"key":"uG93lOZDFq"},{"type":"tableCell","header":true,"position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"Tuple","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"zyDNJPELbc"}],"key":"UhUi046dTF"},{"type":"tableCell","header":true,"position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"Dict","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"LBzog4ET80"}],"key":"VVtmqk5LA7"},{"type":"tableCell","header":true,"position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"Set","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"Qe5HCSohEZ"}],"key":"fsVeSqHI0C"}],"key":"lgtspvbjsO"},{"type":"tableRow","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"text","value":"Access by index","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"t8D5079hgl"}],"key":"degNabUzod"},{"type":"tableCell","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"sj1ejN9Rss"}],"key":"ieLUj7FoZH"},{"type":"tableCell","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"kERrI99GYv"}],"key":"XtEEPuX9UE"},{"type":"tableCell","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"akdhvIjzYm"}],"key":"jiEpQex2rq"},{"type":"tableCell","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"QVQJvkYuNl"}],"key":"HP7QMGgF8a"}],"key":"BaSuTWWpdo"},{"type":"tableRow","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"children":[{"type":"text","value":"Search for value","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"key":"wrQbzKgLZz"}],"key":"QwquGaToKE"},{"type":"tableCell","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"key":"seLP5sbcpR"}],"key":"Dhs8EpN7eC"},{"type":"tableCell","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"key":"gDhYfkJoQ8"}],"key":"SRqbXYSQIi"},{"type":"tableCell","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"children":[{"type":"text","value":"O(1)*","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"key":"YigZm8w0cW"}],"key":"Fh6U7oSnER"},{"type":"tableCell","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":969,"column":1},"end":{"line":969,"column":1}},"key":"mk14ggrkND"}],"key":"gQHd1hWrCz"}],"key":"pw7BdVP8oJ"},{"type":"tableRow","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"children":[{"type":"text","value":"Add to end","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"key":"xVvJyLGE3f"}],"key":"q8l0Xqr7mb"},{"type":"tableCell","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"children":[{"type":"text","value":"O(1)†","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"key":"QiL73XJoNR"}],"key":"ElD9smZVCT"},{"type":"tableCell","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"key":"fYa9aypsru"}],"key":"O0ZadmRvx5"},{"type":"tableCell","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"children":[{"type":"text","value":"O(1)†","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"key":"YIDk9vapAw"}],"key":"CQXOBrCPVY"},{"type":"tableCell","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"children":[{"type":"text","value":"O(1)†","position":{"start":{"line":970,"column":1},"end":{"line":970,"column":1}},"key":"TE6QaU3jRe"}],"key":"SP4qoRJxBs"}],"key":"Oh4gpPvoSK"},{"type":"tableRow","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"children":[{"type":"text","value":"Add to beginning","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"key":"lHiPbRBFvM"}],"key":"vmQecNZe8m"},{"type":"tableCell","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"key":"UciL2lXkgv"}],"key":"NmlLYAuvRX"},{"type":"tableCell","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"key":"tNRgU2xNJQ"}],"key":"a9Ok92hfvv"},{"type":"tableCell","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"children":[{"type":"text","value":"O(1)†","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"key":"piX5foo7LX"}],"key":"ImYN8Aefkm"},{"type":"tableCell","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"children":[{"type":"text","value":"O(1)†","position":{"start":{"line":971,"column":1},"end":{"line":971,"column":1}},"key":"nUi1BiGkij"}],"key":"FJnkO98fit"}],"key":"mWUgVeUWwF"},{"type":"tableRow","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"children":[{"type":"text","value":"Remove value","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"key":"wlRhIlvo3T"}],"key":"gVkNIbsHV3"},{"type":"tableCell","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"key":"mO7gFLR6yW"}],"key":"sLqFKzexDj"},{"type":"tableCell","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"key":"zTxEQ8R3GQ"}],"key":"KoU8AkOJW2"},{"type":"tableCell","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"key":"uEn5SHz5gf"}],"key":"ABeTJXyJng"},{"type":"tableCell","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":972,"column":1},"end":{"line":972,"column":1}},"key":"PEG58HM5ga"}],"key":"heUuGLxEOV"}],"key":"G0ezeuGln7"},{"type":"tableRow","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"text","value":"Memory (relative)","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"key":"Nx8Q8jHSMU"}],"key":"zFxcfx0lcK"},{"type":"tableCell","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"text","value":"1x","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"key":"yfA9JoRTvL"}],"key":"v4f4iHXvts"},{"type":"tableCell","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"text","value":"0.9x","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"key":"ajGtEdCOpC"}],"key":"gjfSx5yL9D"},{"type":"tableCell","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"text","value":"3x","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"key":"RiYbzYsjCa"}],"key":"agCS6hW2V9"},{"type":"tableCell","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"children":[{"type":"text","value":"3x","position":{"start":{"line":973,"column":1},"end":{"line":973,"column":1}},"key":"wedV1ulMSl"}],"key":"jk3NeTnVnY"}],"key":"kIGASj62Uy"}],"key":"Amk7E9wedR"},{"type":"paragraph","position":{"start":{"line":975,"column":1},"end":{"line":976,"column":1}},"children":[{"type":"text","value":"* Dict searches by key, not value","position":{"start":{"line":975,"column":1},"end":{"line":975,"column":1}},"key":"X9yQSHkzLg"},{"type":"break","position":{"start":{"line":975,"column":1},"end":{"line":975,"column":1}},"key":"C0eyI3FHfa"},{"type":"text","value":"† Amortized - occasionally O(n) during resize","position":{"start":{"line":975,"column":1},"end":{"line":975,"column":1}},"key":"UvAdeSrHbo"}],"key":"DtDnsxkv7c"},{"type":"heading","depth":3,"position":{"start":{"line":978,"column":1},"end":{"line":978,"column":1}},"children":[{"type":"text","value":"Real-World Examples","position":{"start":{"line":978,"column":1},"end":{"line":978,"column":1}},"key":"vitbOilLlT"}],"identifier":"real-world-examples","label":"Real-World Examples","html_id":"real-world-examples","implicit":true,"key":"mxZmIcjzec"},{"type":"code","lang":"python","value":"# Example 1: Particle simulation\nclass ParticleSystem:\n    def __init__(self):\n        # Lists for ordered, mutable data\n        self.positions = []  # Will modify every timestep\n        self.velocities = []\n        \n        # Tuple for immutable constants\n        self.bounds = (0, 0, 100, 100)  # Can't accidentally change\n        \n        # Dict for parameters\n        self.params = {'G': 6.67e-8, 'dt': 0.01}\n        \n        # Set for spatial hashing\n        self.occupied_cells = set()  # Fast collision detection\n\n# Example 2: Data processing pipeline\nclass DataPipeline:\n    def __init__(self):\n        # List for sequential processing\n        self.stages = []\n        \n        # Dict for caching results\n        self.cache = {}\n        \n        # Set for tracking processed IDs\n        self.processed = set()\n        \n        # deque for rolling buffer\n        from collections import deque\n        self.recent = deque(maxlen=1000)","position":{"start":{"line":980,"column":1},"end":{"line":1012,"column":1}},"key":"rfkxj5MLpX"},{"type":"heading","depth":2,"position":{"start":{"line":1014,"column":1},"end":{"line":1014,"column":1}},"children":[{"type":"text","value":"Practice Exercises","position":{"start":{"line":1014,"column":1},"end":{"line":1014,"column":1}},"key":"I72XK32aVX"}],"identifier":"practice-exercises","label":"Practice Exercises","html_id":"practice-exercises","implicit":true,"key":"rKlh4bB9a6"},{"type":"heading","depth":3,"position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"children":[{"type":"text","value":"Exercise 4.1: Performance Profiler","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"key":"FedI5aYe3B"}],"identifier":"exercise-4-1-performance-profiler","label":"Exercise 4.1: Performance Profiler","html_id":"exercise-4-1-performance-profiler","implicit":true,"key":"KSP17o5Yig"},{"type":"code","lang":"python","value":"def profile_operations(n=10000):\n    \"\"\"\n    Profile common operations on different data structures.\n    \n    Tasks:\n    1. Create list, dict, set with n elements\n    2. Time: membership test, addition, deletion\n    3. Measure memory usage\n    4. Plot results\n    \n    Return summary statistics.\n    \"\"\"\n    # Your code here\n    pass","position":{"start":{"line":1018,"column":1},"end":{"line":1033,"column":1}},"key":"efrtYh4tCg"},{"type":"heading","depth":3,"position":{"start":{"line":1035,"column":1},"end":{"line":1035,"column":1}},"children":[{"type":"text","value":"Exercise 4.2: Deep Copy Debugger","position":{"start":{"line":1035,"column":1},"end":{"line":1035,"column":1}},"key":"cRQJIEqPai"}],"identifier":"exercise-4-2-deep-copy-debugger","label":"Exercise 4.2: Deep Copy Debugger","html_id":"exercise-4-2-deep-copy-debugger","implicit":true,"key":"A4Nq9b7IuY"},{"type":"code","lang":"python","value":"def find_aliasing_bugs(data_structure):\n    \"\"\"\n    Detect potential aliasing issues in nested structures.\n    \n    Tasks:\n    1. Identify all mutable objects\n    2. Check if any are referenced multiple times\n    3. Suggest where deep copies might be needed\n    4. Return diagnostic report\n    \"\"\"\n    # Your code here\n    pass","position":{"start":{"line":1037,"column":1},"end":{"line":1050,"column":1}},"key":"kSGFxlDR7q"},{"type":"heading","depth":3,"position":{"start":{"line":1052,"column":1},"end":{"line":1052,"column":1}},"children":[{"type":"text","value":"Exercise 4.3: Cache Implementation","position":{"start":{"line":1052,"column":1},"end":{"line":1052,"column":1}},"key":"kmDUws3etj"}],"identifier":"exercise-4-3-cache-implementation","label":"Exercise 4.3: Cache Implementation","html_id":"exercise-4-3-cache-implementation","implicit":true,"key":"gdkAXFDCYV"},{"type":"code","lang":"python","value":"class SmartCache:\n    \"\"\"\n    Implement a cache with:\n    1. Maximum size limit\n    2. LRU eviction policy\n    3. Hit/miss statistics\n    4. Performance metrics\n    \n    Use this for expensive function results.\n    \"\"\"\n    \n    def __init__(self, maxsize=100):\n        # Your code here\n        pass\n    \n    def get(self, key):\n        # Your code here\n        pass\n    \n    def put(self, key, value):\n        # Your code here\n        pass","position":{"start":{"line":1054,"column":1},"end":{"line":1077,"column":1}},"key":"ojrwqSAgSJ"},{"type":"heading","depth":3,"position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"children":[{"type":"text","value":"Exercise 4.4: 🐛 ","position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"key":"EucoqOfYqQ"},{"type":"strong","position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"key":"dI1CpY3c8T"}],"key":"UeNLK0f8ky"}],"identifier":"exercise-4-4-debug-this","label":"Exercise 4.4: 🐛 Debug This!","html_id":"exercise-4-4-debug-this","implicit":true,"key":"kvtBv3SvhV"},{"type":"code","lang":"python","value":"def process_observations(observations):\n    \"\"\"\n    This function has multiple data structure bugs.\n    Find and fix them all.\n    \"\"\"\n    \n    # Bug 1: Mutable default\n    def add_metadata(obs, metadata={}):\n        metadata['processed'] = True\n        obs.update(metadata)\n        return obs\n    \n    # Bug 2: Aliasing\n    processed = []\n    for obs in observations:\n        processed.append(obs)\n        processed[-1]['timestamp'] = time.time()\n    \n    # Bug 3: Modifying during iteration\n    for obs in processed:\n        if obs['quality'] < 0.5:\n            processed.remove(obs)\n    \n    return processed","position":{"start":{"line":1081,"column":1},"end":{"line":1106,"column":1}},"key":"DUhno1mypB"},{"type":"heading","depth":2,"position":{"start":{"line":1108,"column":1},"end":{"line":1108,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":1108,"column":1},"end":{"line":1108,"column":1}},"key":"lQo5UJ9CZg"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"sOgQcAfv7R"},{"type":"paragraph","position":{"start":{"line":1110,"column":1},"end":{"line":1110,"column":1}},"children":[{"type":"text","value":"Data structure choice determines algorithm efficiency. A O(n²) algorithm with the wrong data structure becomes O(n³). Always profile with realistic data sizes.","position":{"start":{"line":1110,"column":1},"end":{"line":1110,"column":1}},"key":"RsxRAQnQol"}],"key":"tZWioBq2bZ"},{"type":"paragraph","position":{"start":{"line":1112,"column":1},"end":{"line":1112,"column":1}},"children":[{"type":"text","value":"Lists are versatile but have O(n) search and O(n) insertion at the beginning. Use them for ordered data that you’ll access by index.","position":{"start":{"line":1112,"column":1},"end":{"line":1112,"column":1}},"key":"WIEzIfNfNH"}],"key":"GZ0alDE3Ky"},{"type":"paragraph","position":{"start":{"line":1114,"column":1},"end":{"line":1114,"column":1}},"children":[{"type":"text","value":"Dictionaries and sets provide O(1) average-case lookup through hash tables. Use them when you need fast membership testing or key-value mapping.","position":{"start":{"line":1114,"column":1},"end":{"line":1114,"column":1}},"key":"bjQOhBnKj1"}],"key":"uXxAU4jvfK"},{"type":"paragraph","position":{"start":{"line":1116,"column":1},"end":{"line":1116,"column":1}},"children":[{"type":"text","value":"Immutability prevents entire categories of bugs. Use tuples for data that shouldn’t change. This prepares you for functional programming in JAX.","position":{"start":{"line":1116,"column":1},"end":{"line":1116,"column":1}},"key":"JqU6KLM4K2"}],"key":"Wbv1g0HycE"},{"type":"paragraph","position":{"start":{"line":1118,"column":1},"end":{"line":1118,"column":1}},"children":[{"type":"text","value":"The shallow vs deep copy distinction is critical when working with nested structures. Unexpected aliasing is a common source of bugs in scientific code.","position":{"start":{"line":1118,"column":1},"end":{"line":1118,"column":1}},"key":"UKK1YIpf0W"}],"key":"rmwszuc4yM"},{"type":"paragraph","position":{"start":{"line":1120,"column":1},"end":{"line":1120,"column":1}},"children":[{"type":"text","value":"Memory layout affects cache performance. Row-wise vs column-wise access can differ by 2-10x in speed for large arrays.","position":{"start":{"line":1120,"column":1},"end":{"line":1120,"column":1}},"key":"llsf3OGS4T"}],"key":"DBVfdaNswa"},{"type":"paragraph","position":{"start":{"line":1122,"column":1},"end":{"line":1122,"column":1}},"children":[{"type":"text","value":"Python’s reference-based model has overhead. This is why NumPy arrays (which store raw data contiguously) are so much more efficient for numerical work.","position":{"start":{"line":1122,"column":1},"end":{"line":1122,"column":1}},"key":"SwgZ5ZWzrT"}],"key":"W30bNJeM61"},{"type":"heading","depth":2,"position":{"start":{"line":1124,"column":1},"end":{"line":1124,"column":1}},"children":[{"type":"text","value":"Quick Reference: Data Structure Operations","position":{"start":{"line":1124,"column":1},"end":{"line":1124,"column":1}},"key":"JU4srsmHnb"}],"identifier":"quick-reference-data-structure-operations","label":"Quick Reference: Data Structure Operations","html_id":"quick-reference-data-structure-operations","implicit":true,"key":"RrZprUf5k4"},{"type":"table","position":{"start":{"line":1126,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"children":[{"type":"text","value":"Operation","position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"key":"KUVVO2SL0z"}],"key":"oQIBu0ihlG"},{"type":"tableCell","header":true,"position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"children":[{"type":"text","value":"List","position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"key":"Q85g6Ctp7d"}],"key":"ADTPX5HDLe"},{"type":"tableCell","header":true,"position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"children":[{"type":"text","value":"Tuple","position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"key":"vkW243oFBb"}],"key":"azKzilEGx4"},{"type":"tableCell","header":true,"position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"children":[{"type":"text","value":"Dict","position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"key":"lciIPqwTiM"}],"key":"FIVVK2G6z3"},{"type":"tableCell","header":true,"position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"children":[{"type":"text","value":"Set","position":{"start":{"line":1126,"column":1},"end":{"line":1126,"column":1}},"key":"YQBRfATGUu"}],"key":"THDVoLYPPD"}],"key":"fKxZpVYMZE"},{"type":"tableRow","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"children":[{"type":"text","value":"Create empty","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"key":"gySxYxNpIw"}],"key":"uqomXeMAOa"},{"type":"tableCell","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"children":[{"type":"inlineCode","value":"[]","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"key":"Iw3bujO0s4"}],"key":"uWvZMZ1RxS"},{"type":"tableCell","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"children":[{"type":"inlineCode","value":"()","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"key":"wSJYYxmYWv"}],"key":"kXiDQoNIuT"},{"type":"tableCell","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"children":[{"type":"inlineCode","value":"{}","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"key":"V0k1jIn2Yq"}],"key":"lq2n2OzVT1"},{"type":"tableCell","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"children":[{"type":"inlineCode","value":"set()","position":{"start":{"line":1128,"column":1},"end":{"line":1128,"column":1}},"key":"TqXiHd53Ni"}],"key":"kcO34cl6Hd"}],"key":"g7aWFJ3KNH"},{"type":"tableRow","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"children":[{"type":"text","value":"Create with items","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"key":"Fx0jB77x1l"}],"key":"Db7bHmp7Pu"},{"type":"tableCell","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"children":[{"type":"inlineCode","value":"[1,2,3]","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"key":"IpZQA6AU44"}],"key":"rbOgw05jNy"},{"type":"tableCell","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"children":[{"type":"inlineCode","value":"(1,2,3)","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"key":"ou5dsC86IC"}],"key":"OIzg5tZrTO"},{"type":"tableCell","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"children":[{"type":"inlineCode","value":"{'a':1}","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"key":"wdS2zpR93X"}],"key":"QOtQ9lz65T"},{"type":"tableCell","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"children":[{"type":"inlineCode","value":"{1,2,3}","position":{"start":{"line":1129,"column":1},"end":{"line":1129,"column":1}},"key":"SVxpo5Tzyi"}],"key":"RwNvQWbB3w"}],"key":"MH8De6NhDb"},{"type":"tableRow","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"children":[{"type":"text","value":"Add item","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"key":"HdfMnb3g1M"}],"key":"TBwza5ehK2"},{"type":"tableCell","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"children":[{"type":"inlineCode","value":".append(x)","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"key":"qhTQGwMExO"}],"key":"Ia8vpryKWr"},{"type":"tableCell","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"key":"tR4D5bcWU5"}],"key":"mE64GiWNd7"},{"type":"tableCell","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"children":[{"type":"inlineCode","value":"d[k]=v","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"key":"wOexGQwOJc"}],"key":"ZYvNwlEY57"},{"type":"tableCell","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"children":[{"type":"inlineCode","value":".add(x)","position":{"start":{"line":1130,"column":1},"end":{"line":1130,"column":1}},"key":"Gu3WF5bEzJ"}],"key":"lyvixtyyUd"}],"key":"MimQrmL3um"},{"type":"tableRow","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"children":[{"type":"text","value":"Remove item","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"key":"z7HHQU4NJh"}],"key":"shs79yn72p"},{"type":"tableCell","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"children":[{"type":"inlineCode","value":".remove(x)","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"key":"X1pK8G1rFN"}],"key":"nmmWgKowlc"},{"type":"tableCell","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"key":"Oi8bp9HqaP"}],"key":"yDZOR6lhPv"},{"type":"tableCell","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"children":[{"type":"inlineCode","value":"del d[k]","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"key":"hQRkZrBQWs"}],"key":"OcBwEGNFqY"},{"type":"tableCell","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"children":[{"type":"inlineCode","value":".remove(x)","position":{"start":{"line":1131,"column":1},"end":{"line":1131,"column":1}},"key":"YReetCi0jx"}],"key":"aJ68WZJmzn"}],"key":"brXj88A3Ev"},{"type":"tableRow","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"children":[{"type":"text","value":"Check membership","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"key":"AsUlUTLTIu"}],"key":"yMUFtiriZ3"},{"type":"tableCell","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"children":[{"type":"inlineCode","value":"x in list","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"key":"bPzKBvPOx5"}],"key":"rNbhB4GLLS"},{"type":"tableCell","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"children":[{"type":"inlineCode","value":"x in tuple","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"key":"AO058r8Sts"}],"key":"xKrmY1O8OY"},{"type":"tableCell","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"children":[{"type":"inlineCode","value":"k in dict","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"key":"OgsOS9uNyM"}],"key":"XgChuZJXtn"},{"type":"tableCell","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"children":[{"type":"inlineCode","value":"x in set","position":{"start":{"line":1132,"column":1},"end":{"line":1132,"column":1}},"key":"ey4GZhjSE9"}],"key":"pTkJWlBkkW"}],"key":"pPx6kOiGk2"},{"type":"tableRow","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"children":[{"type":"text","value":"Get by index","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"key":"bxMAozXMDF"}],"key":"k3qvrsl0L4"},{"type":"tableCell","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"children":[{"type":"inlineCode","value":"list[i]","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"key":"rDV6Y4Gena"}],"key":"sm2Vhummq5"},{"type":"tableCell","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"children":[{"type":"inlineCode","value":"tuple[i]","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"key":"lE8qcsD2LB"}],"key":"jpTBKZCoxo"},{"type":"tableCell","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"key":"B0YVJx8pVv"}],"key":"pc72i0ElUo"},{"type":"tableCell","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1133,"column":1},"end":{"line":1133,"column":1}},"key":"ZoZAxUdfg2"}],"key":"KHO8Y41RfU"}],"key":"LBMnsNYQU2"},{"type":"tableRow","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"text","value":"Get by key","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"key":"FIdZSCF2ON"}],"key":"jBykYdoBLs"},{"type":"tableCell","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"key":"PiLlFySPYo"}],"key":"CPDNz42Ibw"},{"type":"tableCell","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"key":"E1yzFeqq0z"}],"key":"l1uu6HbMQi"},{"type":"tableCell","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"inlineCode","value":"dict[k]","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"key":"kblsMrXSGZ"}],"key":"anqZdZmH2p"},{"type":"tableCell","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"key":"f6eDZuvUuu"}],"key":"T1SpdXjSNE"}],"key":"gwgj7cH1Mp"},{"type":"tableRow","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"text","value":"Length","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"Jxt5JMyt70"}],"key":"muiYrNfmhM"},{"type":"tableCell","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"inlineCode","value":"len(list)","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"KSyrifsrkz"}],"key":"ba5CEZrbkF"},{"type":"tableCell","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"inlineCode","value":"len(tuple)","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"G0RlwCS4bw"}],"key":"FPUV67Gm5B"},{"type":"tableCell","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"inlineCode","value":"len(dict)","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"R1YDR9XTXb"}],"key":"bNlf103NJv"},{"type":"tableCell","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"inlineCode","value":"len(set)","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"IyfWzqjRmd"}],"key":"eJkmTfGypD"}],"key":"UxBflWvtPI"},{"type":"tableRow","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"children":[{"type":"text","value":"Iterate","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"key":"S5ynTX0USv"}],"key":"bX4BebbzVe"},{"type":"tableCell","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"children":[{"type":"inlineCode","value":"for x in list","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"key":"aD5usKaLKP"}],"key":"J4YbxkyJYE"},{"type":"tableCell","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"children":[{"type":"inlineCode","value":"for x in tuple","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"key":"UFQZccbL6i"}],"key":"BX9VlFtDsY"},{"type":"tableCell","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"children":[{"type":"inlineCode","value":"for k in dict","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"key":"TEnspOET3d"}],"key":"HICiE1Kyx4"},{"type":"tableCell","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"children":[{"type":"inlineCode","value":"for x in set","position":{"start":{"line":1136,"column":1},"end":{"line":1136,"column":1}},"key":"WOusN3Xjv0"}],"key":"Dn88cTK2Ac"}],"key":"t7hk1vntli"},{"type":"tableRow","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"text","value":"Copy (shallow)","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"key":"cNR4EPncwS"}],"key":"dJa2zIOWOX"},{"type":"tableCell","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"inlineCode","value":"list.copy()","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"key":"AHEEwZD1QC"}],"key":"jHnhMfV3cb"},{"type":"tableCell","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"key":"SiVfUvOzJF"}],"key":"wSynX7JQir"},{"type":"tableCell","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"inlineCode","value":"dict.copy()","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"key":"PJ9ZxZYMYP"}],"key":"KaVuwd6eHq"},{"type":"tableCell","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"inlineCode","value":"set.copy()","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"key":"JJaoTXx02i"}],"key":"GGwS1RxF1E"}],"key":"anNYfeFg2i"},{"type":"tableRow","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"text","value":"Copy (deep)","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"key":"jeXJR766Q5"}],"key":"IC7NtnJMkL"},{"type":"tableCell","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"inlineCode","value":"deepcopy(list)","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"key":"MRIibsS7JN"}],"key":"EoeK800NpQ"},{"type":"tableCell","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"key":"es38MqaH27"}],"key":"i1t8DGw6cq"},{"type":"tableCell","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"inlineCode","value":"deepcopy(dict)","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"key":"DpVZ2yiY0H"}],"key":"cqQmXNwJPo"},{"type":"tableCell","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"children":[{"type":"text","value":"N/A","position":{"start":{"line":1138,"column":1},"end":{"line":1138,"column":1}},"key":"b4rnhDJ3Ae"}],"key":"vI4rnMvjKc"}],"key":"dDrkQ72ZVn"}],"key":"qObDQ7HlNh"},{"type":"heading","depth":3,"position":{"start":{"line":1140,"column":1},"end":{"line":1140,"column":1}},"children":[{"type":"text","value":"Common Methods","position":{"start":{"line":1140,"column":1},"end":{"line":1140,"column":1}},"key":"wgpdNtQIeB"}],"identifier":"common-methods","label":"Common Methods","html_id":"common-methods","implicit":true,"key":"k8tZ8CTaSO"},{"type":"table","position":{"start":{"line":1142,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"children":[{"type":"text","value":"Structure","position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"key":"t5nkTMyyyN"}],"key":"BAJKbnMAZI"},{"type":"tableCell","header":true,"position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"children":[{"type":"text","value":"Method","position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"key":"rds3huA8OO"}],"key":"iI7ZepNob9"},{"type":"tableCell","header":true,"position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"key":"IxdZPLIL7C"}],"key":"arLE1wM18U"},{"type":"tableCell","header":true,"position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1142,"column":1},"end":{"line":1142,"column":1}},"key":"AFYcwWcMHm"}],"key":"vJXQd4DfQH"}],"key":"XQU1TUfvDA"},{"type":"tableRow","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"children":[{"type":"text","value":"list","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"key":"Bjn9l4y7Gk"}],"key":"zmcKahPzz0"},{"type":"tableCell","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"children":[{"type":"inlineCode","value":".append(x)","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"key":"hMpu3fyanV"}],"key":"qPk6KBF4Ia"},{"type":"tableCell","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"children":[{"type":"text","value":"Add to end","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"key":"F7Yg2N8Evg"}],"key":"mBfQUYRgDq"},{"type":"tableCell","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"children":[{"type":"inlineCode","value":"lst.append(5)","position":{"start":{"line":1144,"column":1},"end":{"line":1144,"column":1}},"key":"Yf0nNfmVSE"}],"key":"SQ6NtpUb6L"}],"key":"QNJUXD0Dbm"},{"type":"tableRow","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"children":[{"type":"text","value":"list","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"key":"UOIg0lkU4m"}],"key":"TerYd4Aths"},{"type":"tableCell","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"children":[{"type":"inlineCode","value":".extend(iter)","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"key":"oBMmLiCi8d"}],"key":"WKOYCJLpa5"},{"type":"tableCell","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"children":[{"type":"text","value":"Add multiple","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"key":"OpNgfrezwA"}],"key":"XCyYsiTKYC"},{"type":"tableCell","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"children":[{"type":"inlineCode","value":"lst.extend([1,2,3])","position":{"start":{"line":1145,"column":1},"end":{"line":1145,"column":1}},"key":"lSDU1RVF2j"}],"key":"gvHBRygTEp"}],"key":"TswlqRqFx6"},{"type":"tableRow","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"children":[{"type":"text","value":"list","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"key":"GsjgYIh3jH"}],"key":"qK4gn39WkR"},{"type":"tableCell","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"children":[{"type":"inlineCode","value":".insert(i,x)","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"key":"KNk0LouHHv"}],"key":"syAkjSZrWs"},{"type":"tableCell","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"children":[{"type":"text","value":"Insert at position","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"key":"HuCkWp3Ae2"}],"key":"xNlbIwOHbF"},{"type":"tableCell","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"children":[{"type":"inlineCode","value":"lst.insert(0, 'first')","position":{"start":{"line":1146,"column":1},"end":{"line":1146,"column":1}},"key":"LWfJ8Zg2kt"}],"key":"v2Gm4q0Lts"}],"key":"COaF7R0d8R"},{"type":"tableRow","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"children":[{"type":"text","value":"list","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"key":"PTMDoG52GP"}],"key":"SJjtKbyeLz"},{"type":"tableCell","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"children":[{"type":"inlineCode","value":".pop(i=-1)","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"key":"EXxzarNomm"}],"key":"RKwPGYQvSt"},{"type":"tableCell","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"children":[{"type":"text","value":"Remove and return","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"key":"RHzA9Cmagr"}],"key":"P8sHwJ6SzO"},{"type":"tableCell","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"children":[{"type":"inlineCode","value":"last = lst.pop()","position":{"start":{"line":1147,"column":1},"end":{"line":1147,"column":1}},"key":"Gtwd3PFvBG"}],"key":"sJ7DIFjpBU"}],"key":"xwfRaBwizu"},{"type":"tableRow","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"children":[{"type":"text","value":"list","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"key":"xrf1NBgrIz"}],"key":"nwSddEG4l7"},{"type":"tableCell","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"children":[{"type":"inlineCode","value":".sort()","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"key":"ztN0lAcr6O"}],"key":"aGvzBrzcmG"},{"type":"tableCell","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"children":[{"type":"text","value":"Sort in place","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"key":"PMcgFyxKWH"}],"key":"h8eLNT2Wjp"},{"type":"tableCell","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"children":[{"type":"inlineCode","value":"lst.sort()","position":{"start":{"line":1148,"column":1},"end":{"line":1148,"column":1}},"key":"erAi2IMjjW"}],"key":"b4VjajDETb"}],"key":"ApEYAOG5CW"},{"type":"tableRow","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"children":[{"type":"text","value":"dict","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"key":"QbesncXRG6"}],"key":"v1anUT71Kt"},{"type":"tableCell","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"children":[{"type":"inlineCode","value":".get(k, default)","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"key":"MXVm9LAUnV"}],"key":"XsS1IjvKS4"},{"type":"tableCell","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"children":[{"type":"text","value":"Safe access","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"key":"CYpqx4Rmdo"}],"key":"fIEvLRdyEI"},{"type":"tableCell","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"children":[{"type":"inlineCode","value":"d.get('key', 0)","position":{"start":{"line":1149,"column":1},"end":{"line":1149,"column":1}},"key":"MGwSdldrFx"}],"key":"eTM4HzhFtl"}],"key":"BW8mNBZN9y"},{"type":"tableRow","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"children":[{"type":"text","value":"dict","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"key":"vHiKOLvJSN"}],"key":"yrpkND6IQr"},{"type":"tableCell","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"children":[{"type":"inlineCode","value":".keys()","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"key":"yaWc0yBcxc"}],"key":"dsX5qqqRLr"},{"type":"tableCell","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"children":[{"type":"text","value":"Get all keys","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"key":"RDg8BnSUz6"}],"key":"JAXDcB91WA"},{"type":"tableCell","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"children":[{"type":"inlineCode","value":"for k in d.keys():","position":{"start":{"line":1150,"column":1},"end":{"line":1150,"column":1}},"key":"GBpZIjAeGy"}],"key":"fDCFDWItWB"}],"key":"ZjpEsq4UKW"},{"type":"tableRow","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"children":[{"type":"text","value":"dict","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"key":"zhHSsnQfhx"}],"key":"KX1jGNLobu"},{"type":"tableCell","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"children":[{"type":"inlineCode","value":".values()","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"key":"lUbIBgmG9V"}],"key":"SC8AgAP1PK"},{"type":"tableCell","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"children":[{"type":"text","value":"Get all values","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"key":"u4A2WuO7JJ"}],"key":"hZGYsAycJ5"},{"type":"tableCell","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"children":[{"type":"inlineCode","value":"sum(d.values())","position":{"start":{"line":1151,"column":1},"end":{"line":1151,"column":1}},"key":"thUfxQhqF4"}],"key":"lSwA3uYcAP"}],"key":"uD4TUT69bn"},{"type":"tableRow","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"children":[{"type":"text","value":"dict","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"key":"hY0psKrugm"}],"key":"u2JnHE7vmI"},{"type":"tableCell","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"children":[{"type":"inlineCode","value":".items()","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"key":"kEe9mlKSyX"}],"key":"t4H3FAUfwM"},{"type":"tableCell","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"children":[{"type":"text","value":"Get (key,value) pairs","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"key":"bQcGOtUGpU"}],"key":"NRCBJ2KVIK"},{"type":"tableCell","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"children":[{"type":"inlineCode","value":"for k,v in d.items():","position":{"start":{"line":1152,"column":1},"end":{"line":1152,"column":1}},"key":"RfjO35Xr6f"}],"key":"miLAtCTsRc"}],"key":"g9JSkaiDZT"},{"type":"tableRow","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"children":[{"type":"text","value":"set","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"key":"U7HHFW9cfv"}],"key":"e61geyUW7z"},{"type":"tableCell","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"children":[{"type":"inlineCode","value":".add(x)","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"key":"uisLOnLQOE"}],"key":"KRIGK1iKQW"},{"type":"tableCell","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"children":[{"type":"text","value":"Add element","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"key":"SHKkVblyXB"}],"key":"O4wmtA7m8o"},{"type":"tableCell","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"children":[{"type":"inlineCode","value":"s.add(42)","position":{"start":{"line":1153,"column":1},"end":{"line":1153,"column":1}},"key":"LkE9PjnQbw"}],"key":"Aqshmv1Vih"}],"key":"XxXO19C5RF"},{"type":"tableRow","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"children":[{"type":"text","value":"set","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"key":"hr4OmP46Pl"}],"key":"fluQ56nVtH"},{"type":"tableCell","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"children":[{"type":"inlineCode","value":".union(other)","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"key":"UMfwu7fPPp"}],"key":"ykerI3LAge"},{"type":"tableCell","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"children":[{"type":"text","value":"Combine sets","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"key":"sAnTA1WB91"}],"key":"cK7gLbm99Q"},{"type":"tableCell","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"children":[{"type":"text","value":"`s1","position":{"start":{"line":1154,"column":1},"end":{"line":1154,"column":1}},"key":"F2qJAi4yMn"}],"key":"DdLsuMIguI"}],"key":"PhO4X7MeaI"},{"type":"tableRow","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"children":[{"type":"text","value":"set","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"key":"drd7vZaiVF"}],"key":"ft8d267BSy"},{"type":"tableCell","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"children":[{"type":"inlineCode","value":".intersection(other)","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"key":"jGdkxqGHgz"}],"key":"AZvBibfNb1"},{"type":"tableCell","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"children":[{"type":"text","value":"Common elements","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"key":"P8J7IS2LHy"}],"key":"JXobrAH3E3"},{"type":"tableCell","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"children":[{"type":"inlineCode","value":"s1 & s2","position":{"start":{"line":1155,"column":1},"end":{"line":1155,"column":1}},"key":"UFfyTf05GX"}],"key":"SFHO9tvW2b"}],"key":"AHj7GonMXl"},{"type":"tableRow","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"text","value":"set","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"key":"ZVjRvnvZgc"}],"key":"lL0GRVNmhs"},{"type":"tableCell","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"inlineCode","value":".difference(other)","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"key":"DnhMabAGfn"}],"key":"ufSrDLqbiK"},{"type":"tableCell","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"text","value":"Elements in s1 not s2","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"key":"ASQwQTneU8"}],"key":"nUTxG1gt9B"},{"type":"tableCell","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"children":[{"type":"inlineCode","value":"s1 - s2","position":{"start":{"line":1156,"column":1},"end":{"line":1156,"column":1}},"key":"H7QAGOk5s3"}],"key":"DAMrz1WaeL"}],"key":"F0rObPzhS7"}],"key":"y3Nxw42KHU"},{"type":"heading","depth":2,"position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"key":"LlEzfzCTV2"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview","implicit":true,"key":"Mtg198bKwG"},{"type":"paragraph","position":{"start":{"line":1160,"column":1},"end":{"line":1160,"column":1}},"children":[{"type":"text","value":"With data structures mastered, Chapter 5 will explore functions and modules — how to organize code for reusability, testing, and collaboration. You’ll learn how Python’s function model, with first-class functions and closure support, enables powerful patterns like decorators and functional programming techniques. These concepts prepare you for the modular algorithm design essential for complex simulations and the functional programming paradigm required for JAX.","position":{"start":{"line":1160,"column":1},"end":{"line":1160,"column":1}},"key":"wOyahwFs9M"}],"key":"gAFbprWAOZ"}],"key":"ghNPnw4cuf"}],"key":"tIscYl1lls"},"references":{"cite":{"order":[],"data":{}}}}