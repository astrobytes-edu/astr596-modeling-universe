{"version":2,"kind":"Article","sha256":"254e02943bfaa7d1b64e98dba8aaa794485efff74b55fc5623a0a093e671cedd","slug":"python-numpy-scientific-orig","location":"/03-scientific-computing-with-python/02-scientific-computing-core/07-python-numpy-scientific-ORIG.md","dependencies":[],"frontmatter":{"title":"Chapter 7: NumPy - The Foundation of Scientific Computing","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/02-scientific-computing-core/07-python-numpy-scientific-ORIG.md","exports":[{"format":"md","filename":"07-python-numpy-scientific-ORIG.md","url":"/07-python-numpy-scie-c1900eda52e784edeef19e24ea4125d8.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wpEQtbwhtL"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"zO8J2EOwgb"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kWXd3Qw1zo"}],"key":"YUb5l9LF3c"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Understand why NumPy arrays are 10-100x faster than Python lists for numerical computation","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"yFu7tttUGE"}],"key":"qzZEcSf6Zy"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Create and manipulate arrays using various initialization methods and slicing techniques","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Nrkd9cUHSD"}],"key":"AxziYoyyNt"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Apply vectorization to eliminate explicit loops and write efficient scientific code","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CZcU4jQVYu"}],"key":"MBRlRjjo78"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Master broadcasting rules to perform operations on arrays of different shapes elegantly","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"w8bdiZJZQp"}],"key":"JZbbLGVK6X"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Use NumPy’s mathematical functions for scientific calculations","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"eL4N429xJG"}],"key":"Y9Q0DUkw1v"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Understand memory layout and its impact on performance","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"WRdAppZPFe"}],"key":"tQBzcaVsHH"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Debug common NumPy errors and understand when operations create copies vs views","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"OQPHFCS8Ak"}],"key":"BWzSCrMsxV"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Choose when NumPy is appropriate versus other tools like pandas or sparse matrices","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"aM8NT2z4xJ"}],"key":"JydFt9OaTa"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Integrate NumPy with the scientific Python ecosystem","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"IzkLiI467N"}],"key":"riwAAWJjSv"}],"key":"h40tksGJlV"},{"type":"heading","depth":2,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"SbiCLTB1zp"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check","implicit":true,"key":"ZRvh7drymP"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"mtCddIE0Jc"}],"key":"sFFjlGQEgY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":19,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"✓ Work with Python lists and understand indexing/slicing (Chapter 4)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Yv4vDyBp84"}],"key":"A8q0OFWaZe"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"✓ Write functions and understand scope (Chapter 5)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"nOFs7ygPUz"}],"key":"PTGIHhQaXX"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"✓ Understand object methods and attributes (Chapter 6)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"zOmp2eu58F"}],"key":"W4XfNCL84I"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"✓ Use list comprehensions for data transformation (Chapter 4)","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"TzkfUqE9yj"}],"key":"XFPHE8I2Bq"},{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"✓ Work with nested data structures (Chapter 4)","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"M0prCdDfSt"}],"key":"IEFmZ89hKe"}],"key":"fpJmT3pTQc"},{"type":"heading","depth":2,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"UQKB4zsK4e"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview","implicit":true,"key":"BtT3veTmr7"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"So far, you’ve been using Python lists for numerical data. But try this simple experiment: compute the sum of squares for a million numbers using a list comprehension versus a loop. Even with list comprehensions, Python is surprisingly slow for numerical work. This is where NumPy transforms Python from a general-purpose language into a scientific computing powerhouse.","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"z96FJ4SWjq"}],"key":"wsU5OiJ4vS"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"NumPy (Numerical Python) is not just a library—it’s the foundation upon which the entire scientific Python ecosystem is built. Every plot you make with Matplotlib, every optimization you run with SciPy, every dataframe you manipulate with Pandas, ultimately relies on NumPy arrays. Understanding NumPy deeply means understanding how scientific computing works in Python.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Io1MyCcbXG"}],"key":"DY5x4oQ1sK"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"This chapter reveals why NumPy is fast (hint: it’s not written in Python), how its mental model differs from pure Python (vectorization over loops), and how its design patterns appear throughout scientific computing. You’ll learn to think in arrays, not elements—a fundamental shift that makes the difference between code that takes hours and code that takes seconds. By the end, you’ll understand why that ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"ZX075TOwtn"},{"type":"inlineCode","value":"Star","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"YatSoDAGl5"},{"type":"text","value":" class you created in Chapter 6 might be better represented as a structured NumPy array when you have millions of stars to process.","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"RipQYY5ZPk"}],"key":"RfOA1T1Bs9"},{"type":"heading","depth":2,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"7.1 Why NumPy? The Performance Revolution","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Odc90sUl73"}],"identifier":"id-7-1-why-numpy-the-performance-revolution","label":"7.1 Why NumPy? The Performance Revolution","html_id":"id-7-1-why-numpy-the-performance-revolution","implicit":true,"key":"HY6KQwNHR8"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Let’s start with a motivating example that shows why NumPy exists:","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"xTrRjlTihh"}],"key":"jycb2BevKK"},{"type":"code","lang":"python","value":"In [1]: import time\nIn [2]: import numpy as np\n\n# Pure Python: sum of squares for 1 million numbers\nIn [3]: def python_sum_of_squares(n):\n   ...:     \"\"\"Pure Python implementation using list comprehension.\"\"\"\n   ...:     numbers = list(range(n))\n   ...:     return sum(x**2 for x in numbers)\n\n# NumPy: same calculation\nIn [4]: def numpy_sum_of_squares(n):\n   ...:     \"\"\"NumPy implementation using vectorization.\"\"\"\n   ...:     numbers = np.arange(n)\n   ...:     return np.sum(numbers**2)\n\n# Time both approaches\nIn [5]: n = 1_000_000\n\nIn [6]: start = time.perf_counter()\nIn [7]: python_result = python_sum_of_squares(n)\nIn [8]: python_time = time.perf_counter() - start\n\nIn [9]: start = time.perf_counter()\nIn [10]: numpy_result = numpy_sum_of_squares(n)\nIn [11]: numpy_time = time.perf_counter() - start\n\nIn [12]: print(f\"Python: {python_time:.3f} seconds\")\nIn [13]: print(f\"NumPy:  {numpy_time:.3f} seconds\")\nIn [14]: print(f\"Speedup: {python_time/numpy_time:.1f}x\")\nPython: 0.142 seconds\nNumPy:  0.003 seconds\nSpeedup: 47.3x\n\nIn [15]: python_result == numpy_result  # Same answer!\nOut[15]: True","position":{"start":{"line":37,"column":1},"end":{"line":73,"column":1}},"key":"AuUZDwpyNv"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"NumPy is nearly 50 times faster! But why? The answer reveals fundamental truths about scientific computing.","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"YmoYlYGdRR"}],"key":"O4GNttNXLm"},{"type":"heading","depth":3,"position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"The Secret: NumPy Arrays Are Not Python Lists","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"o9sV2tVxvq"}],"identifier":"the-secret-numpy-arrays-are-not-python-lists","label":"The Secret: NumPy Arrays Are Not Python Lists","html_id":"the-secret-numpy-arrays-are-not-python-lists","implicit":true,"key":"QvqobgAKHm"},{"type":"paragraph","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"children":[{"type":"text","value":"Understanding the fundamental difference between Python lists and NumPy arrays is crucial for writing efficient scientific code. Python lists are incredibly flexible—they can hold any type of object, grow and shrink dynamically, and support arbitrary nesting. This flexibility comes at a cost: each element in a list is actually a pointer to a Python object stored elsewhere in memory. When you perform operations on lists, Python must follow these pointers, check types, and handle each element individually.","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"FOKJhNBDuq"}],"key":"xUkgjhLCel"},{"type":"paragraph","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"NumPy arrays, by contrast, store raw numerical data in contiguous blocks of memory, just like arrays in C or Fortran. All elements must be the same type, and the array size is fixed when created. These restrictions enable dramatic performance improvements.","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"R5LuPPqL8l"}],"key":"Gwlj8gCxYl"},{"type":"mermaid","value":"flowchart TD\n    subgraph \"Python List\"\n        L[List Object] --> P1[Pointer 1]\n        L --> P2[Pointer 2]\n        L --> P3[Pointer 3]\n        L --> PN[Pointer N]\n        \n        P1 --> O1[Integer Object<br/>type: int<br/>value: 0<br/>refcount: 1]\n        P2 --> O2[Integer Object<br/>type: int<br/>value: 1<br/>refcount: 1]\n        P3 --> O3[Integer Object<br/>type: int<br/>value: 2<br/>refcount: 1]\n        PN --> ON[Integer Object<br/>type: int<br/>value: N-1<br/>refcount: 1]\n    end\n    \n    subgraph \"NumPy Array\"\n        A[Array Header<br/>dtype: int64<br/>shape: (N,)<br/>strides: (8,)] --> M[Contiguous Memory Block<br/>0 | 1 | 2 | 3 | ... | N-1]\n    end\n    \n    style L fill:#f9f\n    style A fill:#9f9\n    style M fill:#9ff","key":"WExkx3dI8X"},{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"With Python lists, accessing an element means following a pointer, checking the object type, extracting the value, and potentially handling reference counting. With NumPy arrays, accessing an element is just reading from a memory offset—the same operation that happens in compiled languages. This difference becomes dramatic when operating on millions of elements.","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"htJEHSMOyy"}],"key":"c0oNF9axa5"},{"type":"heading","depth":3,"position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"text","value":"The Mental Model Shift: Vectorization","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"key":"T4u0NNAb2R"}],"identifier":"the-mental-model-shift-vectorization","label":"The Mental Model Shift: Vectorization","html_id":"the-mental-model-shift-vectorization","implicit":true,"key":"rLMRr4sKAH"},{"type":"paragraph","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"The performance gain from NumPy requires a different programming paradigm called vectorization. Instead of thinking about operations on individual elements (the Python way), you think about operations on entire arrays (the NumPy way). This isn’t just a syntactic difference—it’s a fundamental shift in how you approach problems.","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"JjHYSmjBXm"}],"key":"Rd8KX9qLKH"},{"type":"code","lang":"python","value":"# Python style: loop over elements explicitly\ndef python_distance(x_coords, y_coords):\n    \"\"\"\n    Calculate distances from origin using Python loops.\n    Note: We process each coordinate pair individually.\n    \"\"\"\n    distances = []\n    for x, y in zip(x_coords, y_coords):\n        dist = (x**2 + y**2)**0.5\n        distances.append(dist)\n    return distances\n\n# NumPy style: operate on entire arrays at once\ndef numpy_distance(x_coords, y_coords):\n    \"\"\"\n    Calculate distances from origin using vectorization.\n    The entire operation happens in compiled C code.\n    \"\"\"\n    return np.sqrt(x_coords**2 + y_coords**2)\n\n# Test with 100,000 points\nn_points = 100_000\nx = np.random.randn(n_points)  # Random x coordinates\ny = np.random.randn(n_points)  # Random y coordinates\n\n# Convert to lists for Python version\nx_list = x.tolist()\ny_list = y.tolist()\n\n# Time both approaches\n%timeit python_distance(x_list, y_list)\n# 31.2 ms ± 501 µs per loop\n\n%timeit numpy_distance(x, y)\n# 371 µs ± 5.2 µs per loop\n\n# 84x faster with vectorization!","position":{"start":{"line":112,"column":1},"end":{"line":150,"column":1}},"key":"lspzTXxH2t"},{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"Vectorization means the loop still happens, but it’s implemented in compiled C code rather than interpreted Python. The CPU can also use SIMD (Single Instruction, Multiple Data) instructions to process multiple array elements simultaneously, further improving performance.","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"m2bHC0CcVr"}],"key":"ApKFd91uYE"},{"type":"heading","depth":3,"position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"key":"tQFHlpKcX1"},{"type":"strong","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Two-Language Problem","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"key":"Z4LrNRbwpx"}],"key":"wA62uxzhDE"}],"identifier":"id-computational-thinking-box-the-two-language-problem","label":"📦 Computational Thinking Box: The Two-Language Problem","html_id":"id-computational-thinking-box-the-two-language-problem","implicit":true,"key":"BlgfFCKcYH"},{"type":"code","lang":"","value":"PATTERN: The Two-Language Problem in Scientific Computing\n\nMany scientific computing ecosystems face a fundamental dilemma:\n- High-level languages (Python, MATLAB, R) are great for experimentation\n- Low-level languages (C, Fortran) are needed for performance\n- Scientists want to think about science, not memory management\n\nNumPy's Solution:\n- Python interface for thinking and prototyping\n- C/Fortran implementation for computation\n- Seamless boundary between the two worlds\n\nThis pattern appears throughout scientific Python:\n- NumPy: Python interface, C implementation\n- SciPy: Python interface, Fortran/C++ implementation  \n- Pandas: Python interface, Cython implementation\n- Scikit-learn: Python interface, Cython/C++ implementation\n\nThe key insight: put the language boundary at the right abstraction level.\nFor NumPy, that's the array operation, not the element operation.\nThis lets scientists write Python while getting C performance.","position":{"start":{"line":156,"column":1},"end":{"line":178,"column":1}},"key":"sy09AuPYnP"},{"type":"heading","depth":2,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"7.2 Creating Arrays: From Lists to Grids","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"tZMKme0i1X"}],"identifier":"id-7-2-creating-arrays-from-lists-to-grids","label":"7.2 Creating Arrays: From Lists to Grids","html_id":"id-7-2-creating-arrays-from-lists-to-grids","implicit":true,"key":"j9n2mcUE9q"},{"type":"paragraph","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"text","value":"NumPy provides many ways to create arrays, each optimized for different use cases. Understanding these is crucial for efficient scientific computing.","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"key":"WG5QBANwUj"}],"key":"pns8m3m0oo"},{"type":"heading","depth":3,"position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"From Python Sequences","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"key":"HKnQmIMEAp"}],"identifier":"from-python-sequences","label":"From Python Sequences","html_id":"from-python-sequences","implicit":true,"key":"YHIMe8dw7o"},{"type":"paragraph","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"text","value":"The most straightforward way to create NumPy arrays is by converting existing Python data structures:","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"poTVHzEmzR"}],"key":"Lpo6l8ZBaI"},{"type":"code","lang":"python","value":"In [16]: # From a simple list\nIn [17]: list_data = [1, 2, 3, 4, 5]\nIn [18]: arr = np.array(list_data)\nIn [19]: print(f\"Array: {arr}\")\nIn [20]: print(f\"Type: {type(arr)}\")  # Note: it's an object!\nIn [21]: print(f\"Dtype: {arr.dtype}\")  # Data type of elements\nArray: [1 2 3 4 5]\nType: <class 'numpy.ndarray'>\nDtype: int64\n\nIn [22]: # From nested lists (creates 2D array)\nIn [23]: matrix_data = [[1, 2, 3],\n   ...:                 [4, 5, 6],\n   ...:                 [7, 8, 9]]\nIn [24]: matrix = np.array(matrix_data)\nIn [25]: print(f\"Matrix:\\n{matrix}\")\nIn [26]: print(f\"Shape: {matrix.shape}\")  # (rows, columns)\nIn [27]: print(f\"Dimensions: {matrix.ndim}\")\nMatrix:\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\nShape: (3, 3)\nDimensions: 2","position":{"start":{"line":188,"column":1},"end":{"line":213,"column":1}},"key":"bTP4hLBA6H"},{"type":"paragraph","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"children":[{"type":"text","value":"Remember from Chapter 6 that NumPy arrays are objects! They have attributes (","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"oR94zzkp2J"},{"type":"inlineCode","value":"shape","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"az38WbPo7B"},{"type":"text","value":", ","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"CN76Y4LjOq"},{"type":"inlineCode","value":"dtype","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"PKF4nuOtlu"},{"type":"text","value":", ","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"pq6jixxVhh"},{"type":"inlineCode","value":"size","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"KGfNsO0ynG"},{"type":"text","value":") and methods (","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"DXoD3NYeGF"},{"type":"inlineCode","value":"reshape()","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"aTj55Curql"},{"type":"text","value":", ","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"I61ko9OEOq"},{"type":"inlineCode","value":"mean()","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"PDQtCPbSYK"},{"type":"text","value":", ","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"ecf4Rqrqep"},{"type":"inlineCode","value":"sum()","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"plUnAVINGc"},{"type":"text","value":"). This is object-oriented programming in action—the array object encapsulates both data and operations on that data.","position":{"start":{"line":215,"column":1},"end":{"line":215,"column":1}},"key":"vx7J2TVte7"}],"key":"fIsf9yD3vP"},{"type":"heading","depth":3,"position":{"start":{"line":217,"column":1},"end":{"line":217,"column":1}},"children":[{"type":"text","value":"Initialization Functions","position":{"start":{"line":217,"column":1},"end":{"line":217,"column":1}},"key":"yRJDBeELsM"}],"identifier":"initialization-functions","label":"Initialization Functions","html_id":"initialization-functions","implicit":true,"key":"cJLVDXZsVy"},{"type":"paragraph","position":{"start":{"line":219,"column":1},"end":{"line":219,"column":1}},"children":[{"type":"text","value":"Creating arrays from scratch is often more efficient than converting lists, especially for large arrays:","position":{"start":{"line":219,"column":1},"end":{"line":219,"column":1}},"key":"joblqUG4EI"}],"key":"XVHJcAs6vT"},{"type":"code","lang":"python","value":"In [28]: # Arrays of zeros - useful for accumulating results\nIn [29]: zeros = np.zeros((3, 4))  # 3 rows, 4 columns\nIn [30]: print(f\"Zeros:\\n{zeros}\")\nZeros:\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\nIn [31]: # Arrays of ones - useful for counting or normalization\nIn [32]: ones = np.ones((2, 3), dtype=np.int32)  # Can specify dtype\nIn [33]: print(f\"Ones:\\n{ones}\")\nOnes:\n[[1 1 1]\n [1 1 1]]\n\nIn [34]: # Identity matrix - useful for linear algebra\nIn [35]: identity = np.eye(3)\nIn [36]: print(f\"Identity:\\n{identity}\")\nIdentity:\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\nIn [37]: # Uninitialized array - fastest but DANGEROUS\nIn [38]: empty = np.empty((2, 2))  # Contains garbage values!\nIn [39]: print(f\"Empty (undefined values):\\n{empty}\")\nEmpty (undefined values):\n[[4.67e-310 0.00e+000]\n [0.00e+000 0.00e+000]]","position":{"start":{"line":221,"column":1},"end":{"line":251,"column":1}},"key":"s1bIvNkHFs"},{"type":"heading","depth":3,"position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"UZbTw49kOM"},{"type":"strong","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Uninitialized Arrays","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"xACqAk5XG2"}],"key":"viZA4XWTUb"}],"identifier":"id-common-bug-alert-uninitialized-arrays","label":"⚠️ Common Bug Alert: Uninitialized Arrays","html_id":"id-common-bug-alert-uninitialized-arrays","implicit":true,"key":"hzOw06894L"},{"type":"code","lang":"python","value":"# WRONG: Assuming empty arrays contain zeros\ndef calculate_sums_wrong(data, n_bins):\n    \"\"\"This function has a subtle bug.\"\"\"\n    sums = np.empty(n_bins)  # Contains garbage values!\n    for i, value in enumerate(data):\n        bin_idx = int(value) % n_bins\n        sums[bin_idx] += value  # Adding to garbage!\n    return sums\n\n# CORRECT: Use zeros for accumulation\ndef calculate_sums_correct(data, n_bins):\n    \"\"\"Always initialize accumulators to zero.\"\"\"\n    sums = np.zeros(n_bins)  # Properly initialized\n    for i, value in enumerate(data):\n        bin_idx = int(value) % n_bins\n        sums[bin_idx] += value  # Now safe to accumulate\n    return sums\n\n# The bug might not be obvious in testing!\ntest_data = np.array([1.5, 2.7, 3.2])\nprint(calculate_sums_wrong(test_data, 5))   # Unpredictable results!\nprint(calculate_sums_correct(test_data, 5))  # [0, 1.5, 2.7, 3.2, 0]","position":{"start":{"line":255,"column":1},"end":{"line":278,"column":1}},"key":"A1N05aHbM3"},{"type":"paragraph","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"children":[{"type":"text","value":"Always use ","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"TyukG35SNp"},{"type":"inlineCode","value":"zeros()","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"qKXwzXx471"},{"type":"text","value":" for accumulation, ","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"Ivuu7aEnLS"},{"type":"inlineCode","value":"ones()","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"kXCeftGSsl"},{"type":"text","value":" for counting, and only use ","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"LvsnqWqofl"},{"type":"inlineCode","value":"empty()","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"mncqY18JfR"},{"type":"text","value":" when you’ll immediately overwrite all values. The performance gain from ","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"hlnRDK9AJ9"},{"type":"inlineCode","value":"empty()","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"x8DpxIY5Wu"},{"type":"text","value":" is rarely worth the risk of bugs.","position":{"start":{"line":280,"column":1},"end":{"line":280,"column":1}},"key":"dMu8cYXCNO"}],"key":"xKarpvaMAF"},{"type":"heading","depth":3,"position":{"start":{"line":282,"column":1},"end":{"line":282,"column":1}},"children":[{"type":"text","value":"Range Arrays","position":{"start":{"line":282,"column":1},"end":{"line":282,"column":1}},"key":"oDs5hMfYxH"}],"identifier":"range-arrays","label":"Range Arrays","html_id":"range-arrays","implicit":true,"key":"RhGyEidksl"},{"type":"paragraph","position":{"start":{"line":284,"column":1},"end":{"line":284,"column":1}},"children":[{"type":"text","value":"For sequences of numbers, NumPy provides optimized functions that are much more memory-efficient than converting Python ranges:","position":{"start":{"line":284,"column":1},"end":{"line":284,"column":1}},"key":"b9N9wDsyvf"}],"key":"ejpyoVmXpL"},{"type":"code","lang":"python","value":"In [40]: # Like Python's range, but returns an array\nIn [41]: integers = np.arange(10)  # 0 to 9\nIn [42]: print(f\"Integers: {integers}\")\nIntegers: [0 1 2 3 4 5 6 7 8 9]\n\nIn [43]: # With start, stop, step (half-open interval like Python)\nIn [44]: evens = np.arange(0, 10, 2)\nIn [45]: print(f\"Evens: {evens}\")\nEvens: [0 2 4 6 8]\n\nIn [46]: # Floating-point ranges (be careful with precision!)\nIn [47]: floats = np.arange(0, 1, 0.1)\nIn [48]: print(f\"Floats: {floats}\")\nIn [49]: print(f\"Length: {len(floats)}\")  # Might not be what you expect!\nFloats: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]\nLength: 10  # Note: doesn't include 1.0!\n\nIn [50]: # Linear spacing - specify number of points instead of step\nIn [51]: linear = np.linspace(0, 1, 11)  # 11 points from 0 to 1 inclusive\nIn [52]: print(f\"Linear: {linear}\")\nLinear: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n\nIn [53]: # Logarithmic spacing - for log-scale plots or sampling\nIn [54]: logarithmic = np.logspace(0, 3, 4)  # 10^0 to 10^3\nIn [55]: print(f\"Logarithmic: {logarithmic}\")\nLogarithmic: [   1.   10.  100. 1000.]","position":{"start":{"line":286,"column":1},"end":{"line":313,"column":1}},"key":"SwPRAF7KBv"},{"type":"heading","depth":3,"position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"key":"FyrvVmUU2D"},{"type":"strong","position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"key":"r5zC0Kv9OH"}],"key":"dUueOf18JF"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding","implicit":true,"key":"iMJdS8Odlw"},{"type":"paragraph","position":{"start":{"line":317,"column":1},"end":{"line":317,"column":1}},"children":[{"type":"text","value":"What’s the difference between ","position":{"start":{"line":317,"column":1},"end":{"line":317,"column":1}},"key":"WmxqTTh8T9"},{"type":"inlineCode","value":"np.arange(0, 1, 0.1)","position":{"start":{"line":317,"column":1},"end":{"line":317,"column":1}},"key":"UgXSVzH6K8"},{"type":"text","value":" and ","position":{"start":{"line":317,"column":1},"end":{"line":317,"column":1}},"key":"LmB1IsCGli"},{"type":"inlineCode","value":"np.linspace(0, 1, 11)","position":{"start":{"line":317,"column":1},"end":{"line":317,"column":1}},"key":"toULQaPzNS"},{"type":"text","value":"?","position":{"start":{"line":317,"column":1},"end":{"line":317,"column":1}},"key":"gXTk3m1INc"}],"key":"qJeUnAdj4v"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"sigcV33mVC"}],"key":"kTTTzNSURc"},{"type":"paragraph","children":[{"type":"text","value":"Both create arrays from 0 to 1, but they work fundamentally differently and this matters for scientific computing:","key":"YplkLFPQzB"}],"key":"i99o8fXhta"},{"type":"paragraph","children":[{"type":"inlineCode","value":"np.arange(0, 1, 0.1)","key":"I6YW13Q0Wc"},{"type":"text","value":" uses a step size of 0.1, similar to a for loop with floating-point increment. Due to floating-point arithmetic limitations, this can accumulate rounding errors and might not include exactly 1.0. The exact number of points depends on floating-point precision.","key":"yTUgUfJKWp"}],"key":"LpMzMOWAdJ"},{"type":"paragraph","children":[{"type":"inlineCode","value":"np.linspace(0, 1, 11)","key":"U9WhSyLCvP"},{"type":"text","value":" creates exactly 11 evenly spaced points including both endpoints. It calculates the spacing to ensure exact endpoints and uniform distribution. This is more numerically stable and predictable.","key":"wwJ8hm6Eh6"}],"key":"zl26spCIM6"},{"type":"code","lang":"python","meta":null,"value":"# Demonstration of the subtle but important difference\narange_arr = np.arange(0, 1, 0.1)\nlinspace_arr = np.linspace(0, 1, 11)\n\nprint(f\"arange length: {len(arange_arr)}\")      # 10 (doesn't include 1.0)\nprint(f\"linspace length: {len(linspace_arr)}\")  # 11 (includes both endpoints)\nprint(f\"arange last: {arange_arr[-1]}\")         # 0.9\nprint(f\"linspace last: {linspace_arr[-1]}\")     # 1.0\n\n# Floating-point precision issues with arange\nstep = 0.1\naccumulated = 0.0\nfor i in range(3):\n    accumulated += step\nprint(f\"0.1 + 0.1 + 0.1 = {accumulated}\")  # 0.30000000000000004 (not 0.3!)","key":"mztF6iV5uk"},{"type":"paragraph","children":[{"type":"text","value":"Use ","key":"Q5sjF1l56Q"},{"type":"inlineCode","value":"linspace","key":"JwKLFh30pM"},{"type":"text","value":" when you need a specific number of points including endpoints (common in plotting and interpolation). Use ","key":"kqUwWs3gRv"},{"type":"inlineCode","value":"arange","key":"u7efuP52M8"},{"type":"text","value":" for integer sequences or when you need a specific step size and can tolerate floating-point imprecision.","key":"PYkG86sQrk"}],"key":"xMWOioAtvR"}],"key":"gFnAKdAPll"},{"type":"heading","depth":3,"position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"children":[{"type":"text","value":"Random Arrays","position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"key":"d9LtmBkICR"}],"identifier":"random-arrays","label":"Random Arrays","html_id":"random-arrays","implicit":true,"key":"zjsDksJ7JT"},{"type":"paragraph","position":{"start":{"line":352,"column":1},"end":{"line":352,"column":1}},"children":[{"type":"text","value":"Scientific computing often needs random data for Monte Carlo simulations, statistical sampling, or algorithm testing:","position":{"start":{"line":352,"column":1},"end":{"line":352,"column":1}},"key":"HIwkGdm0wE"}],"key":"iA9Ty1wcxR"},{"type":"code","lang":"python","value":"In [56]: # ALWAYS set seed for reproducibility in scientific work!\nIn [57]: np.random.seed(42)\n\nIn [58]: # Uniform distribution [0, 1)\nIn [59]: uniform = np.random.rand(3, 3)\nIn [60]: print(f\"Uniform:\\n{uniform}\")\nUniform:\n[[0.374 0.950 0.731]\n [0.598 0.156 0.155]\n [0.058 0.866 0.601]]\n\nIn [61]: # Standard normal distribution (mean=0, std=1)\nIn [62]: normal = np.random.randn(3, 3)\nIn [63]: print(f\"Normal:\\n{normal}\")\nNormal:\n[[ 0.708 -0.757 -1.316]\n [ 0.386  1.749  0.297]\n [-0.814 -0.454 -1.150]]\n\nIn [64]: # Random integers for discrete problems\nIn [65]: integers = np.random.randint(0, 10, size=(2, 4))\nIn [66]: print(f\"Random integers:\\n{integers}\")\nRandom integers:\n[[7 6 6 8]\n [8 3 9 8]]\n\nIn [67]: # Poisson distribution for photon counting\nIn [68]: # Mean photon count = 5 photons per pixel\nIn [69]: photon_counts = np.random.poisson(lam=5, size=10)\nIn [70]: print(f\"Photon counts: {photon_counts}\")\nPhoton counts: [3 5 6 3 8 4 3 3 6 2]","position":{"start":{"line":354,"column":1},"end":{"line":386,"column":1}},"key":"FvKV4tYPIJ"},{"type":"paragraph","position":{"start":{"line":388,"column":1},"end":{"line":388,"column":1}},"children":[{"type":"text","value":"Note: NumPy 1.17+ introduced a new random API with better practices for parallel computing:","position":{"start":{"line":388,"column":1},"end":{"line":388,"column":1}},"key":"kbZKI4wzRw"}],"key":"yXrQeAkgOf"},{"type":"code","lang":"python","value":"# Modern approach (recommended for new code)\nrng = np.random.default_rng(seed=42)  # Create generator\ndata = rng.standard_normal((3, 3))    # Use generator methods","position":{"start":{"line":389,"column":1},"end":{"line":393,"column":1}},"key":"MiJofOmQkV"},{"type":"heading","depth":2,"position":{"start":{"line":395,"column":1},"end":{"line":395,"column":1}},"children":[{"type":"text","value":"7.3 Array Attributes and Memory Layout","position":{"start":{"line":395,"column":1},"end":{"line":395,"column":1}},"key":"AbRZkYkeYa"}],"identifier":"id-7-3-array-attributes-and-memory-layout","label":"7.3 Array Attributes and Memory Layout","html_id":"id-7-3-array-attributes-and-memory-layout","implicit":true,"key":"WL9XDAv3PN"},{"type":"paragraph","position":{"start":{"line":397,"column":1},"end":{"line":397,"column":1}},"children":[{"type":"text","value":"Understanding array attributes and memory layout is crucial for writing efficient code and debugging unexpected behavior.","position":{"start":{"line":397,"column":1},"end":{"line":397,"column":1}},"key":"qufBknjaln"}],"key":"akO7dSbnbm"},{"type":"heading","depth":3,"position":{"start":{"line":399,"column":1},"end":{"line":399,"column":1}},"children":[{"type":"text","value":"Essential Attributes","position":{"start":{"line":399,"column":1},"end":{"line":399,"column":1}},"key":"k6ARLjR6MN"}],"identifier":"essential-attributes","label":"Essential Attributes","html_id":"essential-attributes","implicit":true,"key":"RSSy8grLtx"},{"type":"paragraph","position":{"start":{"line":401,"column":1},"end":{"line":401,"column":1}},"children":[{"type":"text","value":"Every NumPy array is an object with attributes that completely describe its structure:","position":{"start":{"line":401,"column":1},"end":{"line":401,"column":1}},"key":"MF6TWPda6m"}],"key":"xrHdgughWG"},{"type":"code","lang":"python","value":"In [71]: # Create a 3D array for demonstration\nIn [72]: arr = np.random.randn(2, 3, 4)  # 2 blocks, 3 rows, 4 columns each\n\nIn [73]: print(f\"Shape: {arr.shape}\")        # Dimensions (most important!)\nIn [74]: print(f\"Size: {arr.size}\")          # Total number of elements\nIn [75]: print(f\"Ndim: {arr.ndim}\")          # Number of dimensions\nIn [76]: print(f\"Dtype: {arr.dtype}\")        # Data type of elements\nIn [77]: print(f\"Itemsize: {arr.itemsize}\")  # Bytes per element\nIn [78]: print(f\"Nbytes: {arr.nbytes}\")      # Total memory usage\nShape: (2, 3, 4)\nSize: 24\nNdim: 3\nDtype: float64\nItemsize: 8\nNbytes: 192\n\nIn [79]: # Memory layout information (advanced but important)\nIn [80]: print(f\"Strides: {arr.strides}\")  # Bytes to jump for next element\nIn [81]: print(f\"C-contiguous: {arr.flags['C_CONTIGUOUS']}\")\nIn [82]: print(f\"Fortran-contiguous: {arr.flags['F_CONTIGUOUS']}\")\nStrides: (96, 32, 8)  # Jump 96 bytes for next block, 32 for next row, 8 for next element\nC-contiguous: True\nFortran-contiguous: False","position":{"start":{"line":403,"column":1},"end":{"line":427,"column":1}},"key":"jiFa5t5bQ7"},{"type":"heading","depth":3,"position":{"start":{"line":429,"column":1},"end":{"line":429,"column":1}},"children":[{"type":"text","value":"Memory Layout: Row-Major vs Column-Major","position":{"start":{"line":429,"column":1},"end":{"line":429,"column":1}},"key":"k2OnMID94i"}],"identifier":"memory-layout-row-major-vs-column-major","label":"Memory Layout: Row-Major vs Column-Major","html_id":"memory-layout-row-major-vs-column-major","implicit":true,"key":"wJpeRAvvHq"},{"type":"paragraph","position":{"start":{"line":431,"column":1},"end":{"line":431,"column":1}},"children":[{"type":"text","value":"NumPy can store multidimensional arrays in different memory layouts. Understanding this is crucial for performance when working with large datasets or interfacing with other languages:","position":{"start":{"line":431,"column":1},"end":{"line":431,"column":1}},"key":"FYK21RW43t"}],"key":"n1N2MwCDPy"},{"type":"mermaid","value":"flowchart LR\n    subgraph \"Row-Major (C-style, NumPy default)\"\n        RM[2D Array<br/>[[1,2,3],<br/>[4,5,6]]] --> RMM[Memory: 1|2|3|4|5|6]\n        RMM --> RMD[Traverse rows first]\n    end\n    \n    subgraph \"Column-Major (Fortran-style)\"\n        CM[2D Array<br/>[[1,2,3],<br/>[4,5,6]]] --> CMM[Memory: 1|4|2|5|3|6]\n        CMM --> CMD[Traverse columns first]\n    end\n    \n    style RM fill:#9f9\n    style CM fill:#f9f","key":"Wvs1W1rj5v"},{"type":"code","lang":"python","value":"In [83]: # Default is C-order (row-major) - rows are contiguous\nIn [84]: c_array = np.array([[1, 2, 3],\n   ...:                       [4, 5, 6]])\nIn [85]: print(f\"C-order strides: {c_array.strides}\")\nC-order strides: (24, 8)  # 24 bytes to next row (3 elements × 8 bytes)\n\nIn [86]: # Can create Fortran-order (column-major) - columns are contiguous\nIn [87]: f_array = np.array([[1, 2, 3],\n   ...:                       [4, 5, 6]], order='F')\nIn [88]: print(f\"F-order strides: {f_array.strides}\")\nF-order strides: (8, 16)  # 8 bytes to next row (1 element × 8 bytes)\n\nIn [89]: # Performance implications: access contiguous data when possible\nIn [90]: large = np.random.randn(1000, 1000)\n\nIn [91]: # Summing along rows (axis=1) is fast for C-order\nIn [92]: # because we read memory sequentially\nIn [93]: %timeit large.sum(axis=1)\n574 µs ± 12.3 µs per loop\n\nIn [94]: # Summing along columns (axis=0) is slower for C-order\nIn [95]: # because we jump around in memory\nIn [96]: %timeit large.sum(axis=0)\n1.28 ms ± 23.4 µs per loop  # 2x slower!\n\n# Why? CPU cache works best with sequential memory access","position":{"start":{"line":449,"column":1},"end":{"line":476,"column":1}},"key":"kyN3WVjUxe"},{"type":"heading","depth":3,"position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"children":[{"type":"text","value":"Data Types and Memory Usage","position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"key":"vnJNV57v8J"}],"identifier":"data-types-and-memory-usage","label":"Data Types and Memory Usage","html_id":"data-types-and-memory-usage","implicit":true,"key":"PcpUqi74tl"},{"type":"paragraph","position":{"start":{"line":480,"column":1},"end":{"line":480,"column":1}},"children":[{"type":"text","value":"NumPy provides precise control over data types, crucial for memory efficiency and numerical precision in scientific computing:","position":{"start":{"line":480,"column":1},"end":{"line":480,"column":1}},"key":"lmxTam0hwx"}],"key":"FacgzsqcTC"},{"type":"code","lang":"python","value":"In [97]: # Integer types with different ranges and memory usage\nIn [98]: int8 = np.array([1, 2, 3], dtype=np.int8)    # -128 to 127\nIn [99]: int16 = np.array([1, 2, 3], dtype=np.int16)  # -32,768 to 32,767\nIn [100]: int32 = np.array([1, 2, 3], dtype=np.int32)  # ~±2 billion\nIn [101]: int64 = np.array([1, 2, 3], dtype=np.int64)  # ~±9 quintillion\n\nIn [102]: print(f\"int8 uses {int8.nbytes} bytes for 3 elements\")\nIn [103]: print(f\"int64 uses {int64.nbytes} bytes for 3 elements\")\nint8 uses 3 bytes for 3 elements\nint64 uses 24 bytes for 3 elements  # 8x more memory!\n\nIn [104]: # Floating-point types - precision vs memory tradeoff\nIn [105]: float16 = np.array([1.0, 2.0], dtype=np.float16)  # Half precision\nIn [106]: float32 = np.array([1.0, 2.0], dtype=np.float32)  # Single precision\nIn [107]: float64 = np.array([1.0, 2.0], dtype=np.float64)  # Double precision\n\nIn [108]: # Complex numbers for signal processing or quantum mechanics\nIn [109]: complex_arr = np.array([1+2j, 3+4j], dtype=np.complex128)\nIn [110]: print(f\"Complex array: {complex_arr}\")\nIn [111]: print(f\"Real parts: {complex_arr.real}\")\nIn [112]: print(f\"Imaginary parts: {complex_arr.imag}\")\nComplex array: [1.+2.j 3.+4.j]\nReal parts: [1. 3.]\nImaginary parts: [2. 4.]","position":{"start":{"line":482,"column":1},"end":{"line":507,"column":1}},"key":"Eu7YZxFHB6"},{"type":"heading","depth":3,"position":{"start":{"line":509,"column":1},"end":{"line":509,"column":1}},"children":[{"type":"text","value":"🔊 ","position":{"start":{"line":509,"column":1},"end":{"line":509,"column":1}},"key":"Nwfkh1RB7z"},{"type":"strong","position":{"start":{"line":509,"column":1},"end":{"line":509,"column":1}},"children":[{"type":"text","value":"Performance Profile: Data Type Impact","position":{"start":{"line":509,"column":1},"end":{"line":509,"column":1}},"key":"sEwfGmJfCt"}],"key":"m8pDS5BhHh"}],"identifier":"id-performance-profile-data-type-impact","label":"🔊 Performance Profile: Data Type Impact","html_id":"id-performance-profile-data-type-impact","implicit":true,"key":"wsuV974UKV"},{"type":"code","lang":"python","value":"# Memory and speed tradeoffs with different dtypes\nn = 10_000_000  # 10 million elements\n\n# Create arrays with different precision\nfloat64_arr = np.random.randn(n)  # Default double precision\nfloat32_arr = float64_arr.astype(np.float32)  # Single precision\nfloat16_arr = float64_arr.astype(np.float16)  # Half precision\n\nprint(f\"float64: {float64_arr.nbytes / 1e6:.1f} MB\")\nprint(f\"float32: {float32_arr.nbytes / 1e6:.1f} MB\")\nprint(f\"float16: {float16_arr.nbytes / 1e6:.1f} MB\")\n# Output:\n# float64: 80.0 MB\n# float32: 40.0 MB  \n# float16: 20.0 MB\n\n# Performance comparison\n%timeit float64_arr.sum()  # 7.92 ms\n%timeit float32_arr.sum()  # 3.96 ms (2x faster!)\n%timeit float16_arr.sum()  # 15.8 ms (slower - limited hardware support)\n\n# But beware precision loss!\nlarge_number = 1e10\nsmall_number = 1.0\nprint(f\"float64: {large_number + small_number}\")  # 10000000001.0 (correct)\nprint(f\"float32: {np.float32(large_number) + np.float32(small_number)}\")  # 10000000000.0 (lost precision!)","position":{"start":{"line":511,"column":1},"end":{"line":538,"column":1}},"key":"bmo4x1JFqc"},{"type":"paragraph","position":{"start":{"line":540,"column":1},"end":{"line":540,"column":1}},"children":[{"type":"text","value":"Choose dtypes based on your scientific requirements: float64 for high precision calculations, float32 for large datasets where some precision loss is acceptable, integers for counting and indexing.","position":{"start":{"line":540,"column":1},"end":{"line":540,"column":1}},"key":"IAKOz1n41v"}],"key":"L8F5J5KJDO"},{"type":"heading","depth":2,"position":{"start":{"line":542,"column":1},"end":{"line":542,"column":1}},"children":[{"type":"text","value":"7.4 Indexing and Slicing: Views vs Copies","position":{"start":{"line":542,"column":1},"end":{"line":542,"column":1}},"key":"Ha0zB4XUZJ"}],"identifier":"id-7-4-indexing-and-slicing-views-vs-copies","label":"7.4 Indexing and Slicing: Views vs Copies","html_id":"id-7-4-indexing-and-slicing-views-vs-copies","implicit":true,"key":"vteMivTzzJ"},{"type":"paragraph","position":{"start":{"line":544,"column":1},"end":{"line":544,"column":1}},"children":[{"type":"text","value":"NumPy’s indexing is powerful but has subtleties that can cause bugs if not understood properly. The key concept is understanding when NumPy creates a view (shared memory) versus a copy (independent memory).","position":{"start":{"line":544,"column":1},"end":{"line":544,"column":1}},"key":"s99cyOVDud"}],"key":"MdC9cBnZhL"},{"type":"heading","depth":3,"position":{"start":{"line":546,"column":1},"end":{"line":546,"column":1}},"children":[{"type":"text","value":"Basic Indexing (Creates Views)","position":{"start":{"line":546,"column":1},"end":{"line":546,"column":1}},"key":"zzu4xkgVGc"}],"identifier":"basic-indexing-creates-views","label":"Basic Indexing (Creates Views)","html_id":"basic-indexing-creates-views","implicit":true,"key":"Q1PIuxCD3T"},{"type":"paragraph","position":{"start":{"line":548,"column":1},"end":{"line":548,"column":1}},"children":[{"type":"text","value":"Basic slicing with integers and colons creates views that share memory with the original array:","position":{"start":{"line":548,"column":1},"end":{"line":548,"column":1}},"key":"QaevmJ2mmI"}],"key":"PfgDneKdm1"},{"type":"code","lang":"python","value":"In [113]: # 1D indexing - similar to Python lists\nIn [114]: arr = np.arange(10)\nIn [115]: print(f\"Original: {arr}\")\nIn [116]: print(f\"Element at index 3: {arr[3]}\")\nIn [117]: print(f\"Slice [2:5]: {arr[2:5]}\")\nIn [118]: print(f\"Every 2nd element: {arr[::2]}\")\nIn [119]: print(f\"Reverse: {arr[::-1]}\")\nOriginal: [0 1 2 3 4 5 6 7 8 9]\nElement at index 3: 3\nSlice [2:5]: [2 3 4]\nEvery 2nd element: [0 2 4 6 8]\nReverse: [9 8 7 6 5 4 3 2 1 0]\n\nIn [120]: # CRITICAL: Slices are views, not copies!\nIn [121]: slice_view = arr[2:5]\nIn [122]: slice_view[0] = 999  # Modifying the view\nIn [123]: print(f\"Original after modification: {arr}\")\nOriginal after modification: [  0   1 999   3   4   5   6   7   8   9]\n# The original array changed!","position":{"start":{"line":550,"column":1},"end":{"line":570,"column":1}},"key":"rs12dURVPb"},{"type":"heading","depth":3,"position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"key":"kGxL99eEzt"},{"type":"strong","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Unexpected Mutation","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"key":"ALpUwTOmw7"}],"key":"O3YbXtsond"}],"identifier":"id-common-bug-alert-unexpected-mutation","label":"⚠️ Common Bug Alert: Unexpected Mutation","html_id":"id-common-bug-alert-unexpected-mutation","implicit":true,"key":"Wncc4MPb2E"},{"type":"code","lang":"python","value":"# DANGEROUS: Functions that modify views change the original!\ndef process_middle(data):\n    \"\"\"Process middle section of data - has a hidden side effect!\"\"\"\n    middle = data[len(data)//4:3*len(data)//4]  # This is a view!\n    middle *= 2  # This modifies the original array!\n    return middle\n\noriginal = np.arange(10)\nprint(f\"Before: {original}\")\nresult = process_middle(original)\nprint(f\"After: {original}\")  # Original is changed unexpectedly!\n# Before: [0 1 2 3 4 5 6 7 8 9]\n# After: [0 1 4 6 8 5 6 7 8 9]\n\n# SAFE: Explicitly copy when you need independence\ndef process_middle_safe(data):\n    \"\"\"Process middle section without side effects.\"\"\"\n    middle = data[len(data)//4:3*len(data)//4].copy()  # Explicit copy\n    middle *= 2  # Only affects the copy\n    return middle","position":{"start":{"line":574,"column":1},"end":{"line":595,"column":1}},"key":"aILuW0tg9h"},{"type":"heading","depth":3,"position":{"start":{"line":597,"column":1},"end":{"line":597,"column":1}},"children":[{"type":"text","value":"Multidimensional Indexing","position":{"start":{"line":597,"column":1},"end":{"line":597,"column":1}},"key":"NyMxSrVNVy"}],"identifier":"multidimensional-indexing","label":"Multidimensional Indexing","html_id":"multidimensional-indexing","implicit":true,"key":"ziMVx05lCY"},{"type":"paragraph","position":{"start":{"line":599,"column":1},"end":{"line":599,"column":1}},"children":[{"type":"text","value":"For 2D arrays and higher dimensions, indexing becomes more sophisticated:","position":{"start":{"line":599,"column":1},"end":{"line":599,"column":1}},"key":"ynX3z1EAqf"}],"key":"cJHSO4LvY8"},{"type":"code","lang":"python","value":"In [124]: # Create a 2D array (matrix)\nIn [125]: matrix = np.array([[1, 2, 3],\n    ...:                      [4, 5, 6],\n    ...:                      [7, 8, 9]])\n\nIn [126]: # Single element access\nIn [127]: print(f\"Element at row 1, column 2: {matrix[1, 2]}\")\nElement at row 1, column 2: 6\n\nIn [128]: # Entire row or column extraction\nIn [129]: print(f\"Row 1: {matrix[1, :]}\")     # Can also write matrix[1]\nIn [130]: print(f\"Column 2: {matrix[:, 2]}\")\nRow 1: [4 5 6]\nColumn 2: [3 6 9]\n\nIn [131]: # Submatrix extraction\nIn [132]: print(f\"Top-left 2x2 submatrix:\\n{matrix[:2, :2]}\")\nTop-left 2x2 submatrix:\n[[1 2]\n [4 5]]\n\nIn [133]: # Strided access for sampling\nIn [134]: print(f\"Every other element:\\n{matrix[::2, ::2]}\")\nEvery other element:\n[[1 3]\n [7 9]]","position":{"start":{"line":601,"column":1},"end":{"line":628,"column":1}},"key":"l8VaBIXd5g"},{"type":"heading","depth":3,"position":{"start":{"line":630,"column":1},"end":{"line":630,"column":1}},"children":[{"type":"text","value":"Fancy Indexing (Creates Copies)","position":{"start":{"line":630,"column":1},"end":{"line":630,"column":1}},"key":"UDs7h1uVcP"}],"identifier":"fancy-indexing-creates-copies","label":"Fancy Indexing (Creates Copies)","html_id":"fancy-indexing-creates-copies","implicit":true,"key":"spAgLzh1Hh"},{"type":"paragraph","position":{"start":{"line":632,"column":1},"end":{"line":632,"column":1}},"children":[{"type":"text","value":"Using arrays or lists as indices creates copies, not views. This is called “fancy indexing”:","position":{"start":{"line":632,"column":1},"end":{"line":632,"column":1}},"key":"YzADxgYmcB"}],"key":"ecO7cGwZYo"},{"type":"code","lang":"python","value":"In [135]: arr = np.arange(10) * 10  # [0, 10, 20, ..., 90]\n\nIn [136]: # Integer array indexing\nIn [137]: indices = np.array([1, 3, 5])\nIn [138]: selected = arr[indices]  # This is a COPY!\nIn [139]: print(f\"Selected elements: {selected}\")\nSelected elements: [10 30 50]\n\nIn [140]: selected[0] = 999  # Modify the copy\nIn [141]: print(f\"Original unchanged: {arr}\")\nOriginal unchanged: [ 0 10 20 30 40 50 60 70 80 90]\n\nIn [142]: # Boolean indexing (masking) - also creates copies\nIn [143]: mask = arr > 40\nIn [144]: print(f\"Boolean mask: {mask}\")\nIn [145]: filtered = arr[mask]  # Copy of elements where mask is True\nIn [146]: print(f\"Filtered elements: {filtered}\")\nBoolean mask: [False False False False False  True  True  True  True  True]\nFiltered elements: [50 60 70 80 90]\n\nIn [147]: # Combining conditions with & (and), | (or), ~ (not)\nIn [148]: # Note: Use &, not 'and' for element-wise operations\nIn [149]: complex_mask = (arr > 20) & (arr < 70)\nIn [150]: print(f\"Complex filter result: {arr[complex_mask]}\")\nComplex filter result: [30 40 50 60]","position":{"start":{"line":634,"column":1},"end":{"line":660,"column":1}},"key":"M7VguAJ5Qn"},{"type":"heading","depth":3,"position":{"start":{"line":662,"column":1},"end":{"line":662,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":662,"column":1},"end":{"line":662,"column":1}},"key":"fRgHbBofvK"},{"type":"strong","position":{"start":{"line":662,"column":1},"end":{"line":662,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: Views vs Copies","position":{"start":{"line":662,"column":1},"end":{"line":662,"column":1}},"key":"OZU26xEoRA"}],"key":"LFst9PIyOB"}],"identifier":"id-computational-thinking-box-views-vs-copies","label":"📦 Computational Thinking Box: Views vs Copies","html_id":"id-computational-thinking-box-views-vs-copies","implicit":true,"key":"b6UPwn352f"},{"type":"code","lang":"","value":"PATTERN: Memory Efficiency Through Views\n\nViews are NumPy's mechanism for providing different perspectives \non the same underlying data without copying it. This pattern is \ncrucial for both memory efficiency and performance.\n\nWhen NumPy creates views (shares memory):\n- Basic slicing: arr[1:5], arr[:, 2], arr[::2]\n- Reshaping: arr.reshape(new_shape)\n- Transposing: arr.T\n- Type casting sometimes: arr.view(new_dtype)\n\nWhen NumPy creates copies (independent memory):\n- Fancy indexing: arr[[1,3,5]], arr[arr > 0]\n- Explicit copy: arr.copy()\n- Operations that change size: arr.flatten()\n\nTesting if something is a view:\n    if arr.base is not None:\n        print(\"arr is a view of\", arr.base)\n    else:\n        print(\"arr owns its data\")\n\nThis pattern appears throughout scientific computing:\n- Pandas DataFrames (often views of NumPy arrays)\n- Memory-mapped files (views of disk data)\n- GPU computing (minimizing expensive memory transfers)\n\nUnderstanding views vs copies helps you:\n1. Avoid unexpected data modification\n2. Minimize memory usage with large datasets\n3. Write more efficient algorithms","position":{"start":{"line":664,"column":1},"end":{"line":697,"column":1}},"key":"xzKR7psVJO"},{"type":"heading","depth":2,"position":{"start":{"line":699,"column":1},"end":{"line":699,"column":1}},"children":[{"type":"text","value":"7.5 Vectorization: Thinking in Arrays","position":{"start":{"line":699,"column":1},"end":{"line":699,"column":1}},"key":"AbpTHafvFI"}],"identifier":"id-7-5-vectorization-thinking-in-arrays","label":"7.5 Vectorization: Thinking in Arrays","html_id":"id-7-5-vectorization-thinking-in-arrays","implicit":true,"key":"K4jzvahpTE"},{"type":"paragraph","position":{"start":{"line":701,"column":1},"end":{"line":701,"column":1}},"children":[{"type":"text","value":"Vectorization is the key to NumPy’s performance and elegance. It means expressing operations on entire arrays rather than individual elements, pushing loops into compiled code.","position":{"start":{"line":701,"column":1},"end":{"line":701,"column":1}},"key":"c7ScdDjIoX"}],"key":"y8wJgn7nlz"},{"type":"heading","depth":3,"position":{"start":{"line":703,"column":1},"end":{"line":703,"column":1}},"children":[{"type":"text","value":"Universal Functions (ufuncs)","position":{"start":{"line":703,"column":1},"end":{"line":703,"column":1}},"key":"Mb5H5PRLon"}],"identifier":"universal-functions-ufuncs","label":"Universal Functions (ufuncs)","html_id":"universal-functions-ufuncs","implicit":true,"key":"Clyn5qXpXu"},{"type":"paragraph","position":{"start":{"line":705,"column":1},"end":{"line":705,"column":1}},"children":[{"type":"text","value":"NumPy provides “universal functions” that operate element-wise on arrays with optimized C implementations:","position":{"start":{"line":705,"column":1},"end":{"line":705,"column":1}},"key":"C3rdNK0Q2S"}],"key":"PnLXFRBQgR"},{"type":"code","lang":"python","value":"In [151]: # Arithmetic operations are vectorized\nIn [152]: a = np.array([1, 2, 3, 4])\nIn [153]: b = np.array([10, 20, 30, 40])\n\nIn [154]: # These operations happen in parallel in C\nIn [155]: print(f\"Addition: {a + b}\")\nIn [156]: print(f\"Multiplication: {a * b}\")\nIn [157]: print(f\"Power: {a ** 2}\")\nAddition: [11 22 33 44]\nMultiplication: [10 40 90 160]\nPower: [ 1  4  9 16]\n\nIn [158]: # Mathematical functions are vectorized\nIn [159]: angles = np.array([0, np.pi/4, np.pi/2, np.pi])\nIn [160]: print(f\"Sin: {np.sin(angles)}\")\nIn [161]: print(f\"Cos: {np.cos(angles)}\")\nSin: [0.000e+00 7.071e-01 1.000e+00 1.225e-16]\nCos: [ 1.000e+00  7.071e-01  6.123e-17 -1.000e+00]\n\nIn [162]: # Comparison operations return boolean arrays\nIn [163]: arr = np.arange(5)\nIn [164]: print(f\"Greater than 2: {arr > 2}\")\nIn [165]: print(f\"Equal to 3: {arr == 3}\")\nGreater than 2: [False False False  True  True]\nEqual to 3: [False False False  True False]","position":{"start":{"line":707,"column":1},"end":{"line":733,"column":1}},"key":"FAX1wbChHz"},{"type":"heading","depth":3,"position":{"start":{"line":735,"column":1},"end":{"line":735,"column":1}},"children":[{"type":"text","value":"Vectorizing Custom Functions","position":{"start":{"line":735,"column":1},"end":{"line":735,"column":1}},"key":"QHPRKTEqsK"}],"identifier":"vectorizing-custom-functions","label":"Vectorizing Custom Functions","html_id":"vectorizing-custom-functions","implicit":true,"key":"QzEQLBD3dg"},{"type":"paragraph","position":{"start":{"line":737,"column":1},"end":{"line":737,"column":1}},"children":[{"type":"text","value":"You can vectorize your own functions, though true vectorization (using NumPy operations throughout) is faster than using ","position":{"start":{"line":737,"column":1},"end":{"line":737,"column":1}},"key":"ZzuFL7UllM"},{"type":"inlineCode","value":"np.vectorize","position":{"start":{"line":737,"column":1},"end":{"line":737,"column":1}},"key":"MaHuNK7gbG"},{"type":"text","value":":","position":{"start":{"line":737,"column":1},"end":{"line":737,"column":1}},"key":"cgvFkwbHXj"}],"key":"hVhgxgQZM3"},{"type":"code","lang":"python","value":"In [166]: # Example: photon energy from wavelength\nIn [167]: def photon_energy_scalar(wavelength_nm):\n    ...:     \"\"\"\n    ...:     Calculate photon energy in eV from wavelength in nm.\n    ...:     E = hc/λ where h is Planck constant, c is speed of light\n    ...:     \"\"\"\n    ...:     h = 4.135667e-15  # Planck constant in eV·s\n    ...:     c = 2.998e17      # Speed of light in nm/s\n    ...:     return h * c / wavelength_nm\n\nIn [168]: # Works on single values\nIn [169]: print(f\"Energy at 500nm: {photon_energy_scalar(500):.3f} eV\")\nEnergy at 500nm: 2.480 eV\n\nIn [170]: # np.vectorize for convenience (but not optimal performance)\nIn [171]: photon_energy_vec = np.vectorize(photon_energy_scalar)\nIn [172]: wavelengths = np.array([400, 500, 600, 700])  # nm\nIn [173]: print(f\"Energies: {photon_energy_vec(wavelengths)}\")\nEnergies: [3.099 2.480 2.066 1.771]\n\nIn [174]: # Better: write truly vectorized code using NumPy operations\nIn [175]: def photon_energy_fast(wavelength_nm):\n    ...:     \"\"\"Truly vectorized version - works on arrays natively.\"\"\"\n    ...:     h = 4.135667e-15  # eV·s\n    ...:     c = 2.998e17      # nm/s\n    ...:     return h * c / wavelength_nm  # NumPy handles arrays automatically\n\nIn [176]: # Performance comparison\nIn [177]: large_wavelengths = np.random.uniform(300, 800, 100000)\nIn [178]: %timeit photon_energy_vec(large_wavelengths)   # 35.2 ms\nIn [179]: %timeit photon_energy_fast(large_wavelengths)  # 326 µs\n# True vectorization is 100x faster!","position":{"start":{"line":739,"column":1},"end":{"line":772,"column":1}},"key":"rCpACIU4Tx"},{"type":"heading","depth":3,"position":{"start":{"line":774,"column":1},"end":{"line":774,"column":1}},"children":[{"type":"text","value":"Aggregation Functions","position":{"start":{"line":774,"column":1},"end":{"line":774,"column":1}},"key":"Sil18iN7cV"}],"identifier":"aggregation-functions","label":"Aggregation Functions","html_id":"aggregation-functions","implicit":true,"key":"OETjB2Lea5"},{"type":"paragraph","position":{"start":{"line":776,"column":1},"end":{"line":776,"column":1}},"children":[{"type":"text","value":"Aggregations reduce arrays to scalars or smaller arrays, with optimized implementations for common operations:","position":{"start":{"line":776,"column":1},"end":{"line":776,"column":1}},"key":"T4r33y0U4G"}],"key":"rrownihdPY"},{"type":"code","lang":"python","value":"In [180]: # Generate sample data\nIn [181]: data = np.random.randn(1000)\n\nIn [182]: # Basic statistics - all optimized C implementations\nIn [183]: print(f\"Mean: {data.mean():.4f}\")\nIn [184]: print(f\"Standard deviation: {data.std():.4f}\")\nIn [185]: print(f\"Min: {data.min():.4f}, Max: {data.max():.4f}\")\nIn [186]: print(f\"Median: {np.median(data):.4f}\")\nMean: -0.0234\nStandard deviation: 0.9897\nMin: -3.2384, Max: 3.0234\nMedian: -0.0365\n\nIn [187]: # Percentiles for outlier detection\nIn [188]: print(f\"5th percentile: {np.percentile(data, 5):.4f}\")\nIn [189]: print(f\"95th percentile: {np.percentile(data, 95):.4f}\")\n5th percentile: -1.6422\n95th percentile: 1.5967\n\nIn [190]: # Aggregation along specific axes for multidimensional arrays\nIn [191]: matrix = np.random.randn(3, 4)\nIn [192]: print(f\"Matrix:\\n{matrix}\")\nIn [193]: print(f\"Column means (axis=0): {matrix.mean(axis=0)}\")\nIn [194]: print(f\"Row means (axis=1): {matrix.mean(axis=1)}\")\nMatrix:\n[[-0.245  1.234 -0.567  0.891]\n [ 2.345 -1.234  0.123 -0.456]\n [ 0.789 -0.012  1.234 -2.345]]\nColumn means (axis=0): [ 0.963 -0.004  0.263 -0.637]\nRow means (axis=1): [ 0.328  0.195 -0.084]","position":{"start":{"line":778,"column":1},"end":{"line":809,"column":1}},"key":"u1I0RIZB2t"},{"type":"heading","depth":3,"position":{"start":{"line":811,"column":1},"end":{"line":811,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":811,"column":1},"end":{"line":811,"column":1}},"key":"dbPWyFPphO"},{"type":"strong","position":{"start":{"line":811,"column":1},"end":{"line":811,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":811,"column":1},"end":{"line":811,"column":1}},"key":"oCFsWHRqxi"}],"key":"gsX3UJTfkO"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-1","implicit":true,"key":"yP1nW4ElWP"},{"type":"paragraph","position":{"start":{"line":813,"column":1},"end":{"line":813,"column":1}},"children":[{"type":"text","value":"Given a 2D array representing an image, how would you normalize it so all values are between 0 and 1?","position":{"start":{"line":813,"column":1},"end":{"line":813,"column":1}},"key":"JnaRn2Xqwq"}],"key":"Hjz4v8DjQF"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"x6eOptl9dC"}],"key":"jRBDMG8OgJ"},{"type":"paragraph","children":[{"type":"text","value":"There are several normalization approaches depending on your scientific requirements:","key":"IfvdsEBJXP"}],"key":"SYCQRZSChl"},{"type":"code","lang":"python","meta":null,"value":"# Create sample \"image\" data\nimage = np.random.randn(100, 100) * 50 + 128  # Centered at 128, std=50\n\n# Method 1: Min-Max normalization (scales to exact [0, 1])\ndef min_max_normalize(arr):\n    \"\"\"\n    Scale array to [0, 1] range.\n    Good for: display, when you need exact bounds\n    \"\"\"\n    return (arr - arr.min()) / (arr.max() - arr.min())\n\nnormalized1 = min_max_normalize(image)\nprint(f\"Range: [{normalized1.min():.3f}, {normalized1.max():.3f}]\")  # [0.000, 1.000]\n\n# Method 2: Clipping to known range (e.g., 0-255 for 8-bit images)\ndef clip_normalize(arr, min_val=0, max_val=255):\n    \"\"\"\n    Clip to range then normalize.\n    Good for: when you know the expected data range\n    \"\"\"\n    clipped = np.clip(arr, min_val, max_val)\n    return (clipped - min_val) / (max_val - min_val)\n\nnormalized2 = clip_normalize(image, 0, 255)\n\n# Method 3: Z-score normalization (standardization)\ndef z_score_normalize(arr):\n    \"\"\"\n    Standardize to mean=0, std=1.\n    Good for: machine learning, statistical analysis\n    Note: doesn't guarantee [0,1] range!\n    \"\"\"\n    return (arr - arr.mean()) / arr.std()\n\nstandardized = z_score_normalize(image)\nprint(f\"Mean: {standardized.mean():.6f}, Std: {standardized.std():.6f}\")\n\n# Choose based on your scientific needs!\n# - Min-max for display (guarantees [0,1])\n# - Clipping when you know valid data range\n# - Z-score for statistical processing","key":"Fgw6CI0STV"},{"type":"paragraph","children":[{"type":"text","value":"The key insight: vectorized operations make this efficient even for large images. No loops needed!","key":"TQTnYmAhVH"}],"key":"NNrB9rMMf0"}],"key":"zvNB3rVx7u"},{"type":"heading","depth":2,"position":{"start":{"line":868,"column":1},"end":{"line":868,"column":1}},"children":[{"type":"text","value":"7.6 Broadcasting: NumPy’s Superpower","position":{"start":{"line":868,"column":1},"end":{"line":868,"column":1}},"key":"wazSNWAa9B"}],"identifier":"id-7-6-broadcasting-numpys-superpower","label":"7.6 Broadcasting: NumPy’s Superpower","html_id":"id-7-6-broadcasting-numpys-superpower","implicit":true,"key":"OCFkBKr436"},{"type":"paragraph","position":{"start":{"line":870,"column":1},"end":{"line":870,"column":1}},"children":[{"type":"text","value":"Broadcasting allows NumPy to perform operations on arrays of different shapes without explicit loops or data copying. It’s one of NumPy’s most powerful and elegant features.","position":{"start":{"line":870,"column":1},"end":{"line":870,"column":1}},"key":"XOhphlWgsX"}],"key":"BBQ5REBt7Z"},{"type":"heading","depth":3,"position":{"start":{"line":872,"column":1},"end":{"line":872,"column":1}},"children":[{"type":"text","value":"The Broadcasting Rules","position":{"start":{"line":872,"column":1},"end":{"line":872,"column":1}},"key":"SEvaSDLnEA"}],"identifier":"the-broadcasting-rules","label":"The Broadcasting Rules","html_id":"the-broadcasting-rules","implicit":true,"key":"gJoosfLMCw"},{"type":"paragraph","position":{"start":{"line":874,"column":1},"end":{"line":874,"column":1}},"children":[{"type":"text","value":"Broadcasting follows strict rules to determine how arrays of different shapes can be combined. Understanding these rules is essential for writing efficient NumPy code:","position":{"start":{"line":874,"column":1},"end":{"line":874,"column":1}},"key":"hvU1NhBnjr"}],"key":"b149aPyj1X"},{"type":"mermaid","value":"flowchart TD\n    A[Arrays A and B] --> B{Compare shapes<br/>right to left}\n    B --> C{Dimensions<br/>equal?}\n    C -->|Yes| D[Compatible]\n    C -->|No| E{One dimension<br/>is 1?}\n    E -->|Yes| F[Broadcast:<br/>stretch size-1 dimension]\n    E -->|No| G[Error!<br/>Cannot broadcast]\n    \n    F --> H[Perform operation]\n    D --> H\n    \n    style D fill:#9f9\n    style F fill:#9ff\n    style G fill:#f99","key":"A4FUxdlcQt"},{"type":"paragraph","position":{"start":{"line":893,"column":1},"end":{"line":893,"column":1}},"children":[{"type":"text","value":"The rules are:","position":{"start":{"line":893,"column":1},"end":{"line":893,"column":1}},"key":"b81fNqvy6l"}],"key":"DubUOhbUTW"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":894,"column":1},"end":{"line":898,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":894,"column":1},"end":{"line":894,"column":1}},"children":[{"type":"text","value":"Compare shapes element-wise starting from the rightmost dimension","position":{"start":{"line":894,"column":1},"end":{"line":894,"column":1}},"key":"zoGzD34VKD"}],"key":"viA66PcWMN"},{"type":"listItem","spread":true,"position":{"start":{"line":895,"column":1},"end":{"line":895,"column":1}},"children":[{"type":"text","value":"Two dimensions are compatible if they’re equal or one is 1","position":{"start":{"line":895,"column":1},"end":{"line":895,"column":1}},"key":"MdHH0LRx9y"}],"key":"WGNt3Czq5x"},{"type":"listItem","spread":true,"position":{"start":{"line":896,"column":1},"end":{"line":896,"column":1}},"children":[{"type":"text","value":"Arrays with fewer dimensions are padded with 1s on the left","position":{"start":{"line":896,"column":1},"end":{"line":896,"column":1}},"key":"CZF2zDH4sX"}],"key":"ZfwW202TCs"},{"type":"listItem","spread":true,"position":{"start":{"line":897,"column":1},"end":{"line":898,"column":1}},"children":[{"type":"text","value":"After broadcasting, each dimension is the maximum of the input dimensions","position":{"start":{"line":897,"column":1},"end":{"line":897,"column":1}},"key":"GpxBqKW10F"}],"key":"ClfLm86f46"}],"key":"vT8NfLrgIj"},{"type":"code","lang":"python","value":"In [195]: # Broadcasting examples\nIn [196]: arr = np.array([[1, 2, 3],\n    ...:                   [4, 5, 6],\n    ...:                   [7, 8, 9]])\n\nIn [197]: # Scalar broadcasting (scalar is treated as shape ())\nIn [198]: print(f\"Array + 10:\\n{arr + 10}\")\nArray + 10:\n[[11 12 13]\n [14 15 16]\n [17 18 19]]\n\nIn [199]: # 1D array broadcasts to each row\nIn [200]: row_vector = np.array([100, 200, 300])  # Shape: (3,)\nIn [201]: print(f\"Array + row vector:\\n{arr + row_vector}\")\nArray + row vector:\n[[101 202 303]\n [104 205 306]\n [107 208 309]]\n\nIn [202]: # Column vector broadcasts to each column\nIn [203]: col_vector = np.array([[1000],\n    ...:                          [2000],\n    ...:                          [3000]])  # Shape: (3, 1)\nIn [204]: print(f\"Array + column vector:\\n{arr + col_vector}\")\nArray + column vector:\n[[1001 1002 1003]\n [2004 2005 2006]\n [3007 3008 3009]]","position":{"start":{"line":899,"column":1},"end":{"line":929,"column":1}},"key":"tlwS7cpTNz"},{"type":"heading","depth":3,"position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"children":[{"type":"text","value":"Practical Broadcasting Examples","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"key":"OBPDG68p7B"}],"identifier":"practical-broadcasting-examples","label":"Practical Broadcasting Examples","html_id":"practical-broadcasting-examples","implicit":true,"key":"VddnToH1GS"},{"type":"paragraph","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"children":[{"type":"text","value":"Broadcasting makes many scientific calculations elegant and efficient. An important note: broadcasting doesn’t actually copy data in memory - it creates sophisticated views with different strides, making it memory-efficient even for large arrays. This means you can “stretch” a small array to match a large one without memory concerns.","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"key":"fMBDKX62vX"}],"key":"gMT1rYIqsY"},{"type":"code","lang":"python","value":"In [205]: # Example: Normalize each column of a matrix independently\nIn [206]: # Common in machine learning preprocessing\nIn [207]: data = np.random.randn(100, 3) * [10, 50, 100] + [0, 100, 200]\nIn [208]: print(f\"Original means: {data.mean(axis=0)}\")\nIn [209]: print(f\"Original stds: {data.std(axis=0)}\")\nOriginal means: [  0.234  99.876 200.123]\nOriginal stds: [ 9.987 49.234 98.765]\n\nIn [210]: # Subtract mean and divide by std for each column\nIn [211]: # Broadcasting handles the dimension mismatch automatically\nIn [212]: normalized = (data - data.mean(axis=0)) / data.std(axis=0)\nIn [213]: print(f\"Normalized means: {normalized.mean(axis=0)}\")  # Should be ~0\nIn [214]: print(f\"Normalized stds: {normalized.std(axis=0)}\")    # Should be ~1\nNormalized means: [-1.23e-17  2.45e-17  3.67e-17]\nNormalized stds: [1. 1. 1.]\n\nIn [215]: # Example: Distance matrix between points\nIn [216]: # Calculate all pairwise distances efficiently\nIn [217]: points = np.random.randn(5, 2)  # 5 points in 2D\nIn [218]: \nIn [219]: # Use broadcasting to compute all pairwise differences\nIn [220]: # Reshape for broadcasting: (5,1,2) - (1,5,2) -> (5,5,2)\nIn [221]: diff = points[:, np.newaxis, :] - points[np.newaxis, :, :]\nIn [222]: distances = np.sqrt((diff**2).sum(axis=2))\nIn [223]: print(f\"Distance matrix shape: {distances.shape}\")\nIn [224]: print(f\"Distance from point 0 to point 1: {distances[0,1]:.3f}\")\nDistance matrix shape: (5, 5)\nDistance from point 0 to point 1: 1.234","position":{"start":{"line":935,"column":1},"end":{"line":964,"column":1}},"key":"IXBQTxoelf"},{"type":"heading","depth":3,"position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"SLOC5KFvjF"},{"type":"strong","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Broadcasting Surprises","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"TA99XIEuI2"}],"key":"hLIHBXIXod"}],"identifier":"id-common-bug-alert-broadcasting-surprises","label":"⚠️ Common Bug Alert: Broadcasting Surprises","html_id":"id-common-bug-alert-broadcasting-surprises","implicit":true,"key":"VJr9SbGzhn"},{"type":"code","lang":"python","value":"# UNEXPECTED: Broadcasting can hide dimension mismatches\na = np.array([[1, 2, 3]])     # Shape: (1, 3)\nb = np.array([[10], [20]])    # Shape: (2, 1)\n\n# This works but might not be what you intended!\ntry:\n    result = a + b  # Broadcasts to (2, 3)\n    print(f\"Unexpected broadcasting result:\\n{result}\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n# Output:\n# [[11 12 13]\n#  [21 22 23]]\n\n# DEFENSIVE: Check shapes when unsure\ndef safe_add(a, b):\n    \"\"\"Add arrays with shape checking.\"\"\"\n    if a.shape != b.shape:\n        print(f\"Warning: Broadcasting {a.shape} and {b.shape}\")\n        result_shape = np.broadcast_shapes(a.shape, b.shape)\n        print(f\"Result will have shape: {result_shape}\")\n    return a + b\n\n# EXPLICIT: Use np.newaxis to be clear about intent\nrow = np.array([1, 2, 3])\ncol = np.array([10, 20])\n\n# Make broadcasting explicit and intentional\nresult = row[np.newaxis, :] + col[:, np.newaxis]\nprint(f\"Explicit broadcasting result shape: {result.shape}\")","position":{"start":{"line":968,"column":1},"end":{"line":999,"column":1}},"key":"CZ4g5itYQr"},{"type":"heading","depth":2,"position":{"start":{"line":1001,"column":1},"end":{"line":1001,"column":1}},"children":[{"type":"text","value":"7.7 Mathematical Operations and Linear Algebra","position":{"start":{"line":1001,"column":1},"end":{"line":1001,"column":1}},"key":"hTkpEaYJJt"}],"identifier":"id-7-7-mathematical-operations-and-linear-algebra","label":"7.7 Mathematical Operations and Linear Algebra","html_id":"id-7-7-mathematical-operations-and-linear-algebra","implicit":true,"key":"SQm7Z3S5wV"},{"type":"paragraph","position":{"start":{"line":1003,"column":1},"end":{"line":1003,"column":1}},"children":[{"type":"text","value":"NumPy provides comprehensive mathematical functions optimized for arrays, from basic arithmetic to sophisticated linear algebra operations.","position":{"start":{"line":1003,"column":1},"end":{"line":1003,"column":1}},"key":"PiHjYbFwhP"}],"key":"u3xDCUobJT"},{"type":"heading","depth":3,"position":{"start":{"line":1005,"column":1},"end":{"line":1005,"column":1}},"children":[{"type":"text","value":"Element-wise Mathematics","position":{"start":{"line":1005,"column":1},"end":{"line":1005,"column":1}},"key":"I92KF76mX1"}],"identifier":"element-wise-mathematics","label":"Element-wise Mathematics","html_id":"element-wise-mathematics","implicit":true,"key":"MU8R83MZX6"},{"type":"paragraph","position":{"start":{"line":1007,"column":1},"end":{"line":1007,"column":1}},"children":[{"type":"text","value":"All standard mathematical functions are available and vectorized:","position":{"start":{"line":1007,"column":1},"end":{"line":1007,"column":1}},"key":"vOhoIkRdjd"}],"key":"S0hmZPUn38"},{"type":"code","lang":"python","value":"In [225]: # Trigonometric functions\nIn [226]: angles = np.linspace(0, 2*np.pi, 5)\nIn [227]: print(f\"Angles (radians): {angles}\")\nIn [228]: print(f\"Sin: {np.sin(angles)}\")\nIn [229]: print(f\"Arcsin of 0.5: {np.arcsin(0.5)} radians\")\nAngles (radians): [0.    1.571 3.142 4.712 6.283]\nSin: [ 0.000e+00  1.000e+00  1.225e-16 -1.000e+00 -2.449e-16]\nArcsin of 0.5: 0.524 radians\n\nIn [230]: # Exponential and logarithmic functions\nIn [231]: x = np.array([1, 2, 3])\nIn [232]: print(f\"Exp(x): {np.exp(x)}\")         # e^x\nIn [233]: print(f\"Log(x): {np.log(x)}\")         # Natural log\nIn [234]: print(f\"Log10(x): {np.log10(x)}\")     # Base-10 log\nIn [235]: print(f\"2^x: {np.exp2(x)}\")           # 2^x for information theory\nExp(x): [ 2.718  7.389 20.086]\nLog(x): [0.    0.693 1.099]\nLog10(x): [0.    0.301 0.477]\n2^x: [2. 4. 8.]","position":{"start":{"line":1009,"column":1},"end":{"line":1029,"column":1}},"key":"mskUOWXKan"},{"type":"heading","depth":3,"position":{"start":{"line":1031,"column":1},"end":{"line":1031,"column":1}},"children":[{"type":"text","value":"Linear Algebra Operations","position":{"start":{"line":1031,"column":1},"end":{"line":1031,"column":1}},"key":"UEoCd4VJMO"}],"identifier":"linear-algebra-operations","label":"Linear Algebra Operations","html_id":"linear-algebra-operations","implicit":true,"key":"huqQxDtBJe"},{"type":"paragraph","position":{"start":{"line":1033,"column":1},"end":{"line":1033,"column":1}},"children":[{"type":"text","value":"NumPy includes a comprehensive linear algebra module crucial for scientific computing:","position":{"start":{"line":1033,"column":1},"end":{"line":1033,"column":1}},"key":"aXrEC0Ah4o"}],"key":"nyXHXgGHbf"},{"type":"code","lang":"python","value":"In [236]: # Matrix multiplication - different from element-wise!\nIn [237]: A = np.array([[1, 2],\n    ...:                [3, 4]])\nIn [238]: B = np.array([[5, 6],\n    ...:                [7, 8]])\n\nIn [239]: # Element-wise multiplication (Hadamard product)\nIn [240]: print(f\"Element-wise A * B:\\n{A * B}\")\nElement-wise A * B:\n[[ 5 12]\n [21 32]]\n\nIn [241]: # True matrix multiplication\nIn [242]: print(f\"Matrix multiplication A @ B:\\n{A @ B}\")\nIn [243]: # Also: np.dot(A, B) or np.matmul(A, B)\nMatrix multiplication A @ B:\n[[19 22]\n [43 50]]\n\nIn [244]: # Essential linear algebra operations\nIn [245]: matrix = np.array([[3, 1],\n    ...:                      [1, 2]])\n\nIn [246]: # Determinant\nIn [247]: det = np.linalg.det(matrix)\nIn [248]: print(f\"Determinant: {det:.3f}\")\nDeterminant: 5.000\n\nIn [249]: # Eigenvalues and eigenvectors\nIn [250]: eigenvalues, eigenvectors = np.linalg.eig(matrix)\nIn [251]: print(f\"Eigenvalues: {eigenvalues}\")\nIn [252]: print(f\"Eigenvectors:\\n{eigenvectors}\")\nEigenvalues: [3.618 1.382]\nEigenvectors:\n[[ 0.851 -0.526]\n [ 0.526  0.851]]\n\nIn [253]: # Matrix inverse (use with caution!)\nIn [254]: inverse = np.linalg.inv(matrix)\nIn [255]: print(f\"Inverse:\\n{inverse}\")\nIn [256]: print(f\"Check A @ A^(-1):\\n{matrix @ inverse}\")  # Should be identity\nInverse:\n[[ 0.4 -0.2]\n [-0.2  0.6]]\nCheck A @ A^(-1):\n[[1. 0.]\n [0. 1.]]","position":{"start":{"line":1035,"column":1},"end":{"line":1083,"column":1}},"key":"dvBvwS8uEK"},{"type":"heading","depth":3,"position":{"start":{"line":1085,"column":1},"end":{"line":1085,"column":1}},"children":[{"type":"text","value":"Numerical Stability Considerations","position":{"start":{"line":1085,"column":1},"end":{"line":1085,"column":1}},"key":"hQUYkl3jK7"}],"identifier":"numerical-stability-considerations","label":"Numerical Stability Considerations","html_id":"numerical-stability-considerations","implicit":true,"key":"DpJizOt1fq"},{"type":"paragraph","position":{"start":{"line":1087,"column":1},"end":{"line":1087,"column":1}},"children":[{"type":"text","value":"Not all mathematically correct operations are numerically stable. Understanding this is crucial for scientific computing:","position":{"start":{"line":1087,"column":1},"end":{"line":1087,"column":1}},"key":"qa8h9nq1ws"}],"key":"KN19Myqpys"},{"type":"code","lang":"python","value":"In [257]: # Example: Solving linear systems Ax = b\nIn [258]: A = np.array([[3, 1],\n    ...:                [1, 2]])\nIn [259]: b = np.array([9, 8])\n\nIn [260]: # Method 1: Using inverse (NOT RECOMMENDED)\nIn [261]: x_inverse = np.linalg.inv(A) @ b\nIn [262]: print(f\"Solution using inverse: {x_inverse}\")\nSolution using inverse: [2. 3.]\n\nIn [263]: # Method 2: Using solve (RECOMMENDED)\nIn [264]: x_solve = np.linalg.solve(A, b)\nIn [265]: print(f\"Solution using solve: {x_solve}\")\nSolution using solve: [2. 3.]\n\nIn [266]: # Why solve is better: check condition number\nIn [267]: cond = np.linalg.cond(A)\nIn [268]: print(f\"Condition number: {cond:.2f}\")\nCondition number: 2.62\n\n# Small condition number = stable\n# Large condition number (>1000) = potentially unstable\n\nIn [269]: # Example of numerical instability\nIn [270]: # Ill-conditioned matrix (nearly singular)\nIn [271]: A_bad = np.array([[1.0, 1.0],\n    ...:                     [1.0, 1.0000001]])  # Almost singular!\nIn [272]: print(f\"Condition number: {np.linalg.cond(A_bad):.2e}\")\nCondition number: 4.00e+07  # Huge! Very unstable\n\n# Small input errors lead to large output errors with ill-conditioned matrices","position":{"start":{"line":1089,"column":1},"end":{"line":1121,"column":1}},"key":"SbHPsae4c7"},{"type":"heading","depth":3,"position":{"start":{"line":1123,"column":1},"end":{"line":1123,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":1123,"column":1},"end":{"line":1123,"column":1}},"key":"qyH0gt1iTf"},{"type":"strong","position":{"start":{"line":1123,"column":1},"end":{"line":1123,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: Numerical Stability","position":{"start":{"line":1123,"column":1},"end":{"line":1123,"column":1}},"key":"gdjZbqxPqk"}],"key":"udjoI3m6wX"}],"identifier":"id-computational-thinking-box-numerical-stability","label":"📦 Computational Thinking Box: Numerical Stability","html_id":"id-computational-thinking-box-numerical-stability","implicit":true,"key":"N3BKq52oOv"},{"type":"code","lang":"","value":"PATTERN: Numerical Stability in Scientific Computing\n\nNot all mathematically equivalent formulations are numerically equal.\nFloating-point arithmetic has finite precision, and errors accumulate.\n\nClassic Example: Variance calculation\nMathematically: Var(X) = E[X²] - E[X]²\nBut this can suffer from catastrophic cancellation!\n\n# Naive implementation (unstable)\ndef variance_naive(x):\n    return np.mean(x**2) - np.mean(x)**2\n\n# Stable implementation (what NumPy uses)\ndef variance_stable(x):\n    mean = np.mean(x)\n    return np.mean((x - mean)**2)\n\n# Test with data that has large mean, small variance\ndata = np.random.randn(1000) * 0.01 + 1e6  # Mean=1e6, std=0.01\nprint(f\"Naive: {variance_naive(data):.6f}\")    # Can be negative!\nprint(f\"Stable: {variance_stable(data):.6f}\")   # Always correct\nprint(f\"NumPy: {np.var(data):.6f}\")            # Uses stable algorithm\n\nKey principles:\n1. Avoid subtracting large similar numbers\n2. Use library functions (they implement stable algorithms)\n3. Check condition numbers for linear algebra\n4. Be aware of accumulation order for sums\n5. Use higher precision when necessary\n\nThis is why we use NumPy/SciPy functions instead of \nreimplementing algorithms from textbooks!","position":{"start":{"line":1125,"column":1},"end":{"line":1159,"column":1}},"key":"EwgU9dxae1"},{"type":"heading","depth":2,"position":{"start":{"line":1161,"column":1},"end":{"line":1161,"column":1}},"children":[{"type":"text","value":"7.8 When NumPy Isn’t the Right Tool","position":{"start":{"line":1161,"column":1},"end":{"line":1161,"column":1}},"key":"N76dltuj69"}],"identifier":"id-7-8-when-numpy-isnt-the-right-tool","label":"7.8 When NumPy Isn’t the Right Tool","html_id":"id-7-8-when-numpy-isnt-the-right-tool","implicit":true,"key":"MBIxkdz2Dt"},{"type":"paragraph","position":{"start":{"line":1163,"column":1},"end":{"line":1163,"column":1}},"children":[{"type":"text","value":"While NumPy is powerful, it’s important to know when other tools are more appropriate:","position":{"start":{"line":1163,"column":1},"end":{"line":1163,"column":1}},"key":"s3CuWCM63w"}],"key":"eGzB4rGiHz"},{"type":"heading","depth":3,"position":{"start":{"line":1165,"column":1},"end":{"line":1165,"column":1}},"children":[{"type":"text","value":"When to Use Other Tools","position":{"start":{"line":1165,"column":1},"end":{"line":1165,"column":1}},"key":"XT3zY7izMi"}],"identifier":"when-to-use-other-tools","label":"When to Use Other Tools","html_id":"when-to-use-other-tools","implicit":true,"key":"SF8OB1HrUV"},{"type":"code","lang":"python","value":"# 1. HETEROGENEOUS DATA: Use Pandas for mixed types\n# NumPy requires homogeneous data\nstellar_data_mixed = {\n    'name': ['Sirius', 'Vega', 'Altair'],  # Strings\n    'magnitude': [-1.46, 0.03, 0.77],       # Floats\n    'observed': [True, True, False],        # Booleans\n    'notes': ['Binary star', None, 'Fast rotator']  # Mixed\n}\n# This is awkward in NumPy, natural in Pandas\nimport pandas as pd\ndf = pd.DataFrame(stellar_data_mixed)\n\n# 2. SPARSE DATA: Use scipy.sparse for mostly-zero matrices\n# NumPy stores all zeros explicitly\nfrom scipy import sparse\n# If your matrix is 99% zeros, don't use NumPy!\nsparse_matrix = sparse.random(10000, 10000, density=0.01)\nprint(f\"Dense size: {10000*10000*8 / 1e9:.2f} GB\")  # 0.80 GB\nprint(f\"Sparse size: ~{0.01*10000*10000*8 / 1e9:.3f} GB\")  # ~0.008 GB\n\n# 3. SYMBOLIC MATH: Use SymPy for algebraic manipulation\nfrom sympy import symbols, expand\nx, y = symbols('x y')\nexpression = expand((x + y)**2)  # x**2 + 2*x*y + y**2\n# NumPy can't do symbolic algebra!\n\n# 4. GRAPHS/NETWORKS: Use NetworkX for graph algorithms\n# NumPy adjacency matrices become unwieldy for graph operations\n\n# 5. VARIABLE-LENGTH SEQUENCES: Use Python lists\n# NumPy requires fixed dimensions\nvariable_sequences = [\n    [1, 2, 3],\n    [4, 5],\n    [6, 7, 8, 9]\n]  # Can't efficiently represent in NumPy\n\n# 6. SMALL DATA: Pure Python might be faster!\n# NumPy has overhead; for <100 elements, Python can be faster\nsmall_list = [1, 2, 3, 4, 5]\n# sum(small_list) might beat np.array(small_list).sum()","position":{"start":{"line":1167,"column":1},"end":{"line":1209,"column":1}},"key":"ZwKMyObi7a"},{"type":"heading","depth":3,"position":{"start":{"line":1211,"column":1},"end":{"line":1211,"column":1}},"children":[{"type":"text","value":"Decision Guide","position":{"start":{"line":1211,"column":1},"end":{"line":1211,"column":1}},"key":"PMx7WCD4ay"}],"identifier":"decision-guide","label":"Decision Guide","html_id":"decision-guide","implicit":true,"key":"uJjqu4eTM1"},{"type":"code","lang":"python","value":"def choose_data_structure(data_characteristics):\n    \"\"\"\n    Guide for choosing the right tool for your data.\n    \"\"\"\n    if data_characteristics['homogeneous'] and data_characteristics['numerical']:\n        if data_characteristics['size'] > 100:\n            if data_characteristics['dense']:\n                return \"NumPy array\"\n            else:\n                return \"scipy.sparse matrix\"\n        else:\n            return \"Python list might be sufficient\"\n    elif data_characteristics['tabular'] and data_characteristics['mixed_types']:\n        return \"Pandas DataFrame\"\n    elif data_characteristics['symbolic']:\n        return \"SymPy expressions\"\n    elif data_characteristics['graph_structure']:\n        return \"NetworkX graph\"\n    else:\n        return \"Python native structures\"","position":{"start":{"line":1213,"column":1},"end":{"line":1234,"column":1}},"key":"ac0x7vEEun"},{"type":"heading","depth":2,"position":{"start":{"line":1236,"column":1},"end":{"line":1236,"column":1}},"children":[{"type":"text","value":"7.9 Advanced Topics (Optional)","position":{"start":{"line":1236,"column":1},"end":{"line":1236,"column":1}},"key":"gqY1gaxfkS"}],"identifier":"id-7-9-advanced-topics-optional","label":"7.9 Advanced Topics (Optional)","html_id":"id-7-9-advanced-topics-optional","implicit":true,"key":"De7UUyYvjU"},{"type":"paragraph","position":{"start":{"line":1238,"column":1},"end":{"line":1238,"column":1}},"children":[{"type":"text","value":"The following sections cover specialized NumPy features that you may encounter in existing code or need for specific use cases. Feel free to skip these on first reading and return when you need them.","position":{"start":{"line":1238,"column":1},"end":{"line":1238,"column":1}},"key":"V338r9c1s5"}],"key":"OSGsF3wtia"},{"type":"heading","depth":3,"position":{"start":{"line":1240,"column":1},"end":{"line":1240,"column":1}},"children":[{"type":"text","value":"Structured Arrays: NumPy’s Tabular Data","position":{"start":{"line":1240,"column":1},"end":{"line":1240,"column":1}},"key":"fLdY5gIq7Z"}],"identifier":"structured-arrays-numpys-tabular-data","label":"Structured Arrays: NumPy’s Tabular Data","html_id":"structured-arrays-numpys-tabular-data","implicit":true,"key":"grxJjw5O4d"},{"type":"paragraph","position":{"start":{"line":1242,"column":1},"end":{"line":1242,"column":1}},"children":[{"type":"text","value":"Before pandas became the standard for tabular data in Python, NumPy provided structured arrays as a way to handle heterogeneous data. While most modern code uses pandas DataFrames for mixed-type tabular data, structured arrays still have specific use cases where they excel.","position":{"start":{"line":1242,"column":1},"end":{"line":1242,"column":1}},"key":"iKWQqJYXZb"}],"key":"nyHpAkO23P"},{"type":"paragraph","position":{"start":{"line":1244,"column":1},"end":{"line":1244,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1244,"column":1},"end":{"line":1244,"column":1}},"children":[{"type":"text","value":"When to use structured arrays:","position":{"start":{"line":1244,"column":1},"end":{"line":1244,"column":1}},"key":"MMm5xWuqk8"}],"key":"azDfSicWSc"}],"key":"PEycROKKRX"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1245,"column":1},"end":{"line":1249,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1245,"column":1},"end":{"line":1245,"column":1}},"children":[{"type":"text","value":"You need the absolute minimum memory footprint for millions of records","position":{"start":{"line":1245,"column":1},"end":{"line":1245,"column":1}},"key":"J2vaFnz0Rm"}],"key":"HjyQmKoTIf"},{"type":"listItem","spread":true,"position":{"start":{"line":1246,"column":1},"end":{"line":1246,"column":1}},"children":[{"type":"text","value":"You’re interfacing with C/Fortran code that expects structured data","position":{"start":{"line":1246,"column":1},"end":{"line":1246,"column":1}},"key":"U5naGPYIOH"}],"key":"RXHkJyoWLR"},{"type":"listItem","spread":true,"position":{"start":{"line":1247,"column":1},"end":{"line":1247,"column":1}},"children":[{"type":"text","value":"You’re working with memory-mapped files that need fixed record layouts","position":{"start":{"line":1247,"column":1},"end":{"line":1247,"column":1}},"key":"toKbLH3yfM"}],"key":"KxgU8nu0rC"},{"type":"listItem","spread":true,"position":{"start":{"line":1248,"column":1},"end":{"line":1249,"column":1}},"children":[{"type":"text","value":"You want to stay within pure NumPy without pandas dependencies","position":{"start":{"line":1248,"column":1},"end":{"line":1248,"column":1}},"key":"XwOv3pt8TN"}],"key":"rw385pDDar"}],"key":"RwtkZyymyC"},{"type":"paragraph","position":{"start":{"line":1250,"column":1},"end":{"line":1250,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1250,"column":1},"end":{"line":1250,"column":1}},"children":[{"type":"text","value":"When to use alternatives instead:","position":{"start":{"line":1250,"column":1},"end":{"line":1250,"column":1}},"key":"oEPgdYpla1"}],"key":"wHcIjU5NN8"}],"key":"Tbk2p0MhbB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1251,"column":1},"end":{"line":1254,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1251,"column":1},"end":{"line":1251,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1251,"column":1},"end":{"line":1251,"column":1}},"children":[{"type":"text","value":"Pandas DataFrames","position":{"start":{"line":1251,"column":1},"end":{"line":1251,"column":1}},"key":"PLnVcE3d0q"}],"key":"MVd1dstYgc"},{"type":"text","value":": For any complex data manipulation, joining, grouping, or analysis (99% of cases)","position":{"start":{"line":1251,"column":1},"end":{"line":1251,"column":1}},"key":"Vup823mzvC"}],"key":"rVL4OJ8vGh"},{"type":"listItem","spread":true,"position":{"start":{"line":1252,"column":1},"end":{"line":1252,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1252,"column":1},"end":{"line":1252,"column":1}},"children":[{"type":"text","value":"Lists of dicts","position":{"start":{"line":1252,"column":1},"end":{"line":1252,"column":1}},"key":"XB6F5rk8E1"}],"key":"n8Pnn4hpYI"},{"type":"text","value":": For small datasets where convenience matters more than performance","position":{"start":{"line":1252,"column":1},"end":{"line":1252,"column":1}},"key":"xEF0buN1i5"}],"key":"jvTTSBsvDr"},{"type":"listItem","spread":true,"position":{"start":{"line":1253,"column":1},"end":{"line":1254,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1253,"column":1},"end":{"line":1253,"column":1}},"children":[{"type":"text","value":"Custom classes","position":{"start":{"line":1253,"column":1},"end":{"line":1253,"column":1}},"key":"gVeGoYonc7"}],"key":"xkcg0dPKpc"},{"type":"text","value":": When you need methods and complex behavior with your data","position":{"start":{"line":1253,"column":1},"end":{"line":1253,"column":1}},"key":"klxbyjLqeg"}],"key":"wTyy8aiRiY"}],"key":"cMZLFIYhIO"},{"type":"paragraph","position":{"start":{"line":1255,"column":1},"end":{"line":1255,"column":1}},"children":[{"type":"text","value":"Here’s how structured arrays work and when they might be useful:","position":{"start":{"line":1255,"column":1},"end":{"line":1255,"column":1}},"key":"ohOK0iFqmV"}],"key":"MolOKNCZdQ"},{"type":"code","lang":"python","value":"# Structured arrays store heterogeneous data efficiently\nimport numpy as np\n\n# Define the structure of each record\nstar_dtype = np.dtype([\n    ('name', 'U20'),        # Unicode string, max 20 chars\n    ('ra', 'f8'),           # Right ascension (float64) in degrees\n    ('dec', 'f8'),          # Declination (float64) in degrees  \n    ('magnitude', 'f4'),    # Apparent magnitude (float32)\n    ('distance', 'f4'),     # Distance in parsecs\n])\n\n# Create structured array - data stored contiguously in memory\nstars = np.array([\n    ('Sirius', 101.287, -16.716, -1.46, 2.64),\n    ('Canopus', 95.988, -52.696, -0.74, 95.0),\n    ('Arcturus', 213.915, 19.182, -0.05, 11.26),\n], dtype=star_dtype)\n\n# Access fields with bracket notation\nprint(stars['name'])      # ['Sirius' 'Canopus' 'Arcturus']\nprint(stars['magnitude'])  # [-1.46 -0.74 -0.05]\n\n# NumPy operations work directly on fields\nbright_stars = stars[stars['magnitude'] < 0]\nabs_mag = stars['magnitude'] - 5*np.log10(stars['distance']) + 5\n\n# Compare with alternatives:\n\n# 1. Pandas DataFrame (most convenient for analysis)\nimport pandas as pd\ndf = pd.DataFrame({\n    'name': ['Sirius', 'Canopus', 'Arcturus'],\n    'ra': [101.287, 95.988, 213.915],\n    'dec': [-16.716, -52.696, 19.182],\n    'magnitude': [-1.46, -0.74, -0.05],\n    'distance': [2.64, 95.0, 11.26]\n})\n# Rich functionality but more memory overhead\nbright_df = df[df['magnitude'] < 0]\n\n# 2. List of dictionaries (most Pythonic for small data)\nstars_dicts = [\n    {'name': 'Sirius', 'ra': 101.287, 'dec': -16.716, 'magnitude': -1.46},\n    {'name': 'Canopus', 'ra': 95.988, 'dec': -52.696, 'magnitude': -0.74},\n]\n# Flexible but slow for large datasets\n\n# Memory comparison for 1 million stars:\n# Structured array: ~40 MB (compact, fixed layout)\n# Pandas DataFrame: ~100+ MB (flexible, rich features)\n# List of dicts: ~400+ MB (maximum flexibility, poor performance)","position":{"start":{"line":1257,"column":1},"end":{"line":1310,"column":1}},"key":"D0xbBwLUDX"},{"type":"paragraph","position":{"start":{"line":1312,"column":1},"end":{"line":1312,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1312,"column":1},"end":{"line":1312,"column":1}},"children":[{"type":"text","value":"Record Arrays","position":{"start":{"line":1312,"column":1},"end":{"line":1312,"column":1}},"key":"qQdqyh7oQf"}],"key":"FaWFnnx5tB"},{"type":"text","value":": A variant of structured arrays that allows attribute-style access using dot notation. They’re essentially structured arrays with syntactic sugar:","position":{"start":{"line":1312,"column":1},"end":{"line":1312,"column":1}},"key":"C18yTag1ML"}],"key":"vj99V9oB8n"},{"type":"code","lang":"python","value":"# Convert to record array for attribute access\nrec_stars = np.rec.fromarrays(\n    [stars['name'], stars['ra'], stars['dec']], \n    names='name,ra,dec'\n)\nprint(rec_stars.name)  # Attribute style - convenient but ~10% slower\nprint(rec_stars['name'])  # Still works\n\n# In practice, if you want attribute access, use pandas:\nprint(df.name)  # Pandas provides this naturally with more features","position":{"start":{"line":1314,"column":1},"end":{"line":1325,"column":1}},"key":"TpiDBxStN6"},{"type":"paragraph","position":{"start":{"line":1327,"column":1},"end":{"line":1327,"column":1}},"children":[{"type":"text","value":"The bottom line: structured arrays are a specialized tool. For learning NumPy, understanding regular arrays is far more important. You’ll rarely create structured arrays in new code, but you might encounter them when reading data from binary files or working with legacy scientific codebases.","position":{"start":{"line":1327,"column":1},"end":{"line":1327,"column":1}},"key":"Dq1dWILVAj"}],"key":"OOmIMXYRTK"},{"type":"heading","depth":3,"position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"children":[{"type":"text","value":"Memory-Mapped Arrays for Huge Datasets","position":{"start":{"line":1329,"column":1},"end":{"line":1329,"column":1}},"key":"bKhToRJHjW"}],"identifier":"memory-mapped-arrays-for-huge-datasets","label":"Memory-Mapped Arrays for Huge Datasets","html_id":"memory-mapped-arrays-for-huge-datasets","implicit":true,"key":"WshqJC7JCM"},{"type":"paragraph","position":{"start":{"line":1331,"column":1},"end":{"line":1331,"column":1}},"children":[{"type":"text","value":"When working with datasets larger than your RAM (common in astronomy), memory-mapped arrays let you work with data stored on disk as if it were in memory:","position":{"start":{"line":1331,"column":1},"end":{"line":1331,"column":1}},"key":"qPugUtEd2H"}],"key":"YPgQkZOoPF"},{"type":"code","lang":"python","value":"# Create a memory-mapped array on disk\n# Useful when data doesn't fit in RAM\nfilename = 'large_data.dat'\nshape = (1000000, 1000)  # 1 million x 1000 array\ndtype = np.float32\n\n# Create and write to memory-mapped array\nmmap_array = np.memmap(filename, dtype=dtype, mode='w+', shape=shape)\n\n# Only accessed parts are loaded into RAM\nmmap_array[0, :] = np.arange(1000)  # Only this row in memory\nmmap_array[999999, :] = np.arange(1000, 2000)  # And now this row\n\n# Ensure data written to disk\ndel mmap_array  # Flush and close\n\n# Later, read the memory-mapped file\nreadonly_mmap = np.memmap(filename, dtype=dtype, mode='r', shape=shape)\nprint(readonly_mmap[0, 0])  # Only loads what's needed\n\n# Clean up\nimport os\nos.remove(filename)\n\n# This is invaluable for:\n# - Large astronomical images that don't fit in memory\n# - Time series data from long observations\n# - Simulation outputs that are generated incrementally","position":{"start":{"line":1333,"column":1},"end":{"line":1362,"column":1}},"key":"jr40LFvWtw"},{"type":"heading","depth":3,"position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"children":[{"type":"text","value":"Modern Random Number Generation","position":{"start":{"line":1364,"column":1},"end":{"line":1364,"column":1}},"key":"q9nm2dB9fP"}],"identifier":"modern-random-number-generation","label":"Modern Random Number Generation","html_id":"modern-random-number-generation","implicit":true,"key":"J27hKCmRbp"},{"type":"paragraph","position":{"start":{"line":1366,"column":1},"end":{"line":1366,"column":1}},"children":[{"type":"text","value":"NumPy 1.17+ introduced an improved random number API that’s better for reproducible science and parallel computing. You’ll see both the old and new approaches in existing code:","position":{"start":{"line":1366,"column":1},"end":{"line":1366,"column":1}},"key":"jYhwSQseDH"}],"key":"QLyPcUmtrr"},{"type":"code","lang":"python","value":"In [326]: # Old way (still widely used in existing code)\nIn [327]: np.random.seed(42)\nIn [328]: old_random = np.random.randn(5)\n\nIn [329]: # New way - better for parallel computing and cleaner design\nIn [330]: rng = np.random.default_rng(seed=42)  # Create generator object\nIn [331]: new_random = rng.standard_normal(5)   # Use generator methods\n\nIn [332]: print(f\"Old API: {old_random}\")\nIn [333]: print(f\"New API: {new_random}\")\nOld API: [ 0.496  0.861  0.697 -0.817  0.673]\nNew API: [ 0.308 -1.299  1.966  0.404  0.224]\n\nIn [334]: # Why use the new API for new code?\nIn [335]: # 1. Better statistical properties (improved algorithms)\nIn [336]: # 2. Thread-safe for parallel computing\nIn [337]: # 3. Can create independent random streams easily\nIn [338]: rng1 = np.random.default_rng(seed=42)\nIn [339]: rng2 = np.random.default_rng(seed=43)\nIn [340]: # rng1 and rng2 produce independent, reproducible streams\n\n# Both APIs will coexist for years - know both!","position":{"start":{"line":1368,"column":1},"end":{"line":1391,"column":1}},"key":"qbPQI0VHA4"},{"type":"heading","depth":2,"position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"children":[{"type":"text","value":"7.11 Common Pitfalls and Debugging","position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"key":"hNVPHQsNXD"}],"identifier":"id-7-11-common-pitfalls-and-debugging","label":"7.11 Common Pitfalls and Debugging","html_id":"id-7-11-common-pitfalls-and-debugging","implicit":true,"key":"Yt7wtoWiR4"},{"type":"heading","depth":3,"position":{"start":{"line":1395,"column":1},"end":{"line":1395,"column":1}},"children":[{"type":"text","value":"The View vs Copy Confusion","position":{"start":{"line":1395,"column":1},"end":{"line":1395,"column":1}},"key":"LJObgjgRoI"}],"identifier":"the-view-vs-copy-confusion","label":"The View vs Copy Confusion","html_id":"the-view-vs-copy-confusion","implicit":true,"key":"SOTWRY4wpX"},{"type":"code","lang":"python","value":"# PITFALL: Not knowing when you have a view\narr = np.arange(10)\nsubset = arr[2:5]  # This is a VIEW\nsubset[0] = 999\nprint(arr)  # [0 1 999 3 4 5 6 7 8 9] - Original changed!\n\n# SOLUTION: Be explicit about views and copies\nsubset_copy = arr[2:5].copy()  # Explicit copy\nsubset_view = arr[2:5]  # Clear that it's a view","position":{"start":{"line":1397,"column":1},"end":{"line":1407,"column":1}},"key":"RHmowEKzF0"},{"type":"heading","depth":3,"position":{"start":{"line":1409,"column":1},"end":{"line":1409,"column":1}},"children":[{"type":"text","value":"Integer Division Changes","position":{"start":{"line":1409,"column":1},"end":{"line":1409,"column":1}},"key":"Dd8XgJfBQ1"}],"identifier":"integer-division-changes","label":"Integer Division Changes","html_id":"integer-division-changes","implicit":true,"key":"wBLG2llZex"},{"type":"code","lang":"python","value":"# PITFALL: Integer division behavior\narr = np.array([1, 2, 3, 4, 5])\n\n# In Python 3, / always gives float\nresult1 = arr / 2\nprint(result1.dtype)  # float64\n\n# Use // for integer division\nresult2 = arr // 2\nprint(result2.dtype)  # int64\n\n# Be explicit about dtype when needed\nresult3 = (arr / 2).astype(int)","position":{"start":{"line":1411,"column":1},"end":{"line":1425,"column":1}},"key":"MTDyAl5fs9"},{"type":"heading","depth":3,"position":{"start":{"line":1427,"column":1},"end":{"line":1427,"column":1}},"children":[{"type":"text","value":"Broadcasting Errors","position":{"start":{"line":1427,"column":1},"end":{"line":1427,"column":1}},"key":"i7Q13qTF4A"}],"identifier":"broadcasting-errors","label":"Broadcasting Errors","html_id":"broadcasting-errors","implicit":true,"key":"xCZ76LGzah"},{"type":"code","lang":"python","value":"# PITFALL: Unexpected broadcasting\na = np.ones((3, 3))\nb = np.array([1, 2, 3, 4])  # Wrong size!\n\ntry:\n    c = a + b\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    # operands could not be broadcast together with shapes (3,3) (4,)\n\n# SOLUTION: Check shapes before operations\ndef debug_broadcasting(a, b):\n    \"\"\"Helper to understand broadcasting.\"\"\"\n    print(f\"a.shape: {a.shape}\")\n    print(f\"b.shape: {b.shape}\")\n    try:\n        result_shape = np.broadcast_shapes(a.shape, b.shape)\n        print(f\"Result shape: {result_shape}\")\n    except ValueError:\n        print(\"Cannot broadcast these shapes!\")","position":{"start":{"line":1429,"column":1},"end":{"line":1450,"column":1}},"key":"gnwXe7m3ID"},{"type":"heading","depth":3,"position":{"start":{"line":1452,"column":1},"end":{"line":1452,"column":1}},"children":[{"type":"text","value":"🛠️ ","position":{"start":{"line":1452,"column":1},"end":{"line":1452,"column":1}},"key":"dsycu25Uns"},{"type":"strong","position":{"start":{"line":1452,"column":1},"end":{"line":1452,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":1452,"column":1},"end":{"line":1452,"column":1}},"key":"tXJT99Y94H"}],"key":"Q5JSdWseqk"}],"identifier":"id-debug-this","label":"🛠️ Debug This!","html_id":"id-debug-this","implicit":true,"key":"Lk0Rv8xbaV"},{"type":"paragraph","position":{"start":{"line":1454,"column":1},"end":{"line":1454,"column":1}},"children":[{"type":"text","value":"This code has a subtle bug. Can you find it?","position":{"start":{"line":1454,"column":1},"end":{"line":1454,"column":1}},"key":"qB3zQcvefT"}],"key":"xwMs7zZSzz"},{"type":"code","lang":"python","value":"def normalize_columns(data):\n    \"\"\"Normalize each column to have mean=0, std=1.\"\"\"\n    for col in range(data.shape[1]):\n        data[:, col] -= data[:, col].mean()\n        data[:, col] /= data[:, col].std()\n    return data\n\n# Test it\ntest_data = np.array([[1.0, 100.0],\n                       [2.0, 200.0],\n                       [3.0, 300.0]])\n                       \nnormalized = normalize_columns(test_data)\nprint(f\"Original data:\\n{test_data}\")\nprint(f\"Normalized:\\n{normalized}\")","position":{"start":{"line":1456,"column":1},"end":{"line":1472,"column":1}},"key":"T8MkiJs03V"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Bug and Solution","key":"bzZr6mUugo"}],"key":"SMbZNqeQF0"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bug","key":"fBDYVTFcSV"}],"key":"wu0Yetxbar"},{"type":"text","value":": The function modifies the input array in-place but also returns it, which is confusing. Worse, the original data is lost! After calling the function, both ","key":"aZ0c8Wp1MH"},{"type":"inlineCode","value":"test_data","key":"B2E9kgB15C"},{"type":"text","value":" and ","key":"wYpJrV911Y"},{"type":"inlineCode","value":"normalized","key":"JnH20LUV6c"},{"type":"text","value":" point to the same modified array.","key":"k3HyDvF6Cl"}],"key":"tZAzP65PE1"},{"type":"code","lang":"python","meta":null,"value":"print(test_data is normalized)  # True - same object!","key":"tT0Xind8U8"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solutions","key":"eNDSH8lSXJ"}],"key":"L4b4IVbCh3"},{"type":"text","value":":","key":"DKl3DZKvMN"}],"key":"cjGVBIwaqi"},{"type":"paragraph","children":[{"type":"text","value":"Option 1: Work on a copy (preserve original)","key":"gxqnM5C5K3"}],"key":"RvYxOABIjk"},{"type":"code","lang":"python","meta":null,"value":"def normalize_columns_safe(data):\n    \"\"\"Normalize columns without modifying input.\"\"\"\n    result = data.copy()  # Work on copy\n    for col in range(result.shape[1]):\n        col_data = result[:, col]\n        result[:, col] = (col_data - col_data.mean()) / col_data.std()\n    return result","key":"mKeiVrcaYf"},{"type":"paragraph","children":[{"type":"text","value":"Option 2: Make in-place operation explicit","key":"nLjHeifx0s"}],"key":"APXrc36xNT"},{"type":"code","lang":"python","meta":null,"value":"def normalize_columns_inplace(data):\n    \"\"\"Normalize columns in-place. Returns None to signal in-place.\"\"\"\n    for col in range(data.shape[1]):\n        col_data = data[:, col]\n        data[:, col] = (col_data - col_data.mean()) / col_data.std()\n    # Don't return anything for in-place operations","key":"WHpZ5l9EFt"},{"type":"paragraph","children":[{"type":"text","value":"Option 3: Use vectorization (best!)","key":"q3tpRcdjc6"}],"key":"VofMmxpcZy"},{"type":"code","lang":"python","meta":null,"value":"def normalize_columns_vectorized(data):\n    \"\"\"Vectorized normalization - fastest and clearest.\"\"\"\n    return (data - data.mean(axis=0)) / data.std(axis=0)","key":"oqRsgIPQic"},{"type":"paragraph","children":[{"type":"text","value":"The vectorized version is not only faster but also automatically returns a new array, avoiding the confusion entirely.","key":"SsbdPsEkEa"}],"key":"HHCSJeQjkS"}],"key":"OQWHwxd3dh"},{"type":"heading","depth":2,"position":{"start":{"line":1517,"column":1},"end":{"line":1517,"column":1}},"children":[{"type":"text","value":"7.12 Working with Scientific Data Formats (Optional)","position":{"start":{"line":1517,"column":1},"end":{"line":1517,"column":1}},"key":"FDB7TIQXpZ"}],"identifier":"id-7-12-working-with-scientific-data-formats-optional","label":"7.12 Working with Scientific Data Formats (Optional)","html_id":"id-7-12-working-with-scientific-data-formats-optional","implicit":true,"key":"qU7Z2warh0"},{"type":"paragraph","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"children":[{"type":"text","value":"While we’ll cover these in more detail later, here’s a brief introduction to common scientific data formats:","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"key":"ZkBkiofFck"}],"key":"aX8dteizVg"},{"type":"heading","depth":3,"position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"children":[{"type":"text","value":"HDF5 for Large Datasets","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"Kq73vZ4T2o"}],"identifier":"hdf5-for-large-datasets","label":"HDF5 for Large Datasets","html_id":"hdf5-for-large-datasets","implicit":true,"key":"FVd6Ub5HVW"},{"type":"paragraph","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"children":[{"type":"text","value":"HDF5 is ideal for large, complex scientific datasets:","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"key":"z5kOlgZBqu"}],"key":"fygr6T0Txw"},{"type":"code","lang":"python","value":"# Basic HDF5 usage with h5py\nimport h5py\n\n# Create HDF5 file with datasets\nwith h5py.File('scientific_data.h5', 'w') as f:\n    # Create datasets\n    f.create_dataset('temperature', data=np.random.randn(1000, 1000))\n    f.create_dataset('pressure', data=np.random.randn(1000, 1000))\n    \n    # Add metadata as attributes\n    f['temperature'].attrs['units'] = 'Kelvin'\n    f['temperature'].attrs['date'] = '2024-01-15'\n\n# Read HDF5 file\nwith h5py.File('scientific_data.h5', 'r') as f:\n    temp = f['temperature'][:]  # Load into NumPy array\n    print(f\"Temperature shape: {temp.shape}\")\n    print(f\"Units: {f['temperature'].attrs['units']}\")\n\n# Clean up\nimport os\nos.remove('scientific_data.h5')","position":{"start":{"line":1525,"column":1},"end":{"line":1548,"column":1}},"key":"HMWu5hB3Dd"},{"type":"heading","depth":3,"position":{"start":{"line":1550,"column":1},"end":{"line":1550,"column":1}},"children":[{"type":"text","value":"FITS for Astronomical Data","position":{"start":{"line":1550,"column":1},"end":{"line":1550,"column":1}},"key":"kp6YHXWE5u"}],"identifier":"fits-for-astronomical-data","label":"FITS for Astronomical Data","html_id":"fits-for-astronomical-data","implicit":true,"key":"TdufyYcaKH"},{"type":"paragraph","position":{"start":{"line":1552,"column":1},"end":{"line":1552,"column":1}},"children":[{"type":"text","value":"FITS (Flexible Image Transport System) is the standard for astronomical data:","position":{"start":{"line":1552,"column":1},"end":{"line":1552,"column":1}},"key":"OGNxYX7YBb"}],"key":"GJ00SUohYR"},{"type":"code","lang":"python","value":"# Basic FITS usage with astropy (when available)\ntry:\n    from astropy.io import fits\n    \n    # Create FITS file\n    data = np.random.randn(512, 512)  # Simulated image\n    hdu = fits.PrimaryHDU(data)\n    hdu.header['OBSERVER'] = 'Your Name'\n    hdu.header['EXPTIME'] = 300.0  # Exposure time in seconds\n    \n    # Write and read\n    hdu.writeto('test.fits', overwrite=True)\n    \n    # Read FITS file\n    with fits.open('test.fits') as hdul:\n        image = hdul[0].data  # NumPy array\n        header = hdul[0].header\n        print(f\"Image shape: {image.shape}\")\n        print(f\"Exposure time: {header['EXPTIME']} seconds\")\n    \n    # Clean up\n    os.remove('test.fits')\n    \nexcept ImportError:\n    print(\"astropy not installed - FITS example skipped\")","position":{"start":{"line":1554,"column":1},"end":{"line":1580,"column":1}},"key":"TQba1KvnuY"},{"type":"paragraph","position":{"start":{"line":1582,"column":1},"end":{"line":1582,"column":1}},"children":[{"type":"text","value":"These formats integrate seamlessly with NumPy arrays, making them ideal for scientific data storage and exchange.","position":{"start":{"line":1582,"column":1},"end":{"line":1582,"column":1}},"key":"DkGsmyXhIR"}],"key":"QO3uzmDJ1g"},{"type":"heading","depth":2,"position":{"start":{"line":1584,"column":1},"end":{"line":1584,"column":1}},"children":[{"type":"text","value":"Practice Exercises","position":{"start":{"line":1584,"column":1},"end":{"line":1584,"column":1}},"key":"O9l9a9kvrg"}],"identifier":"practice-exercises","label":"Practice Exercises","html_id":"practice-exercises","implicit":true,"key":"Sf6cXcvFao"},{"type":"heading","depth":3,"position":{"start":{"line":1586,"column":1},"end":{"line":1586,"column":1}},"children":[{"type":"text","value":"Exercise 7.1: Implement Moving Average","position":{"start":{"line":1586,"column":1},"end":{"line":1586,"column":1}},"key":"sIUYOc6Pp5"}],"identifier":"exercise-7-1-implement-moving-average","label":"Exercise 7.1: Implement Moving Average","html_id":"exercise-7-1-implement-moving-average","implicit":true,"key":"l2PR8eBofs"},{"type":"paragraph","position":{"start":{"line":1588,"column":1},"end":{"line":1588,"column":1}},"children":[{"type":"text","value":"Create a function that computes a moving average efficiently:","position":{"start":{"line":1588,"column":1},"end":{"line":1588,"column":1}},"key":"Hk874mLMLt"}],"key":"NVSqtGpJKI"},{"type":"code","lang":"python","value":"\"\"\"\nImplement a moving average function that:\n1. Takes a 1D array and window size\n2. Returns array of moving averages\n3. Handles edge cases appropriately\n4. Is vectorized (no Python loops)\n\nExample:\ndata = [1, 2, 3, 4, 5]\nwindow = 3\nresult = [1.5, 2, 3, 4, 4.5]  # Edges handled with smaller windows\n\nHint: Consider np.convolve or cumulative sum approach\n\"\"\"\n\ndef moving_average(data, window_size):\n    \"\"\"\n    Compute moving average using vectorization.\n    \n    Parameters\n    ----------\n    data : array-like\n        Input data\n    window_size : int\n        Size of moving window\n    \n    Returns\n    -------\n    array\n        Moving averages\n    \"\"\"\n    # Your implementation here\n    pass\n\n# Test cases\ntest_data = np.random.randn(1000)\nma = moving_average(test_data, 10)\nassert len(ma) == len(test_data), \"Output length should match input\"\nassert np.isfinite(ma).all(), \"All values should be finite\"","position":{"start":{"line":1590,"column":1},"end":{"line":1630,"column":1}},"key":"cRemsI275I"},{"type":"heading","depth":3,"position":{"start":{"line":1632,"column":1},"end":{"line":1632,"column":1}},"children":[{"type":"text","value":"Exercise 7.2: Image Processing with Broadcasting","position":{"start":{"line":1632,"column":1},"end":{"line":1632,"column":1}},"key":"byFxESbZgN"}],"identifier":"exercise-7-2-image-processing-with-broadcasting","label":"Exercise 7.2: Image Processing with Broadcasting","html_id":"exercise-7-2-image-processing-with-broadcasting","implicit":true,"key":"GRte75FDJz"},{"type":"paragraph","position":{"start":{"line":1634,"column":1},"end":{"line":1634,"column":1}},"children":[{"type":"text","value":"Implement image transformations using broadcasting:","position":{"start":{"line":1634,"column":1},"end":{"line":1634,"column":1}},"key":"owmX7DGfaM"}],"key":"cd4eARNMYK"},{"type":"code","lang":"python","value":"\"\"\"\nCreate functions for basic image processing:\n1. Brightness adjustment (add constant to all pixels)\n2. Contrast adjustment (multiply all pixels)\n3. Gamma correction (power transformation)\n4. RGB to grayscale conversion\n\nWork with images as arrays where:\n- Grayscale: (height, width)\n- RGB: (height, width, 3)\n\nUse broadcasting to avoid loops!\n\"\"\"\n\ndef adjust_brightness(image, delta):\n    \"\"\"\n    Adjust brightness by adding delta.\n    Ensure result stays in valid range [0, 1].\n    \"\"\"\n    # Your implementation here\n    pass\n\ndef adjust_gamma(image, gamma):\n    \"\"\"\n    Apply gamma correction: out = in^gamma\n    Handles negative values properly.\n    \"\"\"\n    # Your implementation here\n    pass\n\ndef rgb_to_grayscale(rgb_image):\n    \"\"\"\n    Convert RGB to grayscale using standard weights:\n    gray = 0.299*R + 0.587*G + 0.114*B\n    \"\"\"\n    # Your implementation here\n    pass\n\n# Test with synthetic image\ntest_rgb = np.random.rand(100, 100, 3)\ngray = rgb_to_grayscale(test_rgb)\nassert gray.shape == (100, 100), \"Should be 2D grayscale\"\nassert 0 <= gray.min() and gray.max() <= 1, \"Should be in [0,1] range\"","position":{"start":{"line":1636,"column":1},"end":{"line":1680,"column":1}},"key":"JmMPRVMnmL"},{"type":"heading","depth":3,"position":{"start":{"line":1682,"column":1},"end":{"line":1682,"column":1}},"children":[{"type":"text","value":"Exercise 7.3: Optimize Star Catalog Operations","position":{"start":{"line":1682,"column":1},"end":{"line":1682,"column":1}},"key":"Q8tpyiBVgf"}],"identifier":"exercise-7-3-optimize-star-catalog-operations","label":"Exercise 7.3: Optimize Star Catalog Operations","html_id":"exercise-7-3-optimize-star-catalog-operations","implicit":true,"key":"ElBH6ipUcc"},{"type":"paragraph","position":{"start":{"line":1684,"column":1},"end":{"line":1684,"column":1}},"children":[{"type":"text","value":"Compare different approaches for astronomical calculations:","position":{"start":{"line":1684,"column":1},"end":{"line":1684,"column":1}},"key":"LVexNRvXRW"}],"key":"P6jOpkPOdv"},{"type":"code","lang":"python","value":"\"\"\"\nGiven a star catalog with positions and magnitudes,\nimplement these operations multiple ways and compare performance:\n\n1. Find all stars within a given angular distance from a point\n2. Calculate total flux from all stars (flux = 10^(-0.4 * magnitude))\n3. Find the brightest N stars in a region\n\nImplement using:\na) Pure Python loops (baseline)\nb) NumPy vectorization\nc) Boolean masking\n\nMeasure performance differences.\n\"\"\"\n\n# Generate synthetic catalog\nn_stars = 100000\ncatalog = {\n    'ra': np.random.uniform(0, 360, n_stars),      # Right ascension (degrees)\n    'dec': np.random.uniform(-90, 90, n_stars),    # Declination (degrees)\n    'mag': np.random.uniform(-1, 20, n_stars)      # Magnitude\n}\n\ndef angular_distance(ra1, dec1, ra2, dec2):\n    \"\"\"\n    Calculate angular distance between points on sphere.\n    Uses haversine formula for numerical stability.\n    \"\"\"\n    # Convert to radians\n    ra1, dec1, ra2, dec2 = map(np.radians, [ra1, dec1, ra2, dec2])\n    \n    # Haversine formula\n    dra = ra2 - ra1\n    ddec = dec2 - dec1\n    a = np.sin(ddec/2)**2 + np.cos(dec1) * np.cos(dec2) * np.sin(dra/2)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n    \n    return np.degrees(c)\n\ndef find_nearby_stars_loop(catalog, ra_center, dec_center, radius):\n    \"\"\"Pure Python implementation.\"\"\"\n    # Your implementation here\n    pass\n\ndef find_nearby_stars_numpy(catalog, ra_center, dec_center, radius):\n    \"\"\"Vectorized NumPy implementation.\"\"\"\n    # Your implementation here\n    pass\n\n# Compare performance\nimport time\n# Your timing code here","position":{"start":{"line":1686,"column":1},"end":{"line":1740,"column":1}},"key":"qgc6kO0nSG"},{"type":"heading","depth":3,"position":{"start":{"line":1742,"column":1},"end":{"line":1742,"column":1}},"children":[{"type":"text","value":"Exercise 7.4: Memory-Efficient Large Array Processing","position":{"start":{"line":1742,"column":1},"end":{"line":1742,"column":1}},"key":"RSBnLxzSzr"}],"identifier":"exercise-7-4-memory-efficient-large-array-processing","label":"Exercise 7.4: Memory-Efficient Large Array Processing","html_id":"exercise-7-4-memory-efficient-large-array-processing","implicit":true,"key":"VM9WG575M9"},{"type":"paragraph","position":{"start":{"line":1744,"column":1},"end":{"line":1744,"column":1}},"children":[{"type":"text","value":"Work with arrays too large to fit in memory:","position":{"start":{"line":1744,"column":1},"end":{"line":1744,"column":1}},"key":"Qqh6XHunWO"}],"key":"cu3JJjZqii"},{"type":"code","lang":"python","value":"\"\"\"\nProcess a large dataset in chunks to avoid memory issues:\n\n1. Create a large dataset (simulate with smaller array)\n2. Process in chunks of fixed size\n3. Combine results appropriately\n\nExample task: Calculate statistics for a 10GB array\non a machine with 4GB RAM.\n\nImplement:\n- Chunked mean calculation\n- Chunked standard deviation (trickier!)\n- Chunked percentiles\n\"\"\"\n\ndef chunked_mean(data_generator, chunk_size=1000000):\n    \"\"\"\n    Calculate mean of data that comes in chunks.\n    Uses numerically stable online algorithm.\n    \"\"\"\n    total_sum = 0.0\n    total_count = 0\n    \n    for chunk in data_generator:\n        # Your implementation here\n        pass\n    \n    return total_sum / total_count if total_count > 0 else 0.0\n\ndef chunked_std(data_generator, chunk_size=1000000):\n    \"\"\"\n    Calculate standard deviation in chunks.\n    Uses Welford's online algorithm for numerical stability.\n    \"\"\"\n    n = 0\n    mean = 0.0\n    M2 = 0.0\n    \n    for chunk in data_generator:\n        # Your implementation here\n        # Hint: Update mean and M2 incrementally\n        pass\n    \n    return np.sqrt(M2 / n) if n > 1 else 0.0\n\n# Test with generator that simulates large data\ndef data_generator(total_size, chunk_size):\n    \"\"\"Generate random data in chunks.\"\"\"\n    n_chunks = total_size // chunk_size\n    for _ in range(n_chunks):\n        yield np.random.randn(chunk_size)\n    \n    remainder = total_size % chunk_size\n    if remainder:\n        yield np.random.randn(remainder)\n\n# Verify your implementation\ntotal = 10000000  # 10 million points\ngen = data_generator(total, chunk_size=100000)\nmean = chunked_mean(gen)\nprint(f\"Chunked mean: {mean:.6f} (should be ~0)\")","position":{"start":{"line":1746,"column":1},"end":{"line":1809,"column":1}},"key":"klgvoOOpeH"},{"type":"heading","depth":2,"position":{"start":{"line":1811,"column":1},"end":{"line":1811,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":1811,"column":1},"end":{"line":1811,"column":1}},"key":"yPzFVkTwjZ"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"d5hFEljB6T"},{"type":"paragraph","position":{"start":{"line":1813,"column":1},"end":{"line":1813,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1813,"column":1},"end":{"line":1813,"column":1}},"key":"xI2u5SwUMU"},{"type":"strong","position":{"start":{"line":1813,"column":1},"end":{"line":1813,"column":1}},"children":[{"type":"text","value":"NumPy arrays are fundamentally different from Python lists","position":{"start":{"line":1813,"column":1},"end":{"line":1813,"column":1}},"key":"vLqk6SrkJS"}],"key":"aHjXrXAoyU"},{"type":"text","value":" - They store homogeneous data in contiguous memory blocks, enabling 10-100x performance improvements through vectorized operations in compiled C code.","position":{"start":{"line":1813,"column":1},"end":{"line":1813,"column":1}},"key":"aPcG8jFky9"}],"key":"ILCfHkxp6S"},{"type":"paragraph","position":{"start":{"line":1815,"column":1},"end":{"line":1815,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1815,"column":1},"end":{"line":1815,"column":1}},"key":"lCP9086Ny9"},{"type":"strong","position":{"start":{"line":1815,"column":1},"end":{"line":1815,"column":1}},"children":[{"type":"text","value":"Vectorization is the key mental shift","position":{"start":{"line":1815,"column":1},"end":{"line":1815,"column":1}},"key":"zTtc6D2Ipo"}],"key":"k29Cyfrkt4"},{"type":"text","value":" - Think in terms of operations on entire arrays, not individual elements. This leverages CPU vector instructions and eliminates Python interpreter overhead.","position":{"start":{"line":1815,"column":1},"end":{"line":1815,"column":1}},"key":"eUA74Dv8qT"}],"key":"j6jUeXswha"},{"type":"paragraph","position":{"start":{"line":1817,"column":1},"end":{"line":1817,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1817,"column":1},"end":{"line":1817,"column":1}},"key":"pPsQikTfVb"},{"type":"strong","position":{"start":{"line":1817,"column":1},"end":{"line":1817,"column":1}},"children":[{"type":"text","value":"Broadcasting enables elegant code","position":{"start":{"line":1817,"column":1},"end":{"line":1817,"column":1}},"key":"jrKBBNctgx"}],"key":"ezyh6SDiN0"},{"type":"text","value":" - Operations between arrays of different shapes follow simple rules, eliminating explicit loops while maintaining memory efficiency.","position":{"start":{"line":1817,"column":1},"end":{"line":1817,"column":1}},"key":"hmRPVFh1n8"}],"key":"CUKjYheFB3"},{"type":"paragraph","position":{"start":{"line":1819,"column":1},"end":{"line":1819,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1819,"column":1},"end":{"line":1819,"column":1}},"key":"jX56hjJ6IW"},{"type":"strong","position":{"start":{"line":1819,"column":1},"end":{"line":1819,"column":1}},"children":[{"type":"text","value":"Views vs copies matter for correctness and performance","position":{"start":{"line":1819,"column":1},"end":{"line":1819,"column":1}},"key":"PI2hjRgzuj"}],"key":"ljMzxxT7EY"},{"type":"text","value":" - Basic slicing creates views (shared memory), while fancy indexing creates copies. Understanding this prevents bugs and memory issues.","position":{"start":{"line":1819,"column":1},"end":{"line":1819,"column":1}},"key":"jDIDNphwm3"}],"key":"r51PFeFhcB"},{"type":"paragraph","position":{"start":{"line":1821,"column":1},"end":{"line":1821,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1821,"column":1},"end":{"line":1821,"column":1}},"key":"ZZNPDDMfeC"},{"type":"strong","position":{"start":{"line":1821,"column":1},"end":{"line":1821,"column":1}},"children":[{"type":"text","value":"Data types affect both memory and precision","position":{"start":{"line":1821,"column":1},"end":{"line":1821,"column":1}},"key":"YVF88SgXnq"}],"key":"v9hnQSRgqE"},{"type":"text","value":" - Choose float32 for speed/memory with acceptable precision loss, float64 for accuracy, and appropriate integer types for counting and indexing.","position":{"start":{"line":1821,"column":1},"end":{"line":1821,"column":1}},"key":"v75nEPbakj"}],"key":"ICVWb684XZ"},{"type":"paragraph","position":{"start":{"line":1823,"column":1},"end":{"line":1823,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1823,"column":1},"end":{"line":1823,"column":1}},"key":"SepfzbJC31"},{"type":"strong","position":{"start":{"line":1823,"column":1},"end":{"line":1823,"column":1}},"children":[{"type":"text","value":"Memory layout impacts performance","position":{"start":{"line":1823,"column":1},"end":{"line":1823,"column":1}},"key":"Pt0VGVsBXA"}],"key":"TRF86WxiEW"},{"type":"text","value":" - Row-major (C) vs column-major (Fortran) ordering affects cache efficiency. Access patterns should match memory layout for optimal performance.","position":{"start":{"line":1823,"column":1},"end":{"line":1823,"column":1}},"key":"rRBjvop1Wz"}],"key":"njDlQTs7V9"},{"type":"paragraph","position":{"start":{"line":1825,"column":1},"end":{"line":1825,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1825,"column":1},"end":{"line":1825,"column":1}},"key":"nL7kOR8iu5"},{"type":"strong","position":{"start":{"line":1825,"column":1},"end":{"line":1825,"column":1}},"children":[{"type":"text","value":"Numerical stability matters","position":{"start":{"line":1825,"column":1},"end":{"line":1825,"column":1}},"key":"XtsF0siaav"}],"key":"SGrIJR1VGP"},{"type":"text","value":" - Not all mathematically equivalent operations are numerically stable. Use library functions that implement stable algorithms.","position":{"start":{"line":1825,"column":1},"end":{"line":1825,"column":1}},"key":"CB8l0zhorx"}],"key":"Wu3L48KNpi"},{"type":"paragraph","position":{"start":{"line":1827,"column":1},"end":{"line":1827,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1827,"column":1},"end":{"line":1827,"column":1}},"key":"IuHGlZSZ3l"},{"type":"strong","position":{"start":{"line":1827,"column":1},"end":{"line":1827,"column":1}},"children":[{"type":"text","value":"NumPy isn’t always the answer","position":{"start":{"line":1827,"column":1},"end":{"line":1827,"column":1}},"key":"UBlhH4Gz72"}],"key":"a4GI8v1XGy"},{"type":"text","value":" - Use pandas for heterogeneous data, scipy.sparse for sparse matrices, and native Python for small datasets or variable-length sequences.","position":{"start":{"line":1827,"column":1},"end":{"line":1827,"column":1}},"key":"aDSxhrlIIL"}],"key":"qKvjhrnZ8n"},{"type":"paragraph","position":{"start":{"line":1829,"column":1},"end":{"line":1829,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1829,"column":1},"end":{"line":1829,"column":1}},"key":"izhaNafKWJ"},{"type":"strong","position":{"start":{"line":1829,"column":1},"end":{"line":1829,"column":1}},"children":[{"type":"text","value":"NumPy is the foundation","position":{"start":{"line":1829,"column":1},"end":{"line":1829,"column":1}},"key":"y9wemKWmCX"}],"key":"nk5WOj6Zuy"},{"type":"text","value":" - Every major scientific Python library builds on NumPy. Understanding NumPy deeply means understanding the entire ecosystem.","position":{"start":{"line":1829,"column":1},"end":{"line":1829,"column":1}},"key":"SvGi8kFaUe"}],"key":"Y7cHRKH3D6"},{"type":"heading","depth":2,"position":{"start":{"line":1831,"column":1},"end":{"line":1831,"column":1}},"children":[{"type":"text","value":"Quick Reference Tables","position":{"start":{"line":1831,"column":1},"end":{"line":1831,"column":1}},"key":"SyNXb46YJq"}],"identifier":"quick-reference-tables","label":"Quick Reference Tables","html_id":"quick-reference-tables","implicit":true,"key":"IjjhF5PKMf"},{"type":"heading","depth":3,"position":{"start":{"line":1833,"column":1},"end":{"line":1833,"column":1}},"children":[{"type":"text","value":"Array Creation Functions","position":{"start":{"line":1833,"column":1},"end":{"line":1833,"column":1}},"key":"zUErcrlI6w"}],"identifier":"array-creation-functions","label":"Array Creation Functions","html_id":"array-creation-functions","implicit":true,"key":"GiurMGNCFg"},{"type":"table","position":{"start":{"line":1835,"column":1},"end":{"line":1846,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"children":[{"type":"text","value":"Function","position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"key":"fz9Oa34s4N"}],"key":"nCx3Ak0bDm"},{"type":"tableCell","header":true,"position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"key":"LAe7YVOcoV"}],"key":"ShSRYM1JBc"},{"type":"tableCell","header":true,"position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1835,"column":1},"end":{"line":1835,"column":1}},"key":"p7iZCTlLtk"}],"key":"Y3WLXnr2nR"}],"key":"ar612sP0oP"},{"type":"tableRow","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"children":[{"type":"inlineCode","value":"np.array()","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"key":"mxpLY0dYBO"}],"key":"HXVeb3DSWv"},{"type":"tableCell","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"children":[{"type":"text","value":"From Python sequence","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"key":"NKGWB2jOpC"}],"key":"hWgzxaaJOY"},{"type":"tableCell","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"children":[{"type":"inlineCode","value":"np.array([1, 2, 3])","position":{"start":{"line":1837,"column":1},"end":{"line":1837,"column":1}},"key":"TdaW6fALqC"}],"key":"j9dmDrdSb1"}],"key":"T94dyG5JUr"},{"type":"tableRow","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"children":[{"type":"inlineCode","value":"np.zeros()","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"key":"FZ34lsRX0P"}],"key":"comA9P2Adv"},{"type":"tableCell","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"children":[{"type":"text","value":"Initialize with zeros","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"key":"q2kK6ruBdr"}],"key":"pV5sgwMxcB"},{"type":"tableCell","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"children":[{"type":"inlineCode","value":"np.zeros((3, 4))","position":{"start":{"line":1838,"column":1},"end":{"line":1838,"column":1}},"key":"Ed2wMTDdDs"}],"key":"d0gR8Ieafd"}],"key":"dY4H3mOzIc"},{"type":"tableRow","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"children":[{"type":"inlineCode","value":"np.ones()","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"key":"xA7GcVjg4J"}],"key":"mWtlp4YBqf"},{"type":"tableCell","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"children":[{"type":"text","value":"Initialize with ones","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"key":"H1LIo2CcFa"}],"key":"Ke5uBRu0yW"},{"type":"tableCell","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"children":[{"type":"inlineCode","value":"np.ones((2, 3))","position":{"start":{"line":1839,"column":1},"end":{"line":1839,"column":1}},"key":"ZN9TETLSaD"}],"key":"rjTEfPFXBY"}],"key":"qVfsT0IIup"},{"type":"tableRow","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"children":[{"type":"inlineCode","value":"np.empty()","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"key":"XIeRcebM8n"}],"key":"Dw8SnYY4ME"},{"type":"tableCell","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"children":[{"type":"text","value":"Uninitialized (fast but dangerous)","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"key":"k887GZBzoY"}],"key":"qxyT5mYqs7"},{"type":"tableCell","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"children":[{"type":"inlineCode","value":"np.empty((2, 2))","position":{"start":{"line":1840,"column":1},"end":{"line":1840,"column":1}},"key":"uKlN2AVBsa"}],"key":"CyDR0sTxyw"}],"key":"bTc4E0fLjX"},{"type":"tableRow","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"children":[{"type":"inlineCode","value":"np.arange()","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"key":"PHNDhMhBbS"}],"key":"T5bduaar6h"},{"type":"tableCell","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"children":[{"type":"text","value":"Range of values","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"key":"DOVU6BFw3q"}],"key":"GTTYCNt3UP"},{"type":"tableCell","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"children":[{"type":"inlineCode","value":"np.arange(0, 10, 2)","position":{"start":{"line":1841,"column":1},"end":{"line":1841,"column":1}},"key":"mh3CdAnYPC"}],"key":"KYCGMpb8c8"}],"key":"ocWQKgXCVZ"},{"type":"tableRow","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"children":[{"type":"inlineCode","value":"np.linspace()","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"key":"ZC2vLRDMP2"}],"key":"zrCUF2aaJP"},{"type":"tableCell","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"children":[{"type":"text","value":"N evenly spaced points","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"key":"qrFVOrfiI0"}],"key":"mj1VYdDtnV"},{"type":"tableCell","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"children":[{"type":"inlineCode","value":"np.linspace(0, 1, 11)","position":{"start":{"line":1842,"column":1},"end":{"line":1842,"column":1}},"key":"cqywBT5Ts1"}],"key":"lrlggQtlj6"}],"key":"jbGM56MwF4"},{"type":"tableRow","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"children":[{"type":"inlineCode","value":"np.logspace()","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"key":"sG0WE7XVWQ"}],"key":"h3CwpxzWzr"},{"type":"tableCell","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"children":[{"type":"text","value":"Log-spaced values","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"key":"ONi6U8WlT9"}],"key":"C7cyRHAWhO"},{"type":"tableCell","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"children":[{"type":"inlineCode","value":"np.logspace(0, 3, 4)","position":{"start":{"line":1843,"column":1},"end":{"line":1843,"column":1}},"key":"dLQ0EwOOsD"}],"key":"SrEaErlcsJ"}],"key":"LHkXvgI4of"},{"type":"tableRow","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"children":[{"type":"inlineCode","value":"np.eye()","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"key":"x984YWNI84"}],"key":"mWOBQCZD8c"},{"type":"tableCell","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"children":[{"type":"text","value":"Identity matrix","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"key":"ty8DVeIHzJ"}],"key":"HRnq0EPUd3"},{"type":"tableCell","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"children":[{"type":"inlineCode","value":"np.eye(3)","position":{"start":{"line":1844,"column":1},"end":{"line":1844,"column":1}},"key":"M7GoPD8TOm"}],"key":"Q02BqjUaVc"}],"key":"mR51kTCymW"},{"type":"tableRow","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"children":[{"type":"inlineCode","value":"np.random.rand()","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"key":"kCOFaqXdFB"}],"key":"FUyn1OodAA"},{"type":"tableCell","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"children":[{"type":"text","value":"Uniform [0,1)","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"key":"NfsCGtszsB"}],"key":"Nrd2VZIL0U"},{"type":"tableCell","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"children":[{"type":"inlineCode","value":"np.random.rand(3, 3)","position":{"start":{"line":1845,"column":1},"end":{"line":1845,"column":1}},"key":"OVb6whNlpF"}],"key":"jEO09oGRPu"}],"key":"Fnhq3ruMaa"},{"type":"tableRow","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"children":[{"type":"inlineCode","value":"np.random.randn()","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"key":"R3u9m6RTz9"}],"key":"tYyizqsuRX"},{"type":"tableCell","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"children":[{"type":"text","value":"Standard normal","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"key":"eOnpG0kwTQ"}],"key":"tDydAk2ZCt"},{"type":"tableCell","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"children":[{"type":"inlineCode","value":"np.random.randn(3, 3)","position":{"start":{"line":1846,"column":1},"end":{"line":1846,"column":1}},"key":"XEPdyGkd0S"}],"key":"XZlf9WQJwx"}],"key":"haBXeaVyFw"}],"key":"XnnIPH4iSm"},{"type":"heading","depth":3,"position":{"start":{"line":1848,"column":1},"end":{"line":1848,"column":1}},"children":[{"type":"text","value":"Essential Array Attributes","position":{"start":{"line":1848,"column":1},"end":{"line":1848,"column":1}},"key":"ZBhifBHqbN"}],"identifier":"essential-array-attributes","label":"Essential Array Attributes","html_id":"essential-array-attributes","implicit":true,"key":"pNceeygBsw"},{"type":"table","position":{"start":{"line":1850,"column":1},"end":{"line":1859,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"children":[{"type":"text","value":"Attribute","position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"key":"odjqnAAoHO"}],"key":"NPeUoHys01"},{"type":"tableCell","header":true,"position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"children":[{"type":"text","value":"Description","position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"key":"kWflN9KV1n"}],"key":"uL4xyZlVSv"},{"type":"tableCell","header":true,"position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"children":[{"type":"text","value":"Example Output","position":{"start":{"line":1850,"column":1},"end":{"line":1850,"column":1}},"key":"fQg8UdbVgu"}],"key":"g8URPntaw5"}],"key":"QzJSf1373Y"},{"type":"tableRow","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"children":[{"type":"inlineCode","value":".shape","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"key":"Swjz2OrOce"}],"key":"I4UfMpomMf"},{"type":"tableCell","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"children":[{"type":"text","value":"Dimensions","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"key":"drAqX7FRl5"}],"key":"OuBNW6T5ru"},{"type":"tableCell","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1852,"column":1},"end":{"line":1852,"column":1}},"key":"kKEgJe57nG"}],"key":"UO8tvUEL40"}],"key":"z29gJQc4zj"},{"type":"tableRow","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"children":[{"type":"inlineCode","value":".ndim","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"key":"MpBhbPB11C"}],"key":"isinrDkn2p"},{"type":"tableCell","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"children":[{"type":"text","value":"Number of dimensions","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"key":"M61SVO5MnN"}],"key":"wa91OP2cbE"},{"type":"tableCell","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"children":[{"type":"inlineCode","value":"2","position":{"start":{"line":1853,"column":1},"end":{"line":1853,"column":1}},"key":"TCKs3DOqtK"}],"key":"aaND4RpmcZ"}],"key":"gQGpSVVPde"},{"type":"tableRow","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"children":[{"type":"inlineCode","value":".size","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"key":"uccKUGbV1p"}],"key":"CfGu2ITdnC"},{"type":"tableCell","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"children":[{"type":"text","value":"Total elements","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"key":"EDzVs5COhB"}],"key":"uoIOWjgwl0"},{"type":"tableCell","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"children":[{"type":"inlineCode","value":"12","position":{"start":{"line":1854,"column":1},"end":{"line":1854,"column":1}},"key":"VB0gR6G3tf"}],"key":"v4hrjOvtTb"}],"key":"xaqIKfAlK9"},{"type":"tableRow","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"children":[{"type":"inlineCode","value":".dtype","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"key":"URiNUomXNt"}],"key":"enHwx9eSGg"},{"type":"tableCell","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"children":[{"type":"text","value":"Data type","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"key":"c3WUvTxwQZ"}],"key":"WLggHnebbv"},{"type":"tableCell","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"children":[{"type":"inlineCode","value":"dtype('float64')","position":{"start":{"line":1855,"column":1},"end":{"line":1855,"column":1}},"key":"jpXxQ0Lhxz"}],"key":"IrAK0jjPNh"}],"key":"TThzDTDlfd"},{"type":"tableRow","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"children":[{"type":"inlineCode","value":".nbytes","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"key":"IfBMqYBdbe"}],"key":"TBP8uiapM0"},{"type":"tableCell","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"children":[{"type":"text","value":"Total bytes","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"key":"nBzmlwTuJe"}],"key":"S2SeCkq3CV"},{"type":"tableCell","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"children":[{"type":"inlineCode","value":"96","position":{"start":{"line":1856,"column":1},"end":{"line":1856,"column":1}},"key":"G5kFt6t93b"}],"key":"sC3D69bD58"}],"key":"n8DimHpq73"},{"type":"tableRow","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"children":[{"type":"inlineCode","value":".T","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"key":"ocSsUAqiX4"}],"key":"WGpG2DHm4m"},{"type":"tableCell","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"children":[{"type":"text","value":"Transpose","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"key":"SrpqIq1he2"}],"key":"rIEvGrFM1l"},{"type":"tableCell","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"children":[{"type":"text","value":"Array view","position":{"start":{"line":1857,"column":1},"end":{"line":1857,"column":1}},"key":"Bkdtvsp45b"}],"key":"mI4Nxqnqrj"}],"key":"PUG0hBFUKv"},{"type":"tableRow","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"children":[{"type":"inlineCode","value":".flags","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"key":"BqoU7psHzc"}],"key":"ETgeJuSfFW"},{"type":"tableCell","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"children":[{"type":"text","value":"Memory layout info","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"key":"a1sTCYN2He"}],"key":"dOImBLSbEH"},{"type":"tableCell","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"children":[{"type":"text","value":"Dict of flags","position":{"start":{"line":1858,"column":1},"end":{"line":1858,"column":1}},"key":"zvZZpuue5p"}],"key":"o5UFZlT0K4"}],"key":"eVUgKsKOmC"},{"type":"tableRow","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"children":[{"type":"inlineCode","value":".base","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"key":"CH03LdaMFt"}],"key":"wIGcc0Zokt"},{"type":"tableCell","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"children":[{"type":"text","value":"Base array if view","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"key":"K595TsyUCY"}],"key":"LqeBZFb049"},{"type":"tableCell","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"children":[{"type":"text","value":"Array or None","position":{"start":{"line":1859,"column":1},"end":{"line":1859,"column":1}},"key":"zJNIw4i8IB"}],"key":"PSZ3kMosCo"}],"key":"vl7UukEMrY"}],"key":"QWfBwOatPb"},{"type":"heading","depth":3,"position":{"start":{"line":1861,"column":1},"end":{"line":1861,"column":1}},"children":[{"type":"text","value":"Common Array Methods","position":{"start":{"line":1861,"column":1},"end":{"line":1861,"column":1}},"key":"nxCcUFZqJt"}],"identifier":"common-array-methods","label":"Common Array Methods","html_id":"common-array-methods","implicit":true,"key":"lO8DskaIyg"},{"type":"table","position":{"start":{"line":1863,"column":1},"end":{"line":1875,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"children":[{"type":"text","value":"Method","position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"key":"az5VJKYvEh"}],"key":"hbAmddLhzy"},{"type":"tableCell","header":true,"position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"key":"ua70oIlCpE"}],"key":"xxBo4Y36zt"},{"type":"tableCell","header":true,"position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1863,"column":1},"end":{"line":1863,"column":1}},"key":"tcrEnNwWzg"}],"key":"GOG1LPWHJY"}],"key":"MbTVn2SaDa"},{"type":"tableRow","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"children":[{"type":"inlineCode","value":".reshape()","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"key":"q3LGk7ldXK"}],"key":"ZQ3FdFL2KA"},{"type":"tableCell","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"children":[{"type":"text","value":"Change dimensions","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"key":"N8YPDWlQyH"}],"key":"GMIV7IHP5K"},{"type":"tableCell","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"children":[{"type":"inlineCode","value":"arr.reshape(2, 3)","position":{"start":{"line":1865,"column":1},"end":{"line":1865,"column":1}},"key":"rhA5OmcLXH"}],"key":"YyjVmowFoZ"}],"key":"bwDFNkwJpm"},{"type":"tableRow","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"children":[{"type":"inlineCode","value":".flatten()","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"key":"tA5JT5l1p3"}],"key":"lIdfKiIIDb"},{"type":"tableCell","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"children":[{"type":"text","value":"To 1D copy","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"key":"g8Mo8i8YZ9"}],"key":"cDgv0rfCjr"},{"type":"tableCell","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"children":[{"type":"inlineCode","value":"arr.flatten()","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"key":"bGehLrT82A"}],"key":"ZAqLSNATXy"}],"key":"fhoqAX6I0C"},{"type":"tableRow","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"children":[{"type":"inlineCode","value":".ravel()","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"key":"Hdnzenuv0o"}],"key":"BZJVt1YSSn"},{"type":"tableCell","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"children":[{"type":"text","value":"To 1D view/copy","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"key":"ziLFjJntSv"}],"key":"OOgMd32r73"},{"type":"tableCell","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"children":[{"type":"inlineCode","value":"arr.ravel()","position":{"start":{"line":1867,"column":1},"end":{"line":1867,"column":1}},"key":"vLKNX9mBMu"}],"key":"Zkm5h6ZZBI"}],"key":"PYVAjcx8pn"},{"type":"tableRow","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"children":[{"type":"inlineCode","value":".transpose()","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"key":"fs9iEUBwZt"}],"key":"mrtGAepzgF"},{"type":"tableCell","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"children":[{"type":"text","value":"Swap axes","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"key":"AlCVTubaCw"}],"key":"vR5C66x8UI"},{"type":"tableCell","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"children":[{"type":"inlineCode","value":"arr.transpose()","position":{"start":{"line":1868,"column":1},"end":{"line":1868,"column":1}},"key":"UlOLBuabOC"}],"key":"ClCMbJKXsg"}],"key":"AZMEbYZFLM"},{"type":"tableRow","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"children":[{"type":"inlineCode","value":".sum()","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"key":"uEqCc7o8Zz"}],"key":"IvSG5ROiHH"},{"type":"tableCell","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"children":[{"type":"text","value":"Sum elements","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"key":"VQQx22KxmO"}],"key":"ByWUznXM6O"},{"type":"tableCell","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"children":[{"type":"inlineCode","value":"arr.sum(axis=0)","position":{"start":{"line":1869,"column":1},"end":{"line":1869,"column":1}},"key":"THDszN6atM"}],"key":"BNgXsR2Jcz"}],"key":"uStOwtsMPK"},{"type":"tableRow","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"children":[{"type":"inlineCode","value":".mean()","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"key":"Bxq1hxuAGn"}],"key":"jcCEf53j4l"},{"type":"tableCell","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"children":[{"type":"text","value":"Average","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"key":"Bm9XmU9eCm"}],"key":"C71bDAH9tY"},{"type":"tableCell","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"children":[{"type":"inlineCode","value":"arr.mean()","position":{"start":{"line":1870,"column":1},"end":{"line":1870,"column":1}},"key":"Sc7jZ8r9PJ"}],"key":"GD4EYrcdWo"}],"key":"sWDuBbgD83"},{"type":"tableRow","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"children":[{"type":"inlineCode","value":".std()","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"key":"wZZCitsn68"}],"key":"i2jc6v9Zrm"},{"type":"tableCell","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"children":[{"type":"text","value":"Standard deviation","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"key":"MXfbIx8BYZ"}],"key":"HrmfeepVbR"},{"type":"tableCell","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"children":[{"type":"inlineCode","value":"arr.std()","position":{"start":{"line":1871,"column":1},"end":{"line":1871,"column":1}},"key":"noCf6Xb1q3"}],"key":"fPaS5yId9E"}],"key":"uWqUq7h7IO"},{"type":"tableRow","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"children":[{"type":"inlineCode","value":".min()/.max()","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"key":"mE0FETfW3N"}],"key":"R9K3sUE6M7"},{"type":"tableCell","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"children":[{"type":"text","value":"Extrema","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"key":"vObhvZpqaO"}],"key":"ShDcZyh3eK"},{"type":"tableCell","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"children":[{"type":"inlineCode","value":"arr.max()","position":{"start":{"line":1872,"column":1},"end":{"line":1872,"column":1}},"key":"b9nGtf9tAG"}],"key":"MoyQs0gMSn"}],"key":"wf74ksy0mg"},{"type":"tableRow","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"children":[{"type":"inlineCode","value":".argmin()/.argmax()","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"key":"gWPEiga4Ml"}],"key":"nlahQ312CV"},{"type":"tableCell","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"children":[{"type":"text","value":"Index of extrema","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"key":"QQOhDiSB95"}],"key":"RCYWFR55Mh"},{"type":"tableCell","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"children":[{"type":"inlineCode","value":"arr.argmax()","position":{"start":{"line":1873,"column":1},"end":{"line":1873,"column":1}},"key":"ja1jOy2FGM"}],"key":"bInDMIEQ9J"}],"key":"JeQNTYI4js"},{"type":"tableRow","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"children":[{"type":"inlineCode","value":".sort()","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"key":"mU6I5iVLTv"}],"key":"xu48Tij9B3"},{"type":"tableCell","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"children":[{"type":"text","value":"Sort in-place","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"key":"pMk1caRWwo"}],"key":"XvTlhHSNiv"},{"type":"tableCell","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"children":[{"type":"inlineCode","value":"arr.sort()","position":{"start":{"line":1874,"column":1},"end":{"line":1874,"column":1}},"key":"fCmMiSgVlL"}],"key":"nATEY4MSWi"}],"key":"FiUKLg3mhA"},{"type":"tableRow","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"children":[{"type":"inlineCode","value":".copy()","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"key":"vdRIDQL07f"}],"key":"CLOUXvZIGp"},{"type":"tableCell","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"children":[{"type":"text","value":"Deep copy","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"key":"EmFEfQNiVh"}],"key":"Xij3g1ovtx"},{"type":"tableCell","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"children":[{"type":"inlineCode","value":"arr.copy()","position":{"start":{"line":1875,"column":1},"end":{"line":1875,"column":1}},"key":"g7k2OdvEg9"}],"key":"icregrzdOO"}],"key":"Dy4Wvu8JTL"}],"key":"yvKG3mQDZ3"},{"type":"heading","depth":3,"position":{"start":{"line":1877,"column":1},"end":{"line":1877,"column":1}},"children":[{"type":"text","value":"Broadcasting Rules Quick Reference","position":{"start":{"line":1877,"column":1},"end":{"line":1877,"column":1}},"key":"OMntiaGjNG"}],"identifier":"broadcasting-rules-quick-reference","label":"Broadcasting Rules Quick Reference","html_id":"broadcasting-rules-quick-reference","implicit":true,"key":"nd7QyLyCui"},{"type":"table","position":{"start":{"line":1879,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"children":[{"type":"text","value":"Shape A","position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"key":"J8OTKdb8c0"}],"key":"vnpDR4eSPZ"},{"type":"tableCell","header":true,"position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"children":[{"type":"text","value":"Shape B","position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"key":"etJ4NZMwIb"}],"key":"JRYmItUplN"},{"type":"tableCell","header":true,"position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"children":[{"type":"text","value":"Result","position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"key":"iTnbBVPkXK"}],"key":"TCg1ZLd4tx"},{"type":"tableCell","header":true,"position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"children":[{"type":"text","value":"Rule Applied","position":{"start":{"line":1879,"column":1},"end":{"line":1879,"column":1}},"key":"qgQnYtiBNo"}],"key":"LsNXdENp6Q"}],"key":"rylhBymahn"},{"type":"tableRow","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"children":[{"type":"inlineCode","value":"(3,)","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"key":"OX2T9IYojI"}],"key":"FGIrs3CKwr"},{"type":"tableCell","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"children":[{"type":"inlineCode","value":"()","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"key":"Pl3Se6H6zo"}],"key":"FDWVhl1gke"},{"type":"tableCell","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"children":[{"type":"inlineCode","value":"(3,)","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"key":"GGNCGu01xd"}],"key":"yKbIZ9IwIV"},{"type":"tableCell","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"children":[{"type":"text","value":"Scalar broadcasts","position":{"start":{"line":1881,"column":1},"end":{"line":1881,"column":1}},"key":"uriF3NhXMu"}],"key":"PEX0VeOD9L"}],"key":"MiRfHY5sao"},{"type":"tableRow","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"key":"vsGXpImmw6"}],"key":"hI5Bf4iBed"},{"type":"tableCell","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"children":[{"type":"inlineCode","value":"(4,)","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"key":"aU74ZDbvdF"}],"key":"xUUf3De2Np"},{"type":"tableCell","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"key":"kQJy2UMLGr"}],"key":"bLkteuYuoT"},{"type":"tableCell","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"children":[{"type":"text","value":"1D broadcasts to rows","position":{"start":{"line":1882,"column":1},"end":{"line":1882,"column":1}},"key":"Bpr4EiP6Ba"}],"key":"A6d14xRPMw"}],"key":"FyOPDm8NR6"},{"type":"tableRow","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"key":"dkBQoeyS1b"}],"key":"mLaNcwxxhL"},{"type":"tableCell","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"children":[{"type":"inlineCode","value":"(3, 1)","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"key":"hxl6D4S6Zo"}],"key":"Z2Iw3kToQ1"},{"type":"tableCell","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"key":"m0Rdbp2lyo"}],"key":"j2VIv4skEK"},{"type":"tableCell","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"children":[{"type":"text","value":"Column broadcasts","position":{"start":{"line":1883,"column":1},"end":{"line":1883,"column":1}},"key":"Yk2bzvYoBE"}],"key":"dCxm1zVCfN"}],"key":"oYmuxoqI5E"},{"type":"tableRow","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"children":[{"type":"inlineCode","value":"(3, 1, 4)","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"key":"HlaafeQzSU"}],"key":"b3cCqGHBLf"},{"type":"tableCell","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"children":[{"type":"inlineCode","value":"(1, 5, 4)","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"key":"QttF0fMyMa"}],"key":"ktefkhuOZS"},{"type":"tableCell","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"children":[{"type":"inlineCode","value":"(3, 5, 4)","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"key":"RB11redHK7"}],"key":"zLc2N4NmZk"},{"type":"tableCell","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"children":[{"type":"text","value":"Both broadcast","position":{"start":{"line":1884,"column":1},"end":{"line":1884,"column":1}},"key":"EfeP9vvSPf"}],"key":"A71LNoLmx2"}],"key":"fZ8zs187x5"},{"type":"tableRow","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"key":"YuGiJyLXIt"}],"key":"Ljc9MtYR46"},{"type":"tableCell","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"children":[{"type":"inlineCode","value":"(2, 3, 4)","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"key":"bFmO1JTkTe"}],"key":"FIBKrWPQHp"},{"type":"tableCell","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"children":[{"type":"inlineCode","value":"(2, 3, 4)","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"key":"eMuTZJCkL4"}],"key":"O3PQ8is52q"},{"type":"tableCell","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"children":[{"type":"text","value":"Smaller adds dimensions","position":{"start":{"line":1885,"column":1},"end":{"line":1885,"column":1}},"key":"kC1fRwkZJ6"}],"key":"gJUwypU50K"}],"key":"asnXWWf9MR"},{"type":"tableRow","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"key":"O71ZNUjyZO"}],"key":"ymS7MsikzV"},{"type":"tableCell","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"inlineCode","value":"(5, 4)","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"key":"brnr0X7lDN"}],"key":"hM5hPQnbQW"},{"type":"tableCell","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"text","value":"Error!","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"key":"dQINh1M766"}],"key":"Zb9pX6Wou3"},{"type":"tableCell","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"children":[{"type":"text","value":"Incompatible shapes","position":{"start":{"line":1886,"column":1},"end":{"line":1886,"column":1}},"key":"zEb8C3eR4w"}],"key":"QcVBJu44oJ"}],"key":"EnGiUMfu2k"}],"key":"NJaisrHVB6"},{"type":"heading","depth":2,"position":{"start":{"line":1888,"column":1},"end":{"line":1888,"column":1}},"children":[{"type":"text","value":"Debugging Checklist","position":{"start":{"line":1888,"column":1},"end":{"line":1888,"column":1}},"key":"In85wHUhTU"}],"identifier":"debugging-checklist","label":"Debugging Checklist","html_id":"debugging-checklist","implicit":true,"key":"QQUBKgXjoN"},{"type":"paragraph","position":{"start":{"line":1890,"column":1},"end":{"line":1890,"column":1}},"children":[{"type":"text","value":"When NumPy code doesn’t work as expected:","position":{"start":{"line":1890,"column":1},"end":{"line":1890,"column":1}},"key":"dl8O485q3g"}],"key":"LDeQDqQgUq"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":1892,"column":1},"end":{"line":1898,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"children":[{"type":"text","value":"Check shapes","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"key":"sPAjsutCNI"}],"key":"EB0iRycqeW"},{"type":"text","value":": ","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"key":"WyQ8eS7xyw"},{"type":"inlineCode","value":"print(f\"Shape: {arr.shape}\")","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"key":"AVQGnaCHlL"}],"key":"vXbM6eylJ2"},{"type":"listItem","spread":true,"position":{"start":{"line":1893,"column":1},"end":{"line":1893,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1893,"column":1},"end":{"line":1893,"column":1}},"children":[{"type":"text","value":"Check dtype","position":{"start":{"line":1893,"column":1},"end":{"line":1893,"column":1}},"key":"PgsvhWhFtD"}],"key":"EMIoXXpbb0"},{"type":"text","value":": ","position":{"start":{"line":1893,"column":1},"end":{"line":1893,"column":1}},"key":"YWBBOypSxU"},{"type":"inlineCode","value":"print(f\"Dtype: {arr.dtype}\")","position":{"start":{"line":1893,"column":1},"end":{"line":1893,"column":1}},"key":"DKobOgCvgP"}],"key":"kiY4VTgMET"},{"type":"listItem","spread":true,"position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"children":[{"type":"text","value":"Check if view or copy","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"key":"n0XX2J3qxV"}],"key":"OJqjAhvINA"},{"type":"text","value":": ","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"key":"CBjb9BEcRG"},{"type":"inlineCode","value":"print(f\"Owns data: {arr.flags['OWNDATA']}\")","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"key":"xz6w3dGh4a"}],"key":"vhnNOUMuQh"},{"type":"listItem","spread":true,"position":{"start":{"line":1895,"column":1},"end":{"line":1895,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1895,"column":1},"end":{"line":1895,"column":1}},"children":[{"type":"text","value":"Check for NaN/Inf","position":{"start":{"line":1895,"column":1},"end":{"line":1895,"column":1}},"key":"snU3F3Xvam"}],"key":"VsS3yeUqAB"},{"type":"text","value":": ","position":{"start":{"line":1895,"column":1},"end":{"line":1895,"column":1}},"key":"voPGcv8ZF3"},{"type":"inlineCode","value":"print(f\"Has NaN: {np.isnan(arr).any()}\")","position":{"start":{"line":1895,"column":1},"end":{"line":1895,"column":1}},"key":"RuHQrbTYcY"}],"key":"NxvApd3wVC"},{"type":"listItem","spread":true,"position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"children":[{"type":"text","value":"Check memory layout","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"kuUSKbPv9l"}],"key":"WiCp9eCzSx"},{"type":"text","value":": ","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"S6MzIDmEIg"},{"type":"inlineCode","value":"print(f\"C-contiguous: {arr.flags['C_CONTIGUOUS']}\")","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"Yvx6ucIVti"}],"key":"seCYuAqOjV"},{"type":"listItem","spread":true,"position":{"start":{"line":1897,"column":1},"end":{"line":1898,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1897,"column":1},"end":{"line":1897,"column":1}},"children":[{"type":"text","value":"Check broadcasting","position":{"start":{"line":1897,"column":1},"end":{"line":1897,"column":1}},"key":"dHNTR8kNnf"}],"key":"wQBhrBiMpW"},{"type":"text","value":": ","position":{"start":{"line":1897,"column":1},"end":{"line":1897,"column":1}},"key":"XflkfTCgKJ"},{"type":"inlineCode","value":"np.broadcast_shapes(a.shape, b.shape)","position":{"start":{"line":1897,"column":1},"end":{"line":1897,"column":1}},"key":"nO6xOqltPs"}],"key":"Ds7puwjkF7"}],"key":"PZipDONxHg"},{"type":"heading","depth":2,"position":{"start":{"line":1899,"column":1},"end":{"line":1899,"column":1}},"children":[{"type":"text","value":"Further Resources","position":{"start":{"line":1899,"column":1},"end":{"line":1899,"column":1}},"key":"KXkoybCMuO"}],"identifier":"further-resources","label":"Further Resources","html_id":"further-resources","implicit":true,"key":"DqzoTHyMDB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1901,"column":1},"end":{"line":1905,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1901,"column":1},"end":{"line":1901,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/user/index.html","position":{"start":{"line":1901,"column":1},"end":{"line":1901,"column":1}},"children":[{"type":"text","value":"NumPy User Guide","position":{"start":{"line":1901,"column":1},"end":{"line":1901,"column":1}},"key":"L4yeBLrWHo"}],"urlSource":"https://numpy.org/doc/stable/user/index.html","key":"vEaMUUumqk"},{"type":"text","value":" - Official comprehensive guide","position":{"start":{"line":1901,"column":1},"end":{"line":1901,"column":1}},"key":"UgYRktHZEb"}],"key":"aMrnwv8GTf"},{"type":"listItem","spread":true,"position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/reference/index.html","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"children":[{"type":"text","value":"NumPy API Reference","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"key":"e2800hwYge"}],"urlSource":"https://numpy.org/doc/stable/reference/index.html","key":"PC6A8sukn9"},{"type":"text","value":" - Complete function documentation","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"key":"SI8dhFF26S"}],"key":"L0IsiNuDqO"},{"type":"listItem","spread":true,"position":{"start":{"line":1903,"column":1},"end":{"line":1903,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/user/numpy-for-matlab-users.html","position":{"start":{"line":1903,"column":1},"end":{"line":1903,"column":1}},"children":[{"type":"text","value":"NumPy for MATLAB users","position":{"start":{"line":1903,"column":1},"end":{"line":1903,"column":1}},"key":"rkH19cc9Od"}],"urlSource":"https://numpy.org/doc/stable/user/numpy-for-matlab-users.html","key":"Tr4dEiqAHq"},{"type":"text","value":" - Transition guide","position":{"start":{"line":1903,"column":1},"end":{"line":1903,"column":1}},"key":"jptLmExt9y"}],"key":"BlIY2GlLDS"},{"type":"listItem","spread":true,"position":{"start":{"line":1904,"column":1},"end":{"line":1905,"column":1}},"children":[{"type":"link","url":"https://www.labri.fr/perso/nrougier/from-python-to-numpy/","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"children":[{"type":"text","value":"From Python to NumPy","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"gd95RtDZxX"}],"urlSource":"https://www.labri.fr/perso/nrougier/from-python-to-numpy/","key":"d2GkJhw6n5"},{"type":"text","value":" - Advanced vectorization techniques","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"lOtgNagUNf"}],"key":"UzOLVRMrLf"}],"key":"sfSB2cv7zl"},{"type":"heading","depth":2,"position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"cIVkYhT9JL"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview","implicit":true,"key":"Yyfxr8SvZr"},{"type":"paragraph","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"children":[{"type":"text","value":"With NumPy mastery achieved, Chapter 8 introduces Matplotlib for visualization. You’ll discover how Matplotlib’s object-oriented design (building on Chapter 6) works seamlessly with NumPy arrays. Every plot you create will use NumPy arrays as its foundation, and you’ll learn to create publication-quality figures that bring your data to life.","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"gZlqCQ04cx"}],"key":"s29yQXSNak"},{"type":"paragraph","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"children":[{"type":"text","value":"The NumPy-Matplotlib synergy is fundamental: plot data is NumPy arrays, image data is NumPy arrays, and all transformations use NumPy operations. Your deep understanding of NumPy will make mastering visualization natural and intuitive!# Chapter 7: NumPy - The Foundation of Scientific Computing","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"key":"LFgBW0uHOT"}],"key":"JGTLC1SfI5"},{"type":"heading","depth":2,"position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"key":"CRsLL9MmWx"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives-1","implicit":true,"key":"xsbLKC1aCv"},{"type":"paragraph","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"key":"dMqUJj9M9r"}],"key":"kSxjmRS4AW"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1915,"column":1},"end":{"line":1923,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1915,"column":1},"end":{"line":1915,"column":1}},"children":[{"type":"text","value":"Understand why NumPy arrays are 10-100x faster than Python lists for numerical computation","position":{"start":{"line":1915,"column":1},"end":{"line":1915,"column":1}},"key":"DIt46LIHoH"}],"key":"CIIrzQJJK3"},{"type":"listItem","spread":true,"position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"children":[{"type":"text","value":"Create and manipulate arrays using various initialization methods and slicing techniques","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"pjmJY07e8K"}],"key":"LRCkjQhrvP"},{"type":"listItem","spread":true,"position":{"start":{"line":1917,"column":1},"end":{"line":1917,"column":1}},"children":[{"type":"text","value":"Apply vectorization to eliminate explicit loops and write efficient scientific code","position":{"start":{"line":1917,"column":1},"end":{"line":1917,"column":1}},"key":"RaRMrQznkf"}],"key":"owe74HR9Kz"},{"type":"listItem","spread":true,"position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"children":[{"type":"text","value":"Master broadcasting rules to perform operations on arrays of different shapes elegantly","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"key":"qELI9COYzD"}],"key":"YzIok5Zllc"},{"type":"listItem","spread":true,"position":{"start":{"line":1919,"column":1},"end":{"line":1919,"column":1}},"children":[{"type":"text","value":"Use NumPy’s mathematical functions for scientific calculations","position":{"start":{"line":1919,"column":1},"end":{"line":1919,"column":1}},"key":"Xe6aytlvF0"}],"key":"irxXiir6A8"},{"type":"listItem","spread":true,"position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"children":[{"type":"text","value":"Understand memory layout and its impact on performance","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"key":"DbUEd3xyud"}],"key":"i8fDC19B09"},{"type":"listItem","spread":true,"position":{"start":{"line":1921,"column":1},"end":{"line":1921,"column":1}},"children":[{"type":"text","value":"Debug common NumPy errors and understand when operations create copies vs views","position":{"start":{"line":1921,"column":1},"end":{"line":1921,"column":1}},"key":"aLEuye2Fqo"}],"key":"C7o4ZdFHmX"},{"type":"listItem","spread":true,"position":{"start":{"line":1922,"column":1},"end":{"line":1923,"column":1}},"children":[{"type":"text","value":"Integrate NumPy with the scientific Python ecosystem","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"XEL4J2FrB6"}],"key":"AV08z6n8wK"}],"key":"fZHWc2txBv"},{"type":"heading","depth":2,"position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"key":"x9BrjQr7tg"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check-1","implicit":true,"key":"sMGVzSxWuT"},{"type":"paragraph","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"p9tF1l4Vev"}],"key":"gODkCwQ85c"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1927,"column":1},"end":{"line":1932,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1927,"column":1},"end":{"line":1927,"column":1}},"children":[{"type":"text","value":"✓ Work with Python lists and understand indexing/slicing (Chapter 4)","position":{"start":{"line":1927,"column":1},"end":{"line":1927,"column":1}},"key":"hTiBAQeL2h"}],"key":"D3UWozbQ9M"},{"type":"listItem","spread":true,"position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"children":[{"type":"text","value":"✓ Write functions and understand scope (Chapter 5)","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"key":"ZUP2cyjvcH"}],"key":"ZH4D2j1SmZ"},{"type":"listItem","spread":true,"position":{"start":{"line":1929,"column":1},"end":{"line":1929,"column":1}},"children":[{"type":"text","value":"✓ Understand object methods and attributes (Chapter 6)","position":{"start":{"line":1929,"column":1},"end":{"line":1929,"column":1}},"key":"WKOLkxzaX4"}],"key":"eeR5NW2iZE"},{"type":"listItem","spread":true,"position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"children":[{"type":"text","value":"✓ Use list comprehensions for data transformation (Chapter 4)","position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"key":"yeB2oRrWTR"}],"key":"FlagqarXWS"},{"type":"listItem","spread":true,"position":{"start":{"line":1931,"column":1},"end":{"line":1932,"column":1}},"children":[{"type":"text","value":"✓ Work with nested data structures (Chapter 4)","position":{"start":{"line":1931,"column":1},"end":{"line":1931,"column":1}},"key":"iT95SnL4UV"}],"key":"GQwCYKoorJ"}],"key":"tjLmPeQ9O2"},{"type":"heading","depth":2,"position":{"start":{"line":1933,"column":1},"end":{"line":1933,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":1933,"column":1},"end":{"line":1933,"column":1}},"key":"y6CEa5nVFZ"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview-1","implicit":true,"key":"OT28jipd2y"},{"type":"paragraph","position":{"start":{"line":1935,"column":1},"end":{"line":1935,"column":1}},"children":[{"type":"text","value":"So far, you’ve been using Python lists for numerical data. But try this simple experiment: compute the sum of squares for a million numbers using a list comprehension versus a loop. Even with list comprehensions, Python is surprisingly slow for numerical work. This is where NumPy transforms Python from a general-purpose language into a scientific computing powerhouse.","position":{"start":{"line":1935,"column":1},"end":{"line":1935,"column":1}},"key":"GDikMqhfja"}],"key":"kYS94cbPaq"},{"type":"paragraph","position":{"start":{"line":1937,"column":1},"end":{"line":1937,"column":1}},"children":[{"type":"text","value":"NumPy (Numerical Python) is not just a library—it’s the foundation upon which the entire scientific Python ecosystem is built. Every plot you make with Matplotlib, every optimization you run with SciPy, every dataframe you manipulate with Pandas, ultimately relies on NumPy arrays. Understanding NumPy deeply means understanding how scientific computing works in Python.","position":{"start":{"line":1937,"column":1},"end":{"line":1937,"column":1}},"key":"hDGsUvtWRW"}],"key":"sgdO3TqXkG"},{"type":"paragraph","position":{"start":{"line":1939,"column":1},"end":{"line":1939,"column":1}},"children":[{"type":"text","value":"This chapter reveals why NumPy is fast (hint: it’s not written in Python), how its mental model differs from pure Python (vectorization over loops), and how its design patterns appear throughout scientific computing. You’ll learn to think in arrays, not elements—a fundamental shift that makes the difference between code that takes hours and code that takes seconds. By the end, you’ll understand why that ","position":{"start":{"line":1939,"column":1},"end":{"line":1939,"column":1}},"key":"QLJB4td1cP"},{"type":"inlineCode","value":"Star","position":{"start":{"line":1939,"column":1},"end":{"line":1939,"column":1}},"key":"XdOzXZ2kqB"},{"type":"text","value":" class you created in Chapter 6 might be better represented as a structured NumPy array when you have millions of stars to process.","position":{"start":{"line":1939,"column":1},"end":{"line":1939,"column":1}},"key":"LJ2QXBE3C3"}],"key":"meRghMisfg"},{"type":"heading","depth":2,"position":{"start":{"line":1941,"column":1},"end":{"line":1941,"column":1}},"children":[{"type":"text","value":"7.1 Why NumPy? The Performance Revolution","position":{"start":{"line":1941,"column":1},"end":{"line":1941,"column":1}},"key":"IBcvvQR4x7"}],"identifier":"id-7-1-why-numpy-the-performance-revolution","label":"7.1 Why NumPy? The Performance Revolution","html_id":"id-7-1-why-numpy-the-performance-revolution-1","implicit":true,"key":"EL3IUbj0QR"},{"type":"paragraph","position":{"start":{"line":1943,"column":1},"end":{"line":1943,"column":1}},"children":[{"type":"text","value":"Let’s start with a motivating example that shows why NumPy exists:","position":{"start":{"line":1943,"column":1},"end":{"line":1943,"column":1}},"key":"N8xUrjhA68"}],"key":"jZB5wYJ3HF"},{"type":"code","lang":"python","value":"In [1]: import time\nIn [2]: import numpy as np\n\n# Pure Python: sum of squares for 1 million numbers\nIn [3]: def python_sum_of_squares(n):\n   ...:     \"\"\"Pure Python implementation.\"\"\"\n   ...:     numbers = list(range(n))\n   ...:     return sum(x**2 for x in numbers)\n\n# NumPy: same calculation\nIn [4]: def numpy_sum_of_squares(n):\n   ...:     \"\"\"NumPy implementation.\"\"\"\n   ...:     numbers = np.arange(n)\n   ...:     return np.sum(numbers**2)\n\n# Time both approaches\nIn [5]: n = 1_000_000\n\nIn [6]: start = time.perf_counter()\nIn [7]: python_result = python_sum_of_squares(n)\nIn [8]: python_time = time.perf_counter() - start\n\nIn [9]: start = time.perf_counter()\nIn [10]: numpy_result = numpy_sum_of_squares(n)\nIn [11]: numpy_time = time.perf_counter() - start\n\nIn [12]: print(f\"Python: {python_time:.3f} seconds\")\nIn [13]: print(f\"NumPy:  {numpy_time:.3f} seconds\")\nIn [14]: print(f\"Speedup: {python_time/numpy_time:.1f}x\")\nPython: 0.142 seconds\nNumPy:  0.003 seconds\nSpeedup: 47.3x\n\nIn [15]: python_result == numpy_result  # Same answer!\nOut[15]: True","position":{"start":{"line":1945,"column":1},"end":{"line":1981,"column":1}},"key":"VOWvD6dRAT"},{"type":"paragraph","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"children":[{"type":"text","value":"NumPy is nearly 50 times faster! But why? The answer reveals fundamental truths about scientific computing.","position":{"start":{"line":1983,"column":1},"end":{"line":1983,"column":1}},"key":"w5XSopZQGX"}],"key":"aSEqQQmun5"},{"type":"heading","depth":3,"position":{"start":{"line":1985,"column":1},"end":{"line":1985,"column":1}},"children":[{"type":"text","value":"The Secret: NumPy Arrays Are Not Python Lists","position":{"start":{"line":1985,"column":1},"end":{"line":1985,"column":1}},"key":"YQAFtBUkUi"}],"identifier":"the-secret-numpy-arrays-are-not-python-lists","label":"The Secret: NumPy Arrays Are Not Python Lists","html_id":"the-secret-numpy-arrays-are-not-python-lists-1","implicit":true,"key":"nZ1iSRnrG7"},{"type":"mermaid","value":"flowchart TD\n    subgraph \"Python List\"\n        L[List Object] --> P1[Pointer 1]\n        L --> P2[Pointer 2]\n        L --> P3[Pointer 3]\n        L --> PN[Pointer N]\n        \n        P1 --> O1[Integer Object<br/>type: int<br/>value: 0]\n        P2 --> O2[Integer Object<br/>type: int<br/>value: 1]\n        P3 --> O3[Integer Object<br/>type: int<br/>value: 2]\n        PN --> ON[Integer Object<br/>type: int<br/>value: N-1]\n    end\n    \n    subgraph \"NumPy Array\"\n        A[Array Header<br/>dtype: int64<br/>shape: (N,)<br/>strides: (8,)] --> M[Contiguous Memory Block<br/>0 | 1 | 2 | 3 | ... | N-1]\n    end\n    \n    style L fill:#f9f\n    style A fill:#9f9\n    style M fill:#9ff","key":"UaBaOab1eU"},{"type":"paragraph","position":{"start":{"line":2010,"column":1},"end":{"line":2010,"column":1}},"children":[{"type":"strong","position":{"start":{"line":2010,"column":1},"end":{"line":2010,"column":1}},"children":[{"type":"text","value":"Python lists","position":{"start":{"line":2010,"column":1},"end":{"line":2010,"column":1}},"key":"zCDZ51K9qe"}],"key":"OyAUSSFdu6"},{"type":"text","value":" store pointers to Python objects scattered throughout memory. Each integer is a full Python object with type information, reference counting, and other overhead. Accessing an element means following a pointer, checking the type, extracting the value—expensive operations repeated millions of times.","position":{"start":{"line":2010,"column":1},"end":{"line":2010,"column":1}},"key":"q0pgjgnn08"}],"key":"qxdlHpBMPb"},{"type":"paragraph","position":{"start":{"line":2012,"column":1},"end":{"line":2012,"column":1}},"children":[{"type":"strong","position":{"start":{"line":2012,"column":1},"end":{"line":2012,"column":1}},"children":[{"type":"text","value":"NumPy arrays","position":{"start":{"line":2012,"column":1},"end":{"line":2012,"column":1}},"key":"LbcLWU6snt"}],"key":"eVTvnqoLaC"},{"type":"text","value":" store raw numbers in contiguous memory, like C arrays. The array header contains metadata (data type, shape, strides), but the data itself is just bytes in memory. Operations can be passed directly to optimized C/Fortran code that processes memory blocks efficiently, leveraging CPU vector instructions and cache locality.","position":{"start":{"line":2012,"column":1},"end":{"line":2012,"column":1}},"key":"akm7LnshR0"}],"key":"Zgu4H4sSmH"},{"type":"heading","depth":3,"position":{"start":{"line":2014,"column":1},"end":{"line":2014,"column":1}},"children":[{"type":"text","value":"The Mental Model Shift: Vectorization","position":{"start":{"line":2014,"column":1},"end":{"line":2014,"column":1}},"key":"sVkwzeSWri"}],"identifier":"the-mental-model-shift-vectorization","label":"The Mental Model Shift: Vectorization","html_id":"the-mental-model-shift-vectorization-1","implicit":true,"key":"seAvkC0clb"},{"type":"paragraph","position":{"start":{"line":2016,"column":1},"end":{"line":2016,"column":1}},"children":[{"type":"text","value":"The performance gain requires a different programming style. Instead of thinking about individual elements, think about entire arrays:","position":{"start":{"line":2016,"column":1},"end":{"line":2016,"column":1}},"key":"OJo5Cfadqe"}],"key":"iItw3At6aB"},{"type":"code","lang":"python","value":"# Python style: loop over elements\ndef python_distance(x_coords, y_coords):\n    \"\"\"Calculate distances from origin, Python style.\"\"\"\n    distances = []\n    for x, y in zip(x_coords, y_coords):\n        dist = (x**2 + y**2)**0.5\n        distances.append(dist)\n    return distances\n\n# NumPy style: operate on entire arrays\ndef numpy_distance(x_coords, y_coords):\n    \"\"\"Calculate distances from origin, NumPy style.\"\"\"\n    return np.sqrt(x_coords**2 + y_coords**2)\n\n# Test with 100,000 points\nn_points = 100_000\nx = np.random.randn(n_points)\ny = np.random.randn(n_points)\n\n# Convert to lists for Python version\nx_list = x.tolist()\ny_list = y.tolist()\n\n%timeit python_distance(x_list, y_list)\n# 31.2 ms ± 501 µs per loop\n\n%timeit numpy_distance(x, y)\n# 371 µs ± 5.2 µs per loop\n\n# 84x faster!","position":{"start":{"line":2018,"column":1},"end":{"line":2049,"column":1}},"key":"sYaQ4j0pvq"},{"type":"paragraph","position":{"start":{"line":2051,"column":1},"end":{"line":2051,"column":1}},"children":[{"type":"text","value":"This is ","position":{"start":{"line":2051,"column":1},"end":{"line":2051,"column":1}},"key":"HONT2QNCtN"},{"type":"strong","position":{"start":{"line":2051,"column":1},"end":{"line":2051,"column":1}},"children":[{"type":"text","value":"vectorization","position":{"start":{"line":2051,"column":1},"end":{"line":2051,"column":1}},"key":"L8fjF4Eg24"}],"key":"tGKhpAl6G6"},{"type":"text","value":": expressing operations on entire arrays rather than individual elements. The loop still happens, but it’s in compiled C code, not interpreted Python.","position":{"start":{"line":2051,"column":1},"end":{"line":2051,"column":1}},"key":"JUq4BkUaDM"}],"key":"EylXi4MDyk"},{"type":"heading","depth":3,"position":{"start":{"line":2053,"column":1},"end":{"line":2053,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":2053,"column":1},"end":{"line":2053,"column":1}},"key":"h6BuKv0RVA"},{"type":"strong","position":{"start":{"line":2053,"column":1},"end":{"line":2053,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Two-Language Problem","position":{"start":{"line":2053,"column":1},"end":{"line":2053,"column":1}},"key":"e20FrDHRh0"}],"key":"K3YcPNn9Em"}],"identifier":"id-computational-thinking-box-the-two-language-problem","label":"📦 Computational Thinking Box: The Two-Language Problem","html_id":"id-computational-thinking-box-the-two-language-problem-1","implicit":true,"key":"v0kAcIjnUe"},{"type":"code","lang":"","value":"PATTERN: The Two-Language Problem in Scientific Computing\n\nMany scientific computing ecosystems face a dilemma:\n- High-level languages (Python, MATLAB, R) are great for experimentation\n- Low-level languages (C, Fortran) are needed for performance\n- Scientists want to think about science, not memory management\n\nNumPy's Solution:\n- Python interface for thinking and prototyping\n- C/Fortran implementation for computation\n- Seamless boundary between the two\n\nThis pattern appears throughout scientific Python:\n- NumPy: Python interface, C implementation\n- SciPy: Python interface, Fortran/C++ implementation  \n- Pandas: Python interface, Cython implementation\n- Scikit-learn: Python interface, Cython/C++ implementation\n\nThe key insight: put the boundary at the right abstraction level.\nFor NumPy, that's the array operation, not the element operation.","position":{"start":{"line":2055,"column":1},"end":{"line":2076,"column":1}},"key":"Tlmlijs9a5"},{"type":"heading","depth":2,"position":{"start":{"line":2078,"column":1},"end":{"line":2078,"column":1}},"children":[{"type":"text","value":"7.2 Creating Arrays: From Lists to Grids","position":{"start":{"line":2078,"column":1},"end":{"line":2078,"column":1}},"key":"ERg7UoC07t"}],"identifier":"id-7-2-creating-arrays-from-lists-to-grids","label":"7.2 Creating Arrays: From Lists to Grids","html_id":"id-7-2-creating-arrays-from-lists-to-grids-1","implicit":true,"key":"jluI2xCk72"},{"type":"paragraph","position":{"start":{"line":2080,"column":1},"end":{"line":2080,"column":1}},"children":[{"type":"text","value":"NumPy provides many ways to create arrays, each optimized for different use cases. Understanding these is crucial for efficient scientific computing.","position":{"start":{"line":2080,"column":1},"end":{"line":2080,"column":1}},"key":"ttKE2zmKuX"}],"key":"zfAnNblMqT"},{"type":"heading","depth":3,"position":{"start":{"line":2082,"column":1},"end":{"line":2082,"column":1}},"children":[{"type":"text","value":"From Python Sequences","position":{"start":{"line":2082,"column":1},"end":{"line":2082,"column":1}},"key":"pycZrQ92r0"}],"identifier":"from-python-sequences","label":"From Python Sequences","html_id":"from-python-sequences-1","implicit":true,"key":"Mo3vraMtl6"},{"type":"paragraph","position":{"start":{"line":2084,"column":1},"end":{"line":2084,"column":1}},"children":[{"type":"text","value":"The most straightforward way is converting existing Python data:","position":{"start":{"line":2084,"column":1},"end":{"line":2084,"column":1}},"key":"BVwQyMcqo6"}],"key":"efSQT8cOEq"},{"type":"code","lang":"python","value":"In [16]: # From a list\nIn [17]: list_data = [1, 2, 3, 4, 5]\nIn [18]: arr = np.array(list_data)\nIn [19]: print(f\"Array: {arr}\")\nIn [20]: print(f\"Type: {type(arr)}\")  # Note: it's an object!\nIn [21]: print(f\"Dtype: {arr.dtype}\")  # Data type of elements\nArray: [1 2 3 4 5]\nType: <class 'numpy.ndarray'>\nDtype: int64\n\nIn [22]: # From nested lists (creates 2D array)\nIn [23]: matrix_data = [[1, 2, 3],\n   ...:                 [4, 5, 6],\n   ...:                 [7, 8, 9]]\nIn [24]: matrix = np.array(matrix_data)\nIn [25]: print(f\"Matrix:\\n{matrix}\")\nIn [26]: print(f\"Shape: {matrix.shape}\")  # (rows, columns)\nIn [27]: print(f\"Dimensions: {matrix.ndim}\")\nMatrix:\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\nShape: (3, 3)\nDimensions: 2","position":{"start":{"line":2086,"column":1},"end":{"line":2111,"column":1}},"key":"YRh2DqL6Wc"},{"type":"paragraph","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"children":[{"type":"text","value":"Remember from Chapter 6: NumPy arrays are objects! They have attributes (","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"T0QjBkv2Fi"},{"type":"inlineCode","value":"shape","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"qkwE2WqPfw"},{"type":"text","value":", ","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"SWsCdjnpm9"},{"type":"inlineCode","value":"dtype","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"FbsObr6oMI"},{"type":"text","value":", ","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"tBGp0tieGM"},{"type":"inlineCode","value":"size","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"Zzs79rSLCH"},{"type":"text","value":") and methods (","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"XIg6CxDiJN"},{"type":"inlineCode","value":"reshape()","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"tzYc04f8Ro"},{"type":"text","value":", ","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"lm2nOt2owl"},{"type":"inlineCode","value":"mean()","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"a4BBfIPRJh"},{"type":"text","value":", ","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"XsW0HWQaem"},{"type":"inlineCode","value":"sum()","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"KX2DsBq9eE"},{"type":"text","value":"). This is OOP in action.","position":{"start":{"line":2113,"column":1},"end":{"line":2113,"column":1}},"key":"K5OJIQ2Z43"}],"key":"tcwoAl4Euh"},{"type":"heading","depth":3,"position":{"start":{"line":2115,"column":1},"end":{"line":2115,"column":1}},"children":[{"type":"text","value":"Initialization Functions","position":{"start":{"line":2115,"column":1},"end":{"line":2115,"column":1}},"key":"CYLWc0VVHJ"}],"identifier":"initialization-functions","label":"Initialization Functions","html_id":"initialization-functions-1","implicit":true,"key":"rg0wRxdCqZ"},{"type":"paragraph","position":{"start":{"line":2117,"column":1},"end":{"line":2117,"column":1}},"children":[{"type":"text","value":"Creating arrays from scratch is often more efficient than converting lists:","position":{"start":{"line":2117,"column":1},"end":{"line":2117,"column":1}},"key":"vA2OcIYFpV"}],"key":"FHtYcU7n0t"},{"type":"code","lang":"python","value":"In [28]: # Arrays of zeros (useful for accumulation)\nIn [29]: zeros = np.zeros((3, 4))  # 3 rows, 4 columns\nIn [30]: print(f\"Zeros:\\n{zeros}\")\nZeros:\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\n\nIn [31]: # Arrays of ones (useful for counting)\nIn [32]: ones = np.ones((2, 3), dtype=np.int32)  # Can specify dtype\nIn [33]: print(f\"Ones:\\n{ones}\")\nOnes:\n[[1 1 1]\n [1 1 1]]\n\nIn [34]: # Identity matrix (useful for linear algebra)\nIn [35]: identity = np.eye(3)\nIn [36]: print(f\"Identity:\\n{identity}\")\nIdentity:\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\nIn [37]: # Uninitialized array (fastest, but contains garbage)\nIn [38]: empty = np.empty((2, 2))  # DANGER: random values!\nIn [39]: print(f\"Empty (undefined values):\\n{empty}\")\nEmpty (undefined values):\n[[4.67e-310 0.00e+000]\n [0.00e+000 0.00e+000]]","position":{"start":{"line":2119,"column":1},"end":{"line":2149,"column":1}},"key":"yMSSA8xBXH"},{"type":"heading","depth":3,"position":{"start":{"line":2151,"column":1},"end":{"line":2151,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":2151,"column":1},"end":{"line":2151,"column":1}},"key":"x5uoSyj60j"},{"type":"strong","position":{"start":{"line":2151,"column":1},"end":{"line":2151,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Uninitialized Arrays","position":{"start":{"line":2151,"column":1},"end":{"line":2151,"column":1}},"key":"ORnpsvF6Gu"}],"key":"ZYJoGKzXjS"}],"identifier":"id-common-bug-alert-uninitialized-arrays","label":"⚠️ Common Bug Alert: Uninitialized Arrays","html_id":"id-common-bug-alert-uninitialized-arrays-1","implicit":true,"key":"UgeiSHtLz2"},{"type":"code","lang":"python","value":"# WRONG: Assuming empty arrays contain zeros\ndef calculate_sums_wrong(data, n_bins):\n    sums = np.empty(n_bins)  # Contains garbage!\n    for i, value in enumerate(data):\n        bin_idx = int(value) % n_bins\n        sums[bin_idx] += value  # Adding to garbage!\n    return sums\n\n# CORRECT: Use zeros for accumulation\ndef calculate_sums_correct(data, n_bins):\n    sums = np.zeros(n_bins)  # Initialized to zero\n    for i, value in enumerate(data):\n        bin_idx = int(value) % n_bins\n        sums[bin_idx] += value\n    return sums\n\n# The bug might not be obvious in testing!\ntest_data = np.array([1.5, 2.7, 3.2])\nprint(calculate_sums_wrong(test_data, 5))   # Unpredictable!\nprint(calculate_sums_correct(test_data, 5))  # [0, 1.5, 2.7, 3.2, 0]","position":{"start":{"line":2153,"column":1},"end":{"line":2174,"column":1}},"key":"xEpkn3ImyB"},{"type":"paragraph","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"children":[{"type":"text","value":"Always use ","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"RWnuaGpGP6"},{"type":"inlineCode","value":"zeros()","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"n1RZxXVA0s"},{"type":"text","value":" for accumulation, ","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"TSTxTxO8rN"},{"type":"inlineCode","value":"ones()","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"ZpedxF7VJi"},{"type":"text","value":" for counting, and only use ","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"AQzGryvULg"},{"type":"inlineCode","value":"empty()","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"wNH2gF71hA"},{"type":"text","value":" when you’ll immediately overwrite all values.","position":{"start":{"line":2176,"column":1},"end":{"line":2176,"column":1}},"key":"owM0vtc09R"}],"key":"MYyCF4XjLk"},{"type":"heading","depth":3,"position":{"start":{"line":2178,"column":1},"end":{"line":2178,"column":1}},"children":[{"type":"text","value":"Range Arrays","position":{"start":{"line":2178,"column":1},"end":{"line":2178,"column":1}},"key":"V0akoAoE8Y"}],"identifier":"range-arrays","label":"Range Arrays","html_id":"range-arrays-1","implicit":true,"key":"nAlsnApH7s"},{"type":"paragraph","position":{"start":{"line":2180,"column":1},"end":{"line":2180,"column":1}},"children":[{"type":"text","value":"For sequences of numbers, NumPy provides optimized functions:","position":{"start":{"line":2180,"column":1},"end":{"line":2180,"column":1}},"key":"HmezsboQvW"}],"key":"uWHLlqbRSo"},{"type":"code","lang":"python","value":"In [40]: # Like Python's range, but returns an array\nIn [41]: integers = np.arange(10)  # 0 to 9\nIn [42]: print(f\"Integers: {integers}\")\nIntegers: [0 1 2 3 4 5 6 7 8 9]\n\nIn [43]: # With start, stop, step\nIn [44]: evens = np.arange(0, 10, 2)\nIn [45]: print(f\"Evens: {evens}\")\nEvens: [0 2 4 6 8]\n\nIn [46]: # Floating-point ranges\nIn [47]: floats = np.arange(0, 1, 0.1)\nIn [48]: print(f\"Floats: {floats}\")\nFloats: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]\n\nIn [49]: # Linear spacing (specify number of points, not step)\nIn [50]: linear = np.linspace(0, 1, 11)  # 11 points from 0 to 1\nIn [51]: print(f\"Linear: {linear}\")\nLinear: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]\n\nIn [52]: # Logarithmic spacing (for log-scale plots)\nIn [53]: logarithmic = np.logspace(0, 3, 4)  # 10^0 to 10^3\nIn [54]: print(f\"Logarithmic: {logarithmic}\")\nLogarithmic: [   1.   10.  100. 1000.]","position":{"start":{"line":2182,"column":1},"end":{"line":2207,"column":1}},"key":"vVcSYdHfiR"},{"type":"heading","depth":3,"position":{"start":{"line":2209,"column":1},"end":{"line":2209,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":2209,"column":1},"end":{"line":2209,"column":1}},"key":"b1uDKa3yn0"},{"type":"strong","position":{"start":{"line":2209,"column":1},"end":{"line":2209,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":2209,"column":1},"end":{"line":2209,"column":1}},"key":"D79GvDHyPr"}],"key":"GmxnqoLpW6"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-2","implicit":true,"key":"h7oro5ZlV8"},{"type":"paragraph","position":{"start":{"line":2211,"column":1},"end":{"line":2211,"column":1}},"children":[{"type":"text","value":"What’s the difference between ","position":{"start":{"line":2211,"column":1},"end":{"line":2211,"column":1}},"key":"vIzu2iPjB5"},{"type":"inlineCode","value":"np.arange(0, 1, 0.1)","position":{"start":{"line":2211,"column":1},"end":{"line":2211,"column":1}},"key":"t6MKFoZsYi"},{"type":"text","value":" and ","position":{"start":{"line":2211,"column":1},"end":{"line":2211,"column":1}},"key":"rWkfNEKJ3I"},{"type":"inlineCode","value":"np.linspace(0, 1, 11)","position":{"start":{"line":2211,"column":1},"end":{"line":2211,"column":1}},"key":"MSGzbt6J4p"},{"type":"text","value":"?","position":{"start":{"line":2211,"column":1},"end":{"line":2211,"column":1}},"key":"laOqe52McF"}],"key":"cwKjoKb5cN"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"GDJfP3mNab"}],"key":"eYi25FzCj3"},{"type":"paragraph","children":[{"type":"text","value":"Both create arrays from 0 to 1, but they work differently:","key":"q564walPsg"}],"key":"aG9n03Cfd0"},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"np.arange(0, 1, 0.1)","key":"srElMLTx43"},{"type":"text","value":" uses a step size of 0.1. Due to floating-point arithmetic, it might not include exactly 1.0 and might have slight inaccuracies.","key":"VYxyqlRcQe"}],"key":"I2b0QQEXAw"}],"key":"lI2tzkqqhj"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"np.linspace(0, 1, 11)","key":"slUwe34bkN"},{"type":"text","value":" creates exactly 11 evenly spaced points including both endpoints. It’s more precise for floating-point ranges.","key":"nJKJEL3mB5"}],"key":"zWVY2MBfln"}],"key":"qU5D1VqKxL"}],"key":"akPhAIhzAM"},{"type":"code","lang":"python","meta":null,"value":"# Demonstration of the difference\narange_arr = np.arange(0, 1, 0.1)\nlinspace_arr = np.linspace(0, 1, 11)\n\nprint(f\"arange length: {len(arange_arr)}\")      # 10 (doesn't include 1.0)\nprint(f\"linspace length: {len(linspace_arr)}\")  # 11 (includes both endpoints)\nprint(f\"arange last: {arange_arr[-1]}\")         # 0.9\nprint(f\"linspace last: {linspace_arr[-1]}\")     # 1.0\n\n# Floating-point issues with arange\nprint(f\"0.1 + 0.1 + 0.1 == 0.3? {0.1 + 0.1 + 0.1 == 0.3}\")  # False!","key":"Rcw5F56FBA"},{"type":"paragraph","children":[{"type":"text","value":"Use ","key":"vlDLVysSiD"},{"type":"inlineCode","value":"linspace","key":"w6s5AZK9Lr"},{"type":"text","value":" when you need a specific number of points including endpoints. Use ","key":"XpkK3UgKbS"},{"type":"inlineCode","value":"arange","key":"xjUVuL756n"},{"type":"text","value":" for integer sequences or when you need a specific step size.","key":"ALNCkMZ2uF"}],"key":"Gz7WhgJZq5"}],"key":"ijPgTEug2C"},{"type":"heading","depth":3,"position":{"start":{"line":2239,"column":1},"end":{"line":2239,"column":1}},"children":[{"type":"text","value":"Random Arrays","position":{"start":{"line":2239,"column":1},"end":{"line":2239,"column":1}},"key":"B5Or2Olb58"}],"identifier":"random-arrays","label":"Random Arrays","html_id":"random-arrays-1","implicit":true,"key":"YuX4dPMOwf"},{"type":"paragraph","position":{"start":{"line":2241,"column":1},"end":{"line":2241,"column":1}},"children":[{"type":"text","value":"Scientific computing often needs random data for Monte Carlo simulations, testing, or initialization:","position":{"start":{"line":2241,"column":1},"end":{"line":2241,"column":1}},"key":"YdJr8jlf7R"}],"key":"iap8ap22hs"},{"type":"code","lang":"python","value":"In [55]: # Set seed for reproducibility (important for science!)\nIn [56]: np.random.seed(42)\n\nIn [57]: # Uniform distribution [0, 1)\nIn [58]: uniform = np.random.rand(3, 3)\nIn [59]: print(f\"Uniform:\\n{uniform}\")\nUniform:\n[[0.374 0.950 0.731]\n [0.598 0.156 0.155]\n [0.058 0.866 0.601]]\n\nIn [60]: # Standard normal distribution (mean=0, std=1)\nIn [61]: normal = np.random.randn(3, 3)\nIn [62]: print(f\"Normal:\\n{normal}\")\nNormal:\n[[ 0.708 -0.757 -1.316]\n [ 0.386  1.749  0.297]\n [-0.814 -0.454 -1.150]]\n\nIn [63]: # Random integers\nIn [64]: integers = np.random.randint(0, 10, size=(2, 4))\nIn [65]: print(f\"Random integers:\\n{integers}\")\nRandom integers:\n[[7 6 6 8]\n [8 3 9 8]]\n\nIn [66]: # Custom distribution (e.g., Poisson for photon counts)\nIn [67]: photon_counts = np.random.poisson(lam=5, size=10)\nIn [68]: print(f\"Photon counts: {photon_counts}\")\nPhoton counts: [3 5 6 3 8 4 3 3 6 2]","position":{"start":{"line":2243,"column":1},"end":{"line":2274,"column":1}},"key":"yrmyw75nzs"},{"type":"heading","depth":2,"position":{"start":{"line":2276,"column":1},"end":{"line":2276,"column":1}},"children":[{"type":"text","value":"7.3 Array Attributes and Memory Layout","position":{"start":{"line":2276,"column":1},"end":{"line":2276,"column":1}},"key":"Wj7vP4NDt9"}],"identifier":"id-7-3-array-attributes-and-memory-layout","label":"7.3 Array Attributes and Memory Layout","html_id":"id-7-3-array-attributes-and-memory-layout-1","implicit":true,"key":"HBJC7en0eO"},{"type":"paragraph","position":{"start":{"line":2278,"column":1},"end":{"line":2278,"column":1}},"children":[{"type":"text","value":"Understanding array attributes and memory layout is crucial for writing efficient code and debugging strange behavior.","position":{"start":{"line":2278,"column":1},"end":{"line":2278,"column":1}},"key":"nMgUbFEKTq"}],"key":"i2yKjHkEwT"},{"type":"heading","depth":3,"position":{"start":{"line":2280,"column":1},"end":{"line":2280,"column":1}},"children":[{"type":"text","value":"Essential Attributes","position":{"start":{"line":2280,"column":1},"end":{"line":2280,"column":1}},"key":"WIItKgzKXM"}],"identifier":"essential-attributes","label":"Essential Attributes","html_id":"essential-attributes-1","implicit":true,"key":"F6A5MfTQ5o"},{"type":"paragraph","position":{"start":{"line":2282,"column":1},"end":{"line":2282,"column":1}},"children":[{"type":"text","value":"Every NumPy array has attributes that describe its structure:","position":{"start":{"line":2282,"column":1},"end":{"line":2282,"column":1}},"key":"Rpo5eDUpIq"}],"key":"TFUXS1DjIm"},{"type":"code","lang":"python","value":"In [69]: # Create a 3D array for demonstration\nIn [70]: arr = np.random.randn(2, 3, 4)  # 2 blocks, 3 rows, 4 columns\n\nIn [71]: print(f\"Shape: {arr.shape}\")        # Dimensions\nIn [72]: print(f\"Size: {arr.size}\")          # Total elements\nIn [73]: print(f\"Ndim: {arr.ndim}\")          # Number of dimensions\nIn [74]: print(f\"Dtype: {arr.dtype}\")        # Data type\nIn [75]: print(f\"Itemsize: {arr.itemsize}\")  # Bytes per element\nIn [76]: print(f\"Nbytes: {arr.nbytes}\")      # Total bytes\nShape: (2, 3, 4)\nSize: 24\nNdim: 3\nDtype: float64\nItemsize: 8\nNbytes: 192\n\nIn [77]: # Memory layout information\nIn [78]: print(f\"Strides: {arr.strides}\")  # Bytes to next element\nIn [79]: print(f\"C-contiguous: {arr.flags['C_CONTIGUOUS']}\")\nIn [80]: print(f\"Fortran-contiguous: {arr.flags['F_CONTIGUOUS']}\")\nStrides: (96, 32, 8)\nC-contiguous: True\nFortran-contiguous: False","position":{"start":{"line":2284,"column":1},"end":{"line":2308,"column":1}},"key":"BjIU6hgUW6"},{"type":"heading","depth":3,"position":{"start":{"line":2310,"column":1},"end":{"line":2310,"column":1}},"children":[{"type":"text","value":"Memory Layout: Row-Major vs Column-Major","position":{"start":{"line":2310,"column":1},"end":{"line":2310,"column":1}},"key":"y2w4LLoycH"}],"identifier":"memory-layout-row-major-vs-column-major","label":"Memory Layout: Row-Major vs Column-Major","html_id":"memory-layout-row-major-vs-column-major-1","implicit":true,"key":"zeO9FeINMJ"},{"type":"paragraph","position":{"start":{"line":2312,"column":1},"end":{"line":2312,"column":1}},"children":[{"type":"text","value":"NumPy can store arrays in different memory layouts, which affects performance:","position":{"start":{"line":2312,"column":1},"end":{"line":2312,"column":1}},"key":"YGsbzNxEb9"}],"key":"Jp0LCzplBZ"},{"type":"mermaid","value":"flowchart LR\n    subgraph \"Row-Major (C-style)\"\n        RM[2D Array<br/>[[1,2,3],<br/>[4,5,6]]] --> RMM[Memory: 1|2|3|4|5|6]\n        RMM --> RMD[Row 0 then Row 1]\n    end\n    \n    subgraph \"Column-Major (Fortran-style)\"\n        CM[2D Array<br/>[[1,2,3],<br/>[4,5,6]]] --> CMM[Memory: 1|4|2|5|3|6]\n        CMM --> CMD[Column 0 then Column 1 then Column 2]\n    end\n    \n    style RM fill:#9f9\n    style CM fill:#f9f","key":"I3QDEzlMs4"},{"type":"code","lang":"python","value":"In [81]: # Default is C-order (row-major)\nIn [82]: c_array = np.array([[1, 2, 3],\n   ...:                       [4, 5, 6]])\nIn [83]: print(f\"C-order strides: {c_array.strides}\")  # (24, 8)\nC-order strides: (24, 8)  # 3 elements * 8 bytes to next row\n\nIn [84]: # Can create Fortran-order (column-major)\nIn [85]: f_array = np.array([[1, 2, 3],\n   ...:                       [4, 5, 6]], order='F')\nIn [86]: print(f\"F-order strides: {f_array.strides}\")  # (8, 16)\nF-order strides: (8, 16)  # 1 element * 8 bytes to next row\n\nIn [87]: # Performance implications\nIn [88]: large = np.random.randn(1000, 1000)\n\nIn [89]: # Summing along rows (axis=1) is fast for C-order\nIn [90]: %timeit large.sum(axis=1)\n574 µs ± 12.3 µs per loop\n\nIn [91]: # Summing along columns (axis=0) is slower for C-order\nIn [92]: %timeit large.sum(axis=0)\n1.28 ms ± 23.4 µs per loop\n\n# Why? Cache locality! Accessing contiguous memory is faster.","position":{"start":{"line":2330,"column":1},"end":{"line":2355,"column":1}},"key":"d7HMHyL6C3"},{"type":"heading","depth":3,"position":{"start":{"line":2357,"column":1},"end":{"line":2357,"column":1}},"children":[{"type":"text","value":"Data Types and Memory Usage","position":{"start":{"line":2357,"column":1},"end":{"line":2357,"column":1}},"key":"gGx3TK9fxC"}],"identifier":"data-types-and-memory-usage","label":"Data Types and Memory Usage","html_id":"data-types-and-memory-usage-1","implicit":true,"key":"LeDrBMnnjl"},{"type":"paragraph","position":{"start":{"line":2359,"column":1},"end":{"line":2359,"column":1}},"children":[{"type":"text","value":"NumPy provides precise control over data types, crucial for memory efficiency and numerical precision:","position":{"start":{"line":2359,"column":1},"end":{"line":2359,"column":1}},"key":"tKaaMx4OgD"}],"key":"iFdWoovzQJ"},{"type":"code","lang":"python","value":"In [93]: # Integer types\nIn [94]: int8 = np.array([1, 2, 3], dtype=np.int8)    # -128 to 127\nIn [95]: int16 = np.array([1, 2, 3], dtype=np.int16)  # -32,768 to 32,767\nIn [96]: int32 = np.array([1, 2, 3], dtype=np.int32)  # ~±2 billion\nIn [97]: int64 = np.array([1, 2, 3], dtype=np.int64)  # ~±9 quintillion\n\nIn [98]: print(f\"int8 bytes: {int8.nbytes}\")   # 3 bytes\nIn [99]: print(f\"int64 bytes: {int64.nbytes}\") # 24 bytes\nint8 bytes: 3\nint64 bytes: 24\n\nIn [100]: # Floating-point types\nIn [101]: float16 = np.array([1.0, 2.0], dtype=np.float16)  # Half precision\nIn [102]: float32 = np.array([1.0, 2.0], dtype=np.float32)  # Single precision\nIn [103]: float64 = np.array([1.0, 2.0], dtype=np.float64)  # Double precision\n\nIn [104]: # Complex numbers for signal processing\nIn [105]: complex_arr = np.array([1+2j, 3+4j], dtype=np.complex128)\nIn [106]: print(f\"Complex array: {complex_arr}\")\nIn [107]: print(f\"Real parts: {complex_arr.real}\")\nIn [108]: print(f\"Imaginary parts: {complex_arr.imag}\")\nComplex array: [1.+2.j 3.+4.j]\nReal parts: [1. 3.]\nImaginary parts: [2. 4.]","position":{"start":{"line":2361,"column":1},"end":{"line":2386,"column":1}},"key":"TxZQRS9fEF"},{"type":"heading","depth":3,"position":{"start":{"line":2388,"column":1},"end":{"line":2388,"column":1}},"children":[{"type":"text","value":"🔊 ","position":{"start":{"line":2388,"column":1},"end":{"line":2388,"column":1}},"key":"W78ACIhpof"},{"type":"strong","position":{"start":{"line":2388,"column":1},"end":{"line":2388,"column":1}},"children":[{"type":"text","value":"Performance Profile: Data Type Impact","position":{"start":{"line":2388,"column":1},"end":{"line":2388,"column":1}},"key":"pZVjHrEnKV"}],"key":"F4y1U1C0Xk"}],"identifier":"id-performance-profile-data-type-impact","label":"🔊 Performance Profile: Data Type Impact","html_id":"id-performance-profile-data-type-impact-1","implicit":true,"key":"cXclxGVcYi"},{"type":"code","lang":"python","value":"# Memory and speed tradeoffs with different dtypes\nn = 10_000_000  # 10 million elements\n\n# Create arrays with different dtypes\nfloat64_arr = np.random.randn(n)  # Default\nfloat32_arr = float64_arr.astype(np.float32)\nfloat16_arr = float64_arr.astype(np.float16)\n\nprint(f\"float64: {float64_arr.nbytes / 1e6:.1f} MB\")\nprint(f\"float32: {float32_arr.nbytes / 1e6:.1f} MB\")\nprint(f\"float16: {float16_arr.nbytes / 1e6:.1f} MB\")\n\n# Performance comparison\n%timeit float64_arr.sum()  # 7.92 ms\n%timeit float32_arr.sum()  # 3.96 ms (2x faster!)\n%timeit float16_arr.sum()  # 15.8 ms (slower - no hardware support)\n\n# But beware precision loss!\nprint(f\"float64 sum: {float64_arr.sum()}\")\nprint(f\"float32 sum: {float32_arr.sum()}\")  # Slightly different\nprint(f\"float16 sum: {float16_arr.sum()}\")  # Very different!","position":{"start":{"line":2390,"column":1},"end":{"line":2412,"column":1}},"key":"vI99pPfaFV"},{"type":"paragraph","position":{"start":{"line":2414,"column":1},"end":{"line":2414,"column":1}},"children":[{"type":"text","value":"Choose dtypes based on your needs: float64 for precision, float32 for speed/memory with acceptable precision loss, integers when appropriate.","position":{"start":{"line":2414,"column":1},"end":{"line":2414,"column":1}},"key":"tQw8d3cJP6"}],"key":"k28zc4LxB9"},{"type":"heading","depth":2,"position":{"start":{"line":2416,"column":1},"end":{"line":2416,"column":1}},"children":[{"type":"text","value":"7.4 Indexing and Slicing: Views vs Copies","position":{"start":{"line":2416,"column":1},"end":{"line":2416,"column":1}},"key":"nyHKz7Amoh"}],"identifier":"id-7-4-indexing-and-slicing-views-vs-copies","label":"7.4 Indexing and Slicing: Views vs Copies","html_id":"id-7-4-indexing-and-slicing-views-vs-copies-1","implicit":true,"key":"De41BUA3j1"},{"type":"paragraph","position":{"start":{"line":2418,"column":1},"end":{"line":2418,"column":1}},"children":[{"type":"text","value":"NumPy’s indexing is powerful but has subtleties that can cause bugs if not understood properly.","position":{"start":{"line":2418,"column":1},"end":{"line":2418,"column":1}},"key":"gphId9eEmx"}],"key":"HpubxiWprY"},{"type":"heading","depth":3,"position":{"start":{"line":2420,"column":1},"end":{"line":2420,"column":1}},"children":[{"type":"text","value":"Basic Indexing (Creates Views)","position":{"start":{"line":2420,"column":1},"end":{"line":2420,"column":1}},"key":"erveTcA8qm"}],"identifier":"basic-indexing-creates-views","label":"Basic Indexing (Creates Views)","html_id":"basic-indexing-creates-views-1","implicit":true,"key":"oHNgQV7od0"},{"type":"paragraph","position":{"start":{"line":2422,"column":1},"end":{"line":2422,"column":1}},"children":[{"type":"text","value":"Basic slicing creates ","position":{"start":{"line":2422,"column":1},"end":{"line":2422,"column":1}},"key":"W4sBrYKBXx"},{"type":"strong","position":{"start":{"line":2422,"column":1},"end":{"line":2422,"column":1}},"children":[{"type":"text","value":"views","position":{"start":{"line":2422,"column":1},"end":{"line":2422,"column":1}},"key":"noOnvlO1G0"}],"key":"ivZ8zuiX9Z"},{"type":"text","value":" that share memory with the original array:","position":{"start":{"line":2422,"column":1},"end":{"line":2422,"column":1}},"key":"DJcRE2hZzE"}],"key":"p6t7HT367U"},{"type":"code","lang":"python","value":"In [109]: # 1D indexing - similar to lists\nIn [110]: arr = np.arange(10)\nIn [111]: print(f\"Original: {arr}\")\nIn [112]: print(f\"Element 3: {arr[3]}\")\nIn [113]: print(f\"Slice 2:5: {arr[2:5]}\")\nIn [114]: print(f\"Every 2nd: {arr[::2]}\")\nIn [115]: print(f\"Reverse: {arr[::-1]}\")\nOriginal: [0 1 2 3 4 5 6 7 8 9]\nElement 3: 3\nSlice 2:5: [2 3 4]\nEvery 2nd: [0 2 4 6 8]\nReverse: [9 8 7 6 5 4 3 2 1 0]\n\nIn [116]: # CRITICAL: Slices are views, not copies!\nIn [117]: slice_view = arr[2:5]\nIn [118]: slice_view[0] = 999\nIn [119]: print(f\"Original after modification: {arr}\")\nOriginal after modification: [  0   1 999   3   4   5   6   7   8   9]","position":{"start":{"line":2424,"column":1},"end":{"line":2443,"column":1}},"key":"uokeakor0J"},{"type":"heading","depth":3,"position":{"start":{"line":2445,"column":1},"end":{"line":2445,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":2445,"column":1},"end":{"line":2445,"column":1}},"key":"vIyry5Fg8y"},{"type":"strong","position":{"start":{"line":2445,"column":1},"end":{"line":2445,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Unexpected Mutation","position":{"start":{"line":2445,"column":1},"end":{"line":2445,"column":1}},"key":"Lc3Y5BJ1pg"}],"key":"duzJGat9KL"}],"identifier":"id-common-bug-alert-unexpected-mutation","label":"⚠️ Common Bug Alert: Unexpected Mutation","html_id":"id-common-bug-alert-unexpected-mutation-1","implicit":true,"key":"XZKfzS2YVQ"},{"type":"code","lang":"python","value":"# DANGEROUS: Modifying a view changes the original!\ndef process_middle(data):\n    \"\"\"Process middle section of data.\"\"\"\n    middle = data[len(data)//4:3*len(data)//4]  # View!\n    middle *= 2  # This modifies the original!\n    return middle\n\noriginal = np.arange(10)\nprint(f\"Before: {original}\")\nresult = process_middle(original)\nprint(f\"After: {original}\")  # Original is changed!\n# Before: [0 1 2 3 4 5 6 7 8 9]\n# After: [0 1 4 6 8 5 6 7 8 9]\n\n# SAFE: Explicitly copy when needed\ndef process_middle_safe(data):\n    \"\"\"Process middle section without modifying original.\"\"\"\n    middle = data[len(data)//4:3*len(data)//4].copy()  # Copy!\n    middle *= 2\n    return middle","position":{"start":{"line":2447,"column":1},"end":{"line":2468,"column":1}},"key":"NBIxv8dW4p"},{"type":"heading","depth":3,"position":{"start":{"line":2470,"column":1},"end":{"line":2470,"column":1}},"children":[{"type":"text","value":"Multidimensional Indexing","position":{"start":{"line":2470,"column":1},"end":{"line":2470,"column":1}},"key":"TAVf5AYsMf"}],"identifier":"multidimensional-indexing","label":"Multidimensional Indexing","html_id":"multidimensional-indexing-1","implicit":true,"key":"vIJ8a7X0qa"},{"type":"paragraph","position":{"start":{"line":2472,"column":1},"end":{"line":2472,"column":1}},"children":[{"type":"text","value":"For 2D arrays and higher, indexing becomes more powerful:","position":{"start":{"line":2472,"column":1},"end":{"line":2472,"column":1}},"key":"UbJ1dpiam3"}],"key":"zTP7bAPXsY"},{"type":"code","lang":"python","value":"In [120]: # Create a 2D array\nIn [121]: matrix = np.array([[1, 2, 3],\n    ...:                      [4, 5, 6],\n    ...:                      [7, 8, 9]])\n\nIn [122]: # Single element\nIn [123]: print(f\"Element [1,2]: {matrix[1, 2]}\")  # Row 1, Column 2\nElement [1,2]: 6\n\nIn [124]: # Entire row or column\nIn [125]: print(f\"Row 1: {matrix[1, :]}\")     # or just matrix[1]\nIn [126]: print(f\"Column 2: {matrix[:, 2]}\")\nRow 1: [4 5 6]\nColumn 2: [3 6 9]\n\nIn [127]: # Submatrix\nIn [128]: print(f\"Top-left 2x2:\\n{matrix[:2, :2]}\")\nTop-left 2x2:\n[[1 2]\n [4 5]]\n\nIn [129]: # Strided access\nIn [130]: print(f\"Every other element:\\n{matrix[::2, ::2]}\")\nEvery other element:\n[[1 3]\n [7 9]]","position":{"start":{"line":2474,"column":1},"end":{"line":2501,"column":1}},"key":"yShBblzOI5"},{"type":"heading","depth":3,"position":{"start":{"line":2503,"column":1},"end":{"line":2503,"column":1}},"children":[{"type":"text","value":"Fancy Indexing (Creates Copies)","position":{"start":{"line":2503,"column":1},"end":{"line":2503,"column":1}},"key":"OQKVGLEvi9"}],"identifier":"fancy-indexing-creates-copies","label":"Fancy Indexing (Creates Copies)","html_id":"fancy-indexing-creates-copies-1","implicit":true,"key":"icrZzO4uZP"},{"type":"paragraph","position":{"start":{"line":2505,"column":1},"end":{"line":2505,"column":1}},"children":[{"type":"text","value":"Using arrays as indices creates ","position":{"start":{"line":2505,"column":1},"end":{"line":2505,"column":1}},"key":"FNoiLCcKJg"},{"type":"strong","position":{"start":{"line":2505,"column":1},"end":{"line":2505,"column":1}},"children":[{"type":"text","value":"copies","position":{"start":{"line":2505,"column":1},"end":{"line":2505,"column":1}},"key":"E3boTfBanQ"}],"key":"Zj0NiM2tPD"},{"type":"text","value":", not views:","position":{"start":{"line":2505,"column":1},"end":{"line":2505,"column":1}},"key":"FWH6irVqkl"}],"key":"imOht2QiLX"},{"type":"code","lang":"python","value":"In [131]: arr = np.arange(10) * 10\n\nIn [132]: # Integer array indexing\nIn [133]: indices = np.array([1, 3, 5])\nIn [134]: selected = arr[indices]  # This is a COPY\nIn [135]: print(f\"Selected: {selected}\")\nSelected: [10 30 50]\n\nIn [136]: selected[0] = 999\nIn [137]: print(f\"Original unchanged: {arr}\")  # Original intact\nOriginal unchanged: [ 0 10 20 30 40 50 60 70 80 90]\n\nIn [138]: # Boolean indexing (masking)\nIn [139]: mask = arr > 40\nIn [140]: print(f\"Mask: {mask}\")\nIn [141]: filtered = arr[mask]  # Also a COPY\nIn [142]: print(f\"Filtered: {filtered}\")\nMask: [False False False False False  True  True  True  True  True]\nFiltered: [50 60 70 80 90]\n\nIn [143]: # Combining conditions\nIn [144]: complex_mask = (arr > 20) & (arr < 70)  # Note: & not 'and'\nIn [145]: print(f\"Complex filter: {arr[complex_mask]}\")\nComplex filter: [30 40 50 60]","position":{"start":{"line":2507,"column":1},"end":{"line":2532,"column":1}},"key":"zAy8gNQjF4"},{"type":"heading","depth":3,"position":{"start":{"line":2534,"column":1},"end":{"line":2534,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":2534,"column":1},"end":{"line":2534,"column":1}},"key":"x52R7H7qrG"},{"type":"strong","position":{"start":{"line":2534,"column":1},"end":{"line":2534,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: Views vs Copies","position":{"start":{"line":2534,"column":1},"end":{"line":2534,"column":1}},"key":"iS4LLFUYPv"}],"key":"qrFldYBvti"}],"identifier":"id-computational-thinking-box-views-vs-copies","label":"📦 Computational Thinking Box: Views vs Copies","html_id":"id-computational-thinking-box-views-vs-copies-1","implicit":true,"key":"Z7drcOcCM1"},{"type":"code","lang":"","value":"PATTERN: Memory Efficiency Through Views\n\nViews are NumPy's way of providing different perspectives \non the same data without copying it. This is crucial for:\n\n1. Memory efficiency: No duplication of large datasets\n2. Performance: No time spent copying\n3. Consistency: Changes visible everywhere\n\nWhen NumPy creates views:\n- Basic slicing (arr[1:5], arr[:, 2])\n- Reshaping (arr.reshape())\n- Transposing (arr.T)\n\nWhen NumPy creates copies:\n- Fancy indexing (arr[[1,3,5]])\n- Boolean indexing (arr[arr > 0])\n- Explicit copy (arr.copy())\n\nTesting if something is a view:\narr.base is not None  # True if arr is a view\n\nThis pattern appears in:\n- Pandas DataFrames (views of underlying NumPy arrays)\n- Memory-mapped files (views of disk data)\n- GPU computing (avoiding expensive memory transfers)","position":{"start":{"line":2536,"column":1},"end":{"line":2563,"column":1}},"key":"IOq7wDIDEq"},{"type":"heading","depth":2,"position":{"start":{"line":2565,"column":1},"end":{"line":2565,"column":1}},"children":[{"type":"text","value":"7.5 Vectorization: Thinking in Arrays","position":{"start":{"line":2565,"column":1},"end":{"line":2565,"column":1}},"key":"wNkKV0Y7JF"}],"identifier":"id-7-5-vectorization-thinking-in-arrays","label":"7.5 Vectorization: Thinking in Arrays","html_id":"id-7-5-vectorization-thinking-in-arrays-1","implicit":true,"key":"KadHHIEFWH"},{"type":"paragraph","position":{"start":{"line":2567,"column":1},"end":{"line":2567,"column":1}},"children":[{"type":"text","value":"Vectorization is the key to NumPy’s performance. It means expressing operations on entire arrays rather than individual elements.","position":{"start":{"line":2567,"column":1},"end":{"line":2567,"column":1}},"key":"SLoOgup3Pz"}],"key":"ILre2JFLZN"},{"type":"heading","depth":3,"position":{"start":{"line":2569,"column":1},"end":{"line":2569,"column":1}},"children":[{"type":"text","value":"Universal Functions (ufuncs)","position":{"start":{"line":2569,"column":1},"end":{"line":2569,"column":1}},"key":"XSGnfwIUhE"}],"identifier":"universal-functions-ufuncs","label":"Universal Functions (ufuncs)","html_id":"universal-functions-ufuncs-1","implicit":true,"key":"P95Fl3Cjeh"},{"type":"paragraph","position":{"start":{"line":2571,"column":1},"end":{"line":2571,"column":1}},"children":[{"type":"text","value":"NumPy provides “universal functions” that operate element-wise on arrays:","position":{"start":{"line":2571,"column":1},"end":{"line":2571,"column":1}},"key":"niI76QVDgK"}],"key":"ELhDwPyixQ"},{"type":"code","lang":"python","value":"In [146]: # Arithmetic operations are vectorized\nIn [147]: a = np.array([1, 2, 3, 4])\nIn [148]: b = np.array([10, 20, 30, 40])\n\nIn [149]: print(f\"Addition: {a + b}\")\nIn [150]: print(f\"Multiplication: {a * b}\")\nIn [151]: print(f\"Power: {a ** 2}\")\nAddition: [11 22 33 44]\nMultiplication: [10 40 90 160]\nPower: [ 1  4  9 16]\n\nIn [152]: # Mathematical functions are vectorized\nIn [153]: angles = np.array([0, np.pi/4, np.pi/2, np.pi])\nIn [154]: print(f\"Sin: {np.sin(angles)}\")\nIn [155]: print(f\"Cos: {np.cos(angles)}\")\nSin: [0.000e+00 7.071e-01 1.000e+00 1.225e-16]\nCos: [ 1.000e+00  7.071e-01  6.123e-17 -1.000e+00]\n\nIn [156]: # Comparison operations are vectorized\nIn [157]: arr = np.arange(5)\nIn [158]: print(f\"Greater than 2: {arr > 2}\")\nIn [159]: print(f\"Equal to 3: {arr == 3}\")\nGreater than 2: [False False False  True  True]\nEqual to 3: [False False False  True False]","position":{"start":{"line":2573,"column":1},"end":{"line":2598,"column":1}},"key":"eJEGLmZvgu"},{"type":"heading","depth":3,"position":{"start":{"line":2600,"column":1},"end":{"line":2600,"column":1}},"children":[{"type":"text","value":"Vectorizing Custom Functions","position":{"start":{"line":2600,"column":1},"end":{"line":2600,"column":1}},"key":"XPHCT3kpdm"}],"identifier":"vectorizing-custom-functions","label":"Vectorizing Custom Functions","html_id":"vectorizing-custom-functions-1","implicit":true,"key":"x1sKMxv7qc"},{"type":"paragraph","position":{"start":{"line":2602,"column":1},"end":{"line":2602,"column":1}},"children":[{"type":"text","value":"You can vectorize your own functions to work on arrays:","position":{"start":{"line":2602,"column":1},"end":{"line":2602,"column":1}},"key":"D6NZKkhPih"}],"key":"q7wzG7qyg0"},{"type":"code","lang":"python","value":"In [160]: # Scalar function\nIn [161]: def photon_energy(wavelength_nm):\n    ...:     \"\"\"Calculate photon energy in eV from wavelength in nm.\"\"\"\n    ...:     h = 4.135667e-15  # Planck constant in eV·s\n    ...:     c = 299792458     # Speed of light in m/s\n    ...:     return h * c / (wavelength_nm * 1e-9)\n\nIn [162]: # Works on single values\nIn [163]: print(f\"Energy at 500nm: {photon_energy(500):.2f} eV\")\nEnergy at 500nm: 2.48 eV\n\nIn [164]: # Vectorize to work on arrays\nIn [165]: photon_energy_vec = np.vectorize(photon_energy)\n\nIn [166]: # Now works on arrays!\nIn [167]: wavelengths = np.array([400, 500, 600, 700])\nIn [168]: energies = photon_energy_vec(wavelengths)\nIn [169]: print(f\"Energies: {energies}\")\nEnergies: [3.10 2.48 2.07 1.77]\n\n# Note: np.vectorize is convenient but not fast (it's still a Python loop)\n# For performance, write truly vectorized code:\nIn [170]: def photon_energy_fast(wavelength_nm):\n    ...:     \"\"\"Truly vectorized version.\"\"\"\n    ...:     h = 4.135667e-15\n    ...:     c = 299792458\n    ...:     return h * c / (wavelength_nm * 1e-9)  # Works on arrays!\n\nIn [171]: # This is much faster for large arrays\nIn [172]: large_wavelengths = np.random.uniform(300, 800, 100000)\nIn [173]: %timeit photon_energy_vec(large_wavelengths)  # 35.2 ms\nIn [174]: %timeit photon_energy_fast(large_wavelengths) # 326 µs (100x faster!)","position":{"start":{"line":2604,"column":1},"end":{"line":2637,"column":1}},"key":"FFNlDvby3Y"},{"type":"heading","depth":3,"position":{"start":{"line":2639,"column":1},"end":{"line":2639,"column":1}},"children":[{"type":"text","value":"Aggregation Functions","position":{"start":{"line":2639,"column":1},"end":{"line":2639,"column":1}},"key":"RMlIiNsfjc"}],"identifier":"aggregation-functions","label":"Aggregation Functions","html_id":"aggregation-functions-1","implicit":true,"key":"yhfRxEZWOx"},{"type":"paragraph","position":{"start":{"line":2641,"column":1},"end":{"line":2641,"column":1}},"children":[{"type":"text","value":"Aggregations reduce arrays to scalar values or smaller arrays:","position":{"start":{"line":2641,"column":1},"end":{"line":2641,"column":1}},"key":"RIObusBrvS"}],"key":"qlOVNpCsrz"},{"type":"code","lang":"python","value":"In [175]: data = np.random.randn(1000)\n\nIn [176]: # Basic statistics\nIn [177]: print(f\"Mean: {data.mean():.4f}\")\nIn [178]: print(f\"Std: {data.std():.4f}\")\nIn [179]: print(f\"Min: {data.min():.4f}\")\nIn [180]: print(f\"Max: {data.max():.4f}\")\nIn [181]: print(f\"Median: {np.median(data):.4f}\")\nMean: -0.0234\nStd: 0.9897\nMin: -3.2384\nMax: 3.0234\nMedian: -0.0365\n\nIn [182]: # Percentiles (useful for outlier detection)\nIn [183]: print(f\"5th percentile: {np.percentile(data, 5):.4f}\")\nIn [184]: print(f\"95th percentile: {np.percentile(data, 95):.4f}\")\n5th percentile: -1.6422\n95th percentile: 1.5967\n\nIn [185]: # Along specific axes for multidimensional arrays\nIn [186]: matrix = np.random.randn(3, 4)\nIn [187]: print(f\"Matrix:\\n{matrix}\")\nIn [188]: print(f\"Column means: {matrix.mean(axis=0)}\")  # Average each column\nIn [189]: print(f\"Row means: {matrix.mean(axis=1)}\")     # Average each row\nMatrix:\n[[-0.245  1.234 -0.567  0.891]\n [ 2.345 -1.234  0.123 -0.456]\n [ 0.789 -0.012  1.234 -2.345]]\nColumn means: [ 0.963 -0.004  0.263 -0.637]\nRow means: [ 0.328  0.195 -0.084]","position":{"start":{"line":2643,"column":1},"end":{"line":2675,"column":1}},"key":"REbUGavAca"},{"type":"heading","depth":3,"position":{"start":{"line":2677,"column":1},"end":{"line":2677,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":2677,"column":1},"end":{"line":2677,"column":1}},"key":"egl8IG8Z6O"},{"type":"strong","position":{"start":{"line":2677,"column":1},"end":{"line":2677,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":2677,"column":1},"end":{"line":2677,"column":1}},"key":"ThJGMpv06x"}],"key":"nnvRQ3qybn"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-3","implicit":true,"key":"sLhneuOqee"},{"type":"paragraph","position":{"start":{"line":2679,"column":1},"end":{"line":2679,"column":1}},"children":[{"type":"text","value":"Given a 2D array representing an image, how would you normalize it so all values are between 0 and 1?","position":{"start":{"line":2679,"column":1},"end":{"line":2679,"column":1}},"key":"BAnNKrkPti"}],"key":"e5AyB40oJa"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"ohs9MKBURu"}],"key":"DRm7FKfzoy"},{"type":"paragraph","children":[{"type":"text","value":"There are several approaches depending on what you mean by normalization:","key":"YjSgYT69zR"}],"key":"Bjuk1pj4QP"},{"type":"code","lang":"python","meta":null,"value":"# Create sample \"image\" data\nimage = np.random.randn(100, 100) * 50 + 128  # Centered at 128\n\n# Method 1: Min-Max normalization (scales to exact [0, 1])\ndef min_max_normalize(arr):\n    \"\"\"Scale array to [0, 1] range.\"\"\"\n    return (arr - arr.min()) / (arr.max() - arr.min())\n\nnormalized1 = min_max_normalize(image)\nprint(f\"Range: [{normalized1.min()}, {normalized1.max()}]\")  # [0.0, 1.0]\n\n# Method 2: Clipping to known range (e.g., 0-255 for 8-bit images)\ndef clip_normalize(arr, min_val=0, max_val=255):\n    \"\"\"Clip to range then normalize.\"\"\"\n    clipped = np.clip(arr, min_val, max_val)\n    return (clipped - min_val) / (max_val - min_val)\n\nnormalized2 = clip_normalize(image)\n\n# Method 3: Z-score normalization (mean=0, std=1, not [0,1])\ndef z_score_normalize(arr):\n    \"\"\"Standardize to mean=0, std=1.\"\"\"\n    return (arr - arr.mean()) / arr.std()\n\nstandardized = z_score_normalize(image)\nprint(f\"Mean: {standardized.mean():.6f}, Std: {standardized.std():.6f}\")\n\n# Important: Choose based on your needs!\n# - Min-max for display (guarantees [0,1])\n# - Clipping for known ranges\n# - Z-score for machine learning","key":"pDzXQEkGoU"},{"type":"paragraph","children":[{"type":"text","value":"The key insight: vectorized operations make this efficient even for large images. No loops needed!","key":"PsLEKPuppI"}],"key":"rQrwzfajp4"}],"key":"afm69djHOB"},{"type":"heading","depth":2,"position":{"start":{"line":2724,"column":1},"end":{"line":2724,"column":1}},"children":[{"type":"text","value":"7.6 Broadcasting: NumPy’s Superpower","position":{"start":{"line":2724,"column":1},"end":{"line":2724,"column":1}},"key":"ApkP6MwYww"}],"identifier":"id-7-6-broadcasting-numpys-superpower","label":"7.6 Broadcasting: NumPy’s Superpower","html_id":"id-7-6-broadcasting-numpys-superpower-1","implicit":true,"key":"ghVZjDtMFO"},{"type":"paragraph","position":{"start":{"line":2726,"column":1},"end":{"line":2726,"column":1}},"children":[{"type":"text","value":"Broadcasting allows NumPy to perform operations on arrays of different shapes without explicit loops or copies. It’s one of NumPy’s most powerful features.","position":{"start":{"line":2726,"column":1},"end":{"line":2726,"column":1}},"key":"V7CDhtZOs2"}],"key":"SxCDFrhYC4"},{"type":"heading","depth":3,"position":{"start":{"line":2728,"column":1},"end":{"line":2728,"column":1}},"children":[{"type":"text","value":"The Broadcasting Rules","position":{"start":{"line":2728,"column":1},"end":{"line":2728,"column":1}},"key":"SqillNBwIG"}],"identifier":"the-broadcasting-rules","label":"The Broadcasting Rules","html_id":"the-broadcasting-rules-1","implicit":true,"key":"M6VzglLelH"},{"type":"paragraph","position":{"start":{"line":2730,"column":1},"end":{"line":2730,"column":1}},"children":[{"type":"text","value":"Broadcasting follows simple rules to determine how arrays of different shapes can be combined:","position":{"start":{"line":2730,"column":1},"end":{"line":2730,"column":1}},"key":"SELSP8JnAI"}],"key":"ib94QoH8q1"},{"type":"mermaid","value":"flowchart TD\n    A[Arrays A and B] --> B{Compare shapes<br/>right to left}\n    B --> C{Dimensions<br/>equal?}\n    C -->|Yes| D[Compatible]\n    C -->|No| E{One dimension<br/>is 1?}\n    E -->|Yes| F[Broadcast:<br/>stretch size-1 dimension]\n    E -->|No| G[Incompatible!<br/>Cannot broadcast]\n    \n    F --> H[Perform operation]\n    D --> H\n    \n    style D fill:#9f9\n    style F fill:#9ff\n    style G fill:#f99","key":"xZqzRMELIi"},{"type":"code","lang":"python","value":"In [190]: # Broadcasting in action\nIn [191]: arr = np.array([[1, 2, 3],\n    ...:                   [4, 5, 6],\n    ...:                   [7, 8, 9]])\n\nIn [192]: # Adding a scalar (broadcasts to all elements)\nIn [193]: print(f\"Array + 10:\\n{arr + 10}\")\nArray + 10:\n[[11 12 13]\n [14 15 16]\n [17 18 19]]\n\nIn [194]: # Adding a 1D array to rows (broadcasts to each row)\nIn [195]: row_vector = np.array([100, 200, 300])\nIn [196]: print(f\"Array + row vector:\\n{arr + row_vector}\")\nArray + row vector:\n[[101 202 303]\n [104 205 306]\n [107 208 309]]\n\nIn [197]: # Adding a column vector (broadcasts to each column)\nIn [198]: col_vector = np.array([[1000],\n    ...:                          [2000],\n    ...:                          [3000]])\nIn [199]: print(f\"Array + column vector:\\n{arr + col_vector}\")\nArray + column vector:\n[[1001 1002 1003]\n [2004 2005 2006]\n [3007 3008 3009]]","position":{"start":{"line":2749,"column":1},"end":{"line":2779,"column":1}},"key":"Zo7kERrrOY"},{"type":"heading","depth":3,"position":{"start":{"line":2781,"column":1},"end":{"line":2781,"column":1}},"children":[{"type":"text","value":"Practical Broadcasting Examples","position":{"start":{"line":2781,"column":1},"end":{"line":2781,"column":1}},"key":"mhCwtlOkT0"}],"identifier":"practical-broadcasting-examples","label":"Practical Broadcasting Examples","html_id":"practical-broadcasting-examples-1","implicit":true,"key":"PbZfjWHyV8"},{"type":"paragraph","position":{"start":{"line":2783,"column":1},"end":{"line":2783,"column":1}},"children":[{"type":"text","value":"Broadcasting makes many scientific calculations elegant:","position":{"start":{"line":2783,"column":1},"end":{"line":2783,"column":1}},"key":"Z9f3MrfAwa"}],"key":"UT93Es3BlI"},{"type":"code","lang":"python","value":"In [200]: # Normalize each column of a matrix\nIn [201]: data = np.random.randn(100, 3) * [10, 50, 100] + [0, 100, 200]\nIn [202]: print(f\"Original means: {data.mean(axis=0)}\")\nIn [203]: print(f\"Original stds: {data.std(axis=0)}\")\n\nIn [204]: # Subtract mean and divide by std for each column\nIn [205]: normalized = (data - data.mean(axis=0)) / data.std(axis=0)\nIn [206]: print(f\"Normalized means: {normalized.mean(axis=0)}\")  # ~0\nIn [207]: print(f\"Normalized stds: {normalized.std(axis=0)}\")    # ~1\nOriginal means: [  0.234  99.876 200.123]\nOriginal stds: [ 9.987 49.234 98.765]\nNormalized means: [-1.23e-17  2.45e-17  3.67e-17]\nNormalized stds: [1. 1. 1.]\n\nIn [208]: # Distance matrix between points\nIn [209]: points = np.random.randn(5, 2)  # 5 points in 2D\nIn [210]: # Use broadcasting to compute all pairwise differences\nIn [211]: diff = points[:, np.newaxis, :] - points[np.newaxis, :, :]\nIn [212]: # Shape: (5, 1, 2) - (1, 5, 2) = (5, 5, 2)\nIn [213]: distances = np.sqrt((diff**2).sum(axis=2))\nIn [214]: print(f\"Distance matrix:\\n{distances}\")\nDistance matrix:\n[[0.    1.234 2.345 0.567 1.890]\n [1.234 0.    1.567 0.890 2.234]\n [2.345 1.567 0.    1.234 0.789]\n [0.567 0.890 1.234 0.    1.456]\n [1.890 2.234 0.789 1.456 0.   ]]","position":{"start":{"line":2785,"column":1},"end":{"line":2813,"column":1}},"key":"YOaJSvYfd6"},{"type":"heading","depth":3,"position":{"start":{"line":2815,"column":1},"end":{"line":2815,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":2815,"column":1},"end":{"line":2815,"column":1}},"key":"CHuNd9bJ8s"},{"type":"strong","position":{"start":{"line":2815,"column":1},"end":{"line":2815,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Broadcasting Surprises","position":{"start":{"line":2815,"column":1},"end":{"line":2815,"column":1}},"key":"EXMIUoElgL"}],"key":"DFyIrKSMqD"}],"identifier":"id-common-bug-alert-broadcasting-surprises","label":"⚠️ Common Bug Alert: Broadcasting Surprises","html_id":"id-common-bug-alert-broadcasting-surprises-1","implicit":true,"key":"GjeDxzq0XI"},{"type":"code","lang":"python","value":"# UNEXPECTED: Broadcasting can hide dimension mismatches\na = np.array([[1, 2, 3]])     # Shape: (1, 3)\nb = np.array([[10], [20]])    # Shape: (2, 1)\n\n# This works but might not be what you intended!\nresult = a + b  # Broadcasts to (2, 3)\nprint(f\"Result:\\n{result}\")\n# [[11 12 13]\n#  [21 22 23]]\n\n# DEFENSIVE: Check shapes when unsure\ndef safe_add(a, b):\n    \"\"\"Add arrays with shape checking.\"\"\"\n    if a.shape != b.shape:\n        print(f\"Warning: Broadcasting {a.shape} and {b.shape}\")\n        print(f\"Result shape will be: {np.broadcast_shapes(a.shape, b.shape)}\")\n    return a + b\n\n# EXPLICIT: Use np.newaxis to be clear about intent\nrow = np.array([1, 2, 3])\ncol = np.array([10, 20])\n\n# Clear that we want to broadcast\nresult = row[np.newaxis, :] + col[:, np.newaxis]\nprint(f\"Explicit broadcasting:\\n{result}\")","position":{"start":{"line":2817,"column":1},"end":{"line":2843,"column":1}},"key":"icxn5Kf5Ew"},{"type":"heading","depth":2,"position":{"start":{"line":2845,"column":1},"end":{"line":2845,"column":1}},"children":[{"type":"text","value":"7.7 Mathematical Operations and Linear Algebra","position":{"start":{"line":2845,"column":1},"end":{"line":2845,"column":1}},"key":"XPDR8zgS33"}],"identifier":"id-7-7-mathematical-operations-and-linear-algebra","label":"7.7 Mathematical Operations and Linear Algebra","html_id":"id-7-7-mathematical-operations-and-linear-algebra-1","implicit":true,"key":"BNJ0HXLoBJ"},{"type":"paragraph","position":{"start":{"line":2847,"column":1},"end":{"line":2847,"column":1}},"children":[{"type":"text","value":"NumPy provides a comprehensive suite of mathematical functions optimized for arrays.","position":{"start":{"line":2847,"column":1},"end":{"line":2847,"column":1}},"key":"oMrg6d8thn"}],"key":"cdV2VlgkyF"},{"type":"heading","depth":3,"position":{"start":{"line":2849,"column":1},"end":{"line":2849,"column":1}},"children":[{"type":"text","value":"Element-wise Mathematics","position":{"start":{"line":2849,"column":1},"end":{"line":2849,"column":1}},"key":"RN5IrH2zVp"}],"identifier":"element-wise-mathematics","label":"Element-wise Mathematics","html_id":"element-wise-mathematics-1","implicit":true,"key":"kz9NbyLK5c"},{"type":"code","lang":"python","value":"In [215]: # Trigonometric functions\nIn [216]: angles = np.linspace(0, 2*np.pi, 5)\nIn [217]: print(f\"Sin: {np.sin(angles)}\")\nIn [218]: print(f\"Arcsin of 0.5: {np.arcsin(0.5)}\")\n\nIn [219]: # Exponential and logarithmic\nIn [220]: x = np.array([1, 2, 3])\nIn [221]: print(f\"Exp: {np.exp(x)}\")           # e^x\nIn [222]: print(f\"Log: {np.log(x)}\")           # Natural log\nIn [223]: print(f\"Log10: {np.log10(x)}\")       # Base-10 log\nIn [224]: print(f\"Exp2: {np.exp2(x)}\")         # 2^x\n\nIn [225]: # Special functions for scientific computing\nIn [226]: from scipy import special  # Extended special functions\nIn [227]: x = np.linspace(0, 10, 100)\nIn [228]: bessel = special.j0(x)  # Bessel function of first kind\nIn [229]: gamma = special.gamma(x + 1)  # Gamma function","position":{"start":{"line":2851,"column":1},"end":{"line":2869,"column":1}},"key":"XrvbzVT4Q3"},{"type":"heading","depth":3,"position":{"start":{"line":2871,"column":1},"end":{"line":2871,"column":1}},"children":[{"type":"text","value":"Linear Algebra Operations","position":{"start":{"line":2871,"column":1},"end":{"line":2871,"column":1}},"key":"I9hyztUhwG"}],"identifier":"linear-algebra-operations","label":"Linear Algebra Operations","html_id":"linear-algebra-operations-1","implicit":true,"key":"Nxw2LICV5i"},{"type":"paragraph","position":{"start":{"line":2873,"column":1},"end":{"line":2873,"column":1}},"children":[{"type":"text","value":"NumPy includes a full linear algebra module:","position":{"start":{"line":2873,"column":1},"end":{"line":2873,"column":1}},"key":"P8ZldfnceR"}],"key":"DMMyt9NMi8"},{"type":"code","lang":"python","value":"In [230]: # Matrix multiplication\nIn [231]: A = np.array([[1, 2],\n    ...:                [3, 4]])\nIn [232]: B = np.array([[5, 6],\n    ...:                [7, 8]])\n\nIn [233]: # Element-wise multiplication (NOT matrix multiplication)\nIn [234]: print(f\"Element-wise A * B:\\n{A * B}\")\n\nIn [235]: # True matrix multiplication\nIn [236]: print(f\"Matrix multiplication A @ B:\\n{A @ B}\")\nIn [237]: # Or: np.dot(A, B) or np.matmul(A, B)\nElement-wise A * B:\n[[ 5 12]\n [21 32]]\nMatrix multiplication A @ B:\n[[19 22]\n [43 50]]\n\nIn [238]: # Common linear algebra operations\nIn [239]: matrix = np.array([[3, 1],\n    ...:                      [1, 2]])\n\nIn [240]: # Determinant\nIn [241]: det = np.linalg.det(matrix)\nIn [242]: print(f\"Determinant: {det}\")\n\nIn [243]: # Eigenvalues and eigenvectors\nIn [244]: eigenvalues, eigenvectors = np.linalg.eig(matrix)\nIn [245]: print(f\"Eigenvalues: {eigenvalues}\")\nIn [246]: print(f\"Eigenvectors:\\n{eigenvectors}\")\n\nIn [247]: # Inverse\nIn [248]: inverse = np.linalg.inv(matrix)\nIn [249]: print(f\"Inverse:\\n{inverse}\")\nIn [250]: print(f\"Check: A @ A^-1 =\\n{matrix @ inverse}\")  # Should be identity\n\nIn [251]: # Solving linear systems: Ax = b\nIn [252]: A = np.array([[3, 1],\n    ...:                [1, 2]])\nIn [253]: b = np.array([9, 8])\nIn [254]: x = np.linalg.solve(A, b)\nIn [255]: print(f\"Solution: {x}\")\nIn [256]: print(f\"Check: Ax = {A @ x}\")  # Should equal b","position":{"start":{"line":2875,"column":1},"end":{"line":2920,"column":1}},"key":"Yn6SH8Zppi"},{"type":"heading","depth":3,"position":{"start":{"line":2922,"column":1},"end":{"line":2922,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":2922,"column":1},"end":{"line":2922,"column":1}},"key":"UTJC1KHw3S"},{"type":"strong","position":{"start":{"line":2922,"column":1},"end":{"line":2922,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: Numerical Stability","position":{"start":{"line":2922,"column":1},"end":{"line":2922,"column":1}},"key":"bADjGXT5Ba"}],"key":"LbRlwfvmrl"}],"identifier":"id-computational-thinking-box-numerical-stability","label":"📦 Computational Thinking Box: Numerical Stability","html_id":"id-computational-thinking-box-numerical-stability-1","implicit":true,"key":"KI7FYoA4dX"},{"type":"code","lang":"","value":"PATTERN: Numerical Stability in Linear Algebra\n\nNot all mathematically correct operations are numerically stable.\nSmall floating-point errors can explode into wrong answers.\n\nExample: Solving Ax = b\n- Mathematically: x = A^(-1) @ b\n- Numerically: DON'T compute inverse! Use np.linalg.solve()\n\nWhy? Matrix inversion is:\n1. Expensive: O(n³) operations\n2. Unstable: Errors amplify with condition number\n3. Unnecessary: Solving systems is more stable\n\nCondition number measures sensitivity to errors:\ncond = np.linalg.cond(A)\n- cond ~ 1: Well-conditioned (stable)\n- cond >> 1: Ill-conditioned (unstable)\n- cond = ∞: Singular (no unique solution)\n\nThis pattern appears throughout scientific computing:\n- Use np.linalg.lstsq() for overdetermined systems\n- Use QR decomposition instead of normal equations\n- Use SVD for rank-deficient problems\n- Use specialized solvers for specific matrix structures\n\nThe lesson: Numerical computing ≠ symbolic math\nAlways consider stability, not just correctness.","position":{"start":{"line":2924,"column":1},"end":{"line":2953,"column":1}},"key":"JsQRH9ZUNv"},{"type":"heading","depth":2,"position":{"start":{"line":2955,"column":1},"end":{"line":2955,"column":1}},"children":[{"type":"text","value":"7.8 Structured Arrays: Beyond Simple Numbers","position":{"start":{"line":2955,"column":1},"end":{"line":2955,"column":1}},"key":"OZPYM2PUaZ"}],"identifier":"id-7-8-structured-arrays-beyond-simple-numbers","label":"7.8 Structured Arrays: Beyond Simple Numbers","html_id":"id-7-8-structured-arrays-beyond-simple-numbers","implicit":true,"key":"oh4DABHaRk"},{"type":"paragraph","position":{"start":{"line":2957,"column":1},"end":{"line":2957,"column":1}},"children":[{"type":"text","value":"NumPy can handle heterogeneous data through structured arrays, bridging the gap to databases and complex data:","position":{"start":{"line":2957,"column":1},"end":{"line":2957,"column":1}},"key":"rmoSy4ojlL"}],"key":"yZKjf17P6T"},{"type":"code","lang":"python","value":"In [257]: # Define a structured dtype for star catalog\nIn [258]: star_dtype = np.dtype([\n    ...:     ('name', 'U20'),        # Unicode string, max 20 chars\n    ...:     ('ra', 'f8'),           # Right ascension (float64)\n    ...:     ('dec', 'f8'),          # Declination (float64)\n    ...:     ('magnitude', 'f4'),    # Apparent magnitude (float32)\n    ...:     ('spectral_type', 'U10') # Spectral classification\n    ...: ])\n\nIn [259]: # Create structured array\nIn [260]: stars = np.array([\n    ...:     ('Sirius', 101.287, -16.716, -1.46, 'A1V'),\n    ...:     ('Canopus', 95.988, -52.696, -0.74, 'A9II'),\n    ...:     ('Arcturus', 213.915, 19.182, -0.05, 'K1.5III'),\n    ...:     ('Vega', 279.234, 38.784, 0.03, 'A0V')\n    ...: ], dtype=star_dtype)\n\nIn [261]: # Access fields like object attributes\nIn [262]: print(f\"Names: {stars['name']}\")\nIn [263]: print(f\"Magnitudes: {stars['magnitude']}\")\nNames: ['Sirius' 'Canopus' 'Arcturus' 'Vega']\nMagnitudes: [-1.46 -0.74 -0.05  0.03]\n\nIn [264]: # Boolean indexing works with structured arrays\nIn [265]: bright = stars[stars['magnitude'] < 0]\nIn [266]: print(f\"Bright stars: {bright['name']}\")\nBright stars: ['Sirius' 'Canopus' 'Arcturus']\n\nIn [267]: # Sorting by field\nIn [268]: sorted_stars = np.sort(stars, order='magnitude')\nIn [269]: print(f\"Sorted by brightness: {sorted_stars['name']}\")\nSorted by brightness: ['Sirius' 'Canopus' 'Arcturus' 'Vega']","position":{"start":{"line":2959,"column":1},"end":{"line":2992,"column":1}},"key":"nE4oUkuLkw"},{"type":"paragraph","position":{"start":{"line":2994,"column":1},"end":{"line":2994,"column":1}},"children":[{"type":"text","value":"This connects to Chapter 6’s OOP concepts: structured arrays are like arrays of objects, but with better performance for large datasets. When you have millions of stars, structured arrays are more efficient than lists of Star objects.","position":{"start":{"line":2994,"column":1},"end":{"line":2994,"column":1}},"key":"IKgYNs0SU5"}],"key":"DCg53maMRL"},{"type":"heading","depth":2,"position":{"start":{"line":2996,"column":1},"end":{"line":2996,"column":1}},"children":[{"type":"text","value":"7.9 Memory Management and Performance Tips","position":{"start":{"line":2996,"column":1},"end":{"line":2996,"column":1}},"key":"vAhO59dymZ"}],"identifier":"id-7-9-memory-management-and-performance-tips","label":"7.9 Memory Management and Performance Tips","html_id":"id-7-9-memory-management-and-performance-tips","implicit":true,"key":"ggoyk7ipWN"},{"type":"paragraph","position":{"start":{"line":2998,"column":1},"end":{"line":2998,"column":1}},"children":[{"type":"text","value":"Understanding memory usage helps write efficient code for large datasets:","position":{"start":{"line":2998,"column":1},"end":{"line":2998,"column":1}},"key":"cI8AW9L5uA"}],"key":"a3b5xJEPoe"},{"type":"heading","depth":3,"position":{"start":{"line":3000,"column":1},"end":{"line":3000,"column":1}},"children":[{"type":"text","value":"Memory Views and Copies","position":{"start":{"line":3000,"column":1},"end":{"line":3000,"column":1}},"key":"HlMtXjx72b"}],"identifier":"memory-views-and-copies","label":"Memory Views and Copies","html_id":"memory-views-and-copies","implicit":true,"key":"BHUc81OgVa"},{"type":"code","lang":"python","value":"In [270]: # Check if array owns its data\nIn [271]: original = np.arange(1000000)\nIn [272]: view = original[::2]  # Every other element\nIn [273]: copy = original[::2].copy()\n\nIn [274]: print(f\"View owns data: {view.flags['OWNDATA']}\")  # False\nIn [275]: print(f\"Copy owns data: {copy.flags['OWNDATA']}\")  # True\nIn [276]: print(f\"View base is original: {view.base is original}\")  # True\n\nIn [277]: # Memory usage\nIn [278]: print(f\"Original size: {original.nbytes / 1e6:.1f} MB\")\nIn [279]: print(f\"View size: {view.nbytes / 1e6:.1f} MB\")  # Half size\nIn [280]: print(f\"But view doesn't use extra memory!\")","position":{"start":{"line":3002,"column":1},"end":{"line":3016,"column":1}},"key":"RQdTR5lPdk"},{"type":"heading","depth":3,"position":{"start":{"line":3018,"column":1},"end":{"line":3018,"column":1}},"children":[{"type":"text","value":"In-place Operations","position":{"start":{"line":3018,"column":1},"end":{"line":3018,"column":1}},"key":"azSFCl9huc"}],"identifier":"in-place-operations","label":"In-place Operations","html_id":"in-place-operations","implicit":true,"key":"aY8UPL59U5"},{"type":"paragraph","position":{"start":{"line":3020,"column":1},"end":{"line":3020,"column":1}},"children":[{"type":"text","value":"Modify arrays in-place to save memory:","position":{"start":{"line":3020,"column":1},"end":{"line":3020,"column":1}},"key":"TVU4LA2J8E"}],"key":"PVIAG6YYKN"},{"type":"code","lang":"python","value":"In [281]: # Out-of-place (creates new array)\nIn [282]: a = np.arange(1000000, dtype=np.float64)\nIn [283]: b = a * 2  # New array created\n\nIn [284]: # In-place (modifies existing array)\nIn [285]: a *= 2  # No new array\n\nIn [286]: # Many functions have in-place versions\nIn [287]: arr = np.random.randn(1000, 1000)\nIn [288]: # Out-of-place\nIn [289]: normalized = arr / arr.std()\n\nIn [290]: # In-place\nIn [291]: arr /= arr.std()  # Modifies arr directly\n\nIn [292]: # Some functions have 'out' parameter\nIn [293]: result = np.empty_like(arr)\nIn [294]: np.sqrt(arr**2, out=result)  # Writes to existing array","position":{"start":{"line":3022,"column":1},"end":{"line":3041,"column":1}},"key":"MTTetrTs2f"},{"type":"heading","depth":3,"position":{"start":{"line":3043,"column":1},"end":{"line":3043,"column":1}},"children":[{"type":"text","value":"🔊 ","position":{"start":{"line":3043,"column":1},"end":{"line":3043,"column":1}},"key":"mNTmj7QBzA"},{"type":"strong","position":{"start":{"line":3043,"column":1},"end":{"line":3043,"column":1}},"children":[{"type":"text","value":"Performance Profile: Memory Access Patterns","position":{"start":{"line":3043,"column":1},"end":{"line":3043,"column":1}},"key":"lmNqzv5jZO"}],"key":"D2OTVPMyh9"}],"identifier":"id-performance-profile-memory-access-patterns","label":"🔊 Performance Profile: Memory Access Patterns","html_id":"id-performance-profile-memory-access-patterns","implicit":true,"key":"qhubtwVlFb"},{"type":"code","lang":"python","value":"# Cache-friendly vs cache-unfriendly operations\nlarge = np.random.randn(10000, 10000)\n\n# Row-wise sum (cache-friendly for C-order arrays)\n%timeit large.sum(axis=1)  # 57.4 ms\n\n# Column-wise sum (cache-unfriendly for C-order arrays)\n%timeit large.sum(axis=0)  # 128 ms\n\n# Transpose makes column-wise cache-friendly\nlarge_T = large.T\n%timeit large_T.sum(axis=0)  # 58.1 ms (fast again!)\n\n# But transpose is just a view (no copy)\nprint(f\"Transpose is view: {large_T.base is large}\")  # True\n\n# For best performance:\n# 1. Access memory sequentially when possible\n# 2. Use contiguous arrays\n# 3. Consider memory layout for your access pattern","position":{"start":{"line":3045,"column":1},"end":{"line":3066,"column":1}},"key":"DZlCjpPiiD"},{"type":"heading","depth":2,"position":{"start":{"line":3068,"column":1},"end":{"line":3068,"column":1}},"children":[{"type":"text","value":"7.10 Common Pitfalls and Debugging","position":{"start":{"line":3068,"column":1},"end":{"line":3068,"column":1}},"key":"J2XL30CzOF"}],"identifier":"id-7-10-common-pitfalls-and-debugging","label":"7.10 Common Pitfalls and Debugging","html_id":"id-7-10-common-pitfalls-and-debugging","implicit":true,"key":"kzj7kC2dZx"},{"type":"heading","depth":3,"position":{"start":{"line":3070,"column":1},"end":{"line":3070,"column":1}},"children":[{"type":"text","value":"Integer Division Changed in Python 3","position":{"start":{"line":3070,"column":1},"end":{"line":3070,"column":1}},"key":"DqmAauJt4a"}],"identifier":"integer-division-changed-in-python-3","label":"Integer Division Changed in Python 3","html_id":"integer-division-changed-in-python-3","implicit":true,"key":"YfvQMEyO0g"},{"type":"code","lang":"python","value":"# Python 2 vs Python 3 difference that affects NumPy\narr = np.array([1, 2, 3, 4, 5])\n\n# Python 3: / always gives float\nprint(arr / 2)  # [0.5 1.  1.5 2.  2.5]\n\n# Use // for integer division\nprint(arr // 2)  # [0 1 1 2 2]","position":{"start":{"line":3072,"column":1},"end":{"line":3081,"column":1}},"key":"khFAZEAEYU"},{"type":"heading","depth":3,"position":{"start":{"line":3083,"column":1},"end":{"line":3083,"column":1}},"children":[{"type":"text","value":"Modifying Arrays During Iteration","position":{"start":{"line":3083,"column":1},"end":{"line":3083,"column":1}},"key":"qokbQZY2Ro"}],"identifier":"modifying-arrays-during-iteration","label":"Modifying Arrays During Iteration","html_id":"modifying-arrays-during-iteration","implicit":true,"key":"I05HBu8TXs"},{"type":"code","lang":"python","value":"# WRONG: Modifying array while iterating\narr = np.array([1, 2, 3, 4, 5])\nfor i, val in enumerate(arr):\n    if val > 2:\n        arr[i] = 0  # Dangerous!\n\n# CORRECT: Use vectorized operations\narr[arr > 2] = 0\n\n# Or if you must loop, work on a copy\nfor i, val in enumerate(arr.copy()):\n    if val > 2:\n        arr[i] = 0","position":{"start":{"line":3085,"column":1},"end":{"line":3099,"column":1}},"key":"XpaHqLhM1Z"},{"type":"heading","depth":3,"position":{"start":{"line":3101,"column":1},"end":{"line":3101,"column":1}},"children":[{"type":"text","value":"🛠️ ","position":{"start":{"line":3101,"column":1},"end":{"line":3101,"column":1}},"key":"mVAFgd0QYK"},{"type":"strong","position":{"start":{"line":3101,"column":1},"end":{"line":3101,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":3101,"column":1},"end":{"line":3101,"column":1}},"key":"wDJgbMUj3h"}],"key":"QGTtifghIf"}],"identifier":"id-debug-this","label":"🛠️ Debug This!","html_id":"id-debug-this-1","implicit":true,"key":"vJkEldjuIF"},{"type":"paragraph","position":{"start":{"line":3103,"column":1},"end":{"line":3103,"column":1}},"children":[{"type":"text","value":"This code has a subtle bug. Can you find it?","position":{"start":{"line":3103,"column":1},"end":{"line":3103,"column":1}},"key":"JEuSDoiQhw"}],"key":"dtXLirFF3U"},{"type":"code","lang":"python","value":"def normalize_columns(data):\n    \"\"\"Normalize each column to have mean=0, std=1.\"\"\"\n    for col in range(data.shape[1]):\n        data[:, col] -= data[:, col].mean()\n        data[:, col] /= data[:, col].std()\n    return data\n\n# Test it\ntest_data = np.array([[1, 100],\n                       [2, 200],\n                       [3, 300]], dtype=np.float64)\n                       \nnormalized = normalize_columns(test_data)\nprint(f\"Original data:\\n{test_data}\")\nprint(f\"Normalized:\\n{normalized}\")","position":{"start":{"line":3105,"column":1},"end":{"line":3121,"column":1}},"key":"ZvjytXTTah"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Bug and Solution","key":"uKUka0SGdn"}],"key":"VmVtYCluHZ"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bug","key":"PJ6K7mfYnk"}],"key":"ue81t6tp6A"},{"type":"text","value":": The function modifies the input array in-place but also returns it, which can be confusing. Worse, the original data is lost!","key":"cwrrFJNOj6"}],"key":"MvZfGlzFtE"},{"type":"paragraph","children":[{"type":"text","value":"After normalization, both ","key":"pkl5sgCi2Z"},{"type":"inlineCode","value":"test_data","key":"PFPgdXejKG"},{"type":"text","value":" and ","key":"booNbqLt1U"},{"type":"inlineCode","value":"normalized","key":"l3hilqWE6Y"},{"type":"text","value":" point to the same modified array:","key":"eidGwoaGiO"}],"key":"puPY77KCAT"},{"type":"code","lang":"python","meta":null,"value":"print(test_data is normalized)  # True - same object!","key":"NxXtgIwl0t"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Solutions","key":"IvK3vKzvgC"}],"key":"vP7vb4zIrf"},{"type":"text","value":":","key":"M5H5M9i0Ty"}],"key":"Xft2X7w7Bp"},{"type":"paragraph","children":[{"type":"text","value":"Option 1: Work on a copy","key":"vBCqhqaBXh"}],"key":"Fi5kOobXUC"},{"type":"code","lang":"python","meta":null,"value":"def normalize_columns(data):\n    \"\"\"Normalize columns without modifying input.\"\"\"\n    result = data.copy()  # Work on copy\n    for col in range(result.shape[1]):\n        result[:, col] -= result[:, col].mean()\n        result[:, col] /= result[:, col].std()\n    return result","key":"oYpmp9aQCP"},{"type":"paragraph","children":[{"type":"text","value":"Option 2: Make in-place operation explicit","key":"pAYFDuojiS"}],"key":"PZsr1j6wp1"},{"type":"code","lang":"python","meta":null,"value":"def normalize_columns_inplace(data):\n    \"\"\"Normalize columns in-place. Returns None.\"\"\"\n    for col in range(data.shape[1]):\n        data[:, col] -= data[:, col].mean()\n        data[:, col] /= data[:, col].std()\n    # Don't return anything for in-place operations","key":"kJyIx5O7Az"},{"type":"paragraph","children":[{"type":"text","value":"Option 3: Use vectorization (best!)","key":"cDhAz2F0rN"}],"key":"BBQNLr1mRF"},{"type":"code","lang":"python","meta":null,"value":"def normalize_columns_vectorized(data):\n    \"\"\"Vectorized normalization.\"\"\"\n    return (data - data.mean(axis=0)) / data.std(axis=0)","key":"s8npmbp5eh"}],"key":"fC9CILzL0w"},{"type":"heading","depth":2,"position":{"start":{"line":3165,"column":1},"end":{"line":3165,"column":1}},"children":[{"type":"text","value":"Practice Exercises","position":{"start":{"line":3165,"column":1},"end":{"line":3165,"column":1}},"key":"nqjj709ntA"}],"identifier":"practice-exercises","label":"Practice Exercises","html_id":"practice-exercises-1","implicit":true,"key":"iKnULbWHbq"},{"type":"heading","depth":3,"position":{"start":{"line":3167,"column":1},"end":{"line":3167,"column":1}},"children":[{"type":"text","value":"Exercise 7.1: Implement Moving Average","position":{"start":{"line":3167,"column":1},"end":{"line":3167,"column":1}},"key":"Y6gPfxcabl"}],"identifier":"exercise-7-1-implement-moving-average","label":"Exercise 7.1: Implement Moving Average","html_id":"exercise-7-1-implement-moving-average-1","implicit":true,"key":"YIWxcnM7XC"},{"type":"paragraph","position":{"start":{"line":3169,"column":1},"end":{"line":3169,"column":1}},"children":[{"type":"text","value":"Create a function that computes a moving average efficiently:","position":{"start":{"line":3169,"column":1},"end":{"line":3169,"column":1}},"key":"PxVT7zTbtf"}],"key":"YxufbtRNtV"},{"type":"code","lang":"python","value":"\"\"\"\nImplement a moving average function that:\n1. Takes a 1D array and window size\n2. Returns array of moving averages\n3. Handles edge cases appropriately\n4. Is vectorized (no Python loops)\n\nExample:\ndata = [1, 2, 3, 4, 5]\nwindow = 3\nresult = [1.5, 2, 3, 4, 4.5]  # Edges handled with smaller windows\n\nHint: Consider np.convolve or clever use of cumsum\n\"\"\"\n\ndef moving_average(data, window_size):\n    \"\"\"Compute moving average using vectorization.\"\"\"\n    # Your implementation here\n    pass\n\n# Test cases\ntest_data = np.random.randn(1000)\nma = moving_average(test_data, 10)\nassert len(ma) == len(test_data)\nassert np.isfinite(ma).all()","position":{"start":{"line":3171,"column":1},"end":{"line":3197,"column":1}},"key":"Lipb4DtSGH"},{"type":"heading","depth":3,"position":{"start":{"line":3199,"column":1},"end":{"line":3199,"column":1}},"children":[{"type":"text","value":"Exercise 7.2: Image Processing with Broadcasting","position":{"start":{"line":3199,"column":1},"end":{"line":3199,"column":1}},"key":"BiQaQ9vcYT"}],"identifier":"exercise-7-2-image-processing-with-broadcasting","label":"Exercise 7.2: Image Processing with Broadcasting","html_id":"exercise-7-2-image-processing-with-broadcasting-1","implicit":true,"key":"erg1GfneKh"},{"type":"paragraph","position":{"start":{"line":3201,"column":1},"end":{"line":3201,"column":1}},"children":[{"type":"text","value":"Implement image transformations using broadcasting:","position":{"start":{"line":3201,"column":1},"end":{"line":3201,"column":1}},"key":"qG9vJEF37X"}],"key":"sEWTanjZRn"},{"type":"code","lang":"python","value":"\"\"\"\nCreate functions for basic image processing:\n1. Brightness adjustment (add constant to all pixels)\n2. Contrast adjustment (multiply all pixels)\n3. Gamma correction (power transformation)\n4. Color channel mixing (for RGB images)\n\nWork with images as arrays where:\n- Grayscale: (height, width)\n- RGB: (height, width, 3)\n\nUse broadcasting to avoid loops!\n\"\"\"\n\ndef adjust_brightness(image, delta):\n    \"\"\"Adjust brightness by adding delta.\"\"\"\n    # Ensure result stays in valid range [0, 255] or [0, 1]\n    pass\n\ndef adjust_gamma(image, gamma):\n    \"\"\"Apply gamma correction: out = in^gamma.\"\"\"\n    pass\n\ndef rgb_to_grayscale(rgb_image):\n    \"\"\"Convert RGB to grayscale using standard weights:\n    gray = 0.299*R + 0.587*G + 0.114*B\n    \"\"\"\n    pass\n\n# Test with synthetic image\ntest_rgb = np.random.rand(100, 100, 3)\ngray = rgb_to_grayscale(test_rgb)\nassert gray.shape == (100, 100)","position":{"start":{"line":3203,"column":1},"end":{"line":3237,"column":1}},"key":"SRtZ6HYHq0"},{"type":"heading","depth":3,"position":{"start":{"line":3239,"column":1},"end":{"line":3239,"column":1}},"children":[{"type":"text","value":"Exercise 7.3: Optimize Star Catalog Operations","position":{"start":{"line":3239,"column":1},"end":{"line":3239,"column":1}},"key":"B8gKhmKlbH"}],"identifier":"exercise-7-3-optimize-star-catalog-operations","label":"Exercise 7.3: Optimize Star Catalog Operations","html_id":"exercise-7-3-optimize-star-catalog-operations-1","implicit":true,"key":"XDg8JXGKON"},{"type":"paragraph","position":{"start":{"line":3241,"column":1},"end":{"line":3241,"column":1}},"children":[{"type":"text","value":"Compare different approaches for astronomical calculations:","position":{"start":{"line":3241,"column":1},"end":{"line":3241,"column":1}},"key":"gAg5pttlk9"}],"key":"uVWDeVPWEa"},{"type":"code","lang":"python","value":"\"\"\"\nGiven a star catalog with positions and magnitudes,\nimplement these operations multiple ways and compare performance:\n\n1. Find all stars within a given angular distance from a point\n2. Calculate total flux from all stars (flux = 10^(-0.4 * magnitude))\n3. Find the brightest N stars in a region\n\nImplement using:\na) Pure Python loops (baseline)\nb) NumPy vectorization\nc) Boolean masking\n\nMeasure performance differences.\n\"\"\"\n\n# Generate synthetic catalog\nn_stars = 100000\ncatalog = {\n    'ra': np.random.uniform(0, 360, n_stars),      # Right ascension\n    'dec': np.random.uniform(-90, 90, n_stars),    # Declination  \n    'mag': np.random.uniform(-1, 20, n_stars)      # Magnitude\n}\n\ndef find_nearby_stars_loop(catalog, ra_center, dec_center, radius):\n    \"\"\"Pure Python implementation.\"\"\"\n    # Your implementation\n    pass\n\ndef find_nearby_stars_numpy(catalog, ra_center, dec_center, radius):\n    \"\"\"Vectorized NumPy implementation.\"\"\"\n    # Your implementation\n    # Hint: Use broadcasting for angular distance\n    pass\n\n# Compare performance\nimport time\n# Your timing code here","position":{"start":{"line":3243,"column":1},"end":{"line":3282,"column":1}},"key":"pFxR1v5ba3"},{"type":"heading","depth":3,"position":{"start":{"line":3284,"column":1},"end":{"line":3284,"column":1}},"children":[{"type":"text","value":"Exercise 7.4: Memory-Efficient Large Array Processing","position":{"start":{"line":3284,"column":1},"end":{"line":3284,"column":1}},"key":"A1SXrZOME2"}],"identifier":"exercise-7-4-memory-efficient-large-array-processing","label":"Exercise 7.4: Memory-Efficient Large Array Processing","html_id":"exercise-7-4-memory-efficient-large-array-processing-1","implicit":true,"key":"FMS7t4TSiW"},{"type":"paragraph","position":{"start":{"line":3286,"column":1},"end":{"line":3286,"column":1}},"children":[{"type":"text","value":"Work with arrays too large to fit in memory:","position":{"start":{"line":3286,"column":1},"end":{"line":3286,"column":1}},"key":"h1naNOXOdu"}],"key":"uyWSyn7Bv5"},{"type":"code","lang":"python","value":"\"\"\"\nProcess a large dataset in chunks to avoid memory issues:\n\n1. Create a large dataset (simulate with smaller array)\n2. Process in chunks of fixed size\n3. Combine results appropriately\n\nExample task: Calculate statistics for a 10GB array\non a machine with 4GB RAM.\n\nImplement:\n- Chunked mean calculation\n- Chunked standard deviation (trickier!)\n- Chunked percentiles\n\"\"\"\n\ndef chunked_mean(data_generator, chunk_size=1000000):\n    \"\"\"Calculate mean of data that comes in chunks.\"\"\"\n    total_sum = 0\n    total_count = 0\n    \n    for chunk in data_generator:\n        # Your implementation\n        pass\n    \n    return total_sum / total_count\n\ndef chunked_std(data_generator, chunk_size=1000000):\n    \"\"\"Calculate standard deviation in chunks.\n    Hint: Use Welford's online algorithm or two-pass approach\n    \"\"\"\n    # Your implementation\n    pass\n\n# Test with generator that simulates large data\ndef data_generator(total_size, chunk_size):\n    \"\"\"Generate random data in chunks.\"\"\"\n    n_chunks = total_size // chunk_size\n    for _ in range(n_chunks):\n        yield np.random.randn(chunk_size)\n    \n    remainder = total_size % chunk_size\n    if remainder:\n        yield np.random.randn(remainder)\n\n# Verify your implementation\n# Should work even if total_size > available memory","position":{"start":{"line":3288,"column":1},"end":{"line":3336,"column":1}},"key":"xwMVw4dlNA"},{"type":"heading","depth":2,"position":{"start":{"line":3338,"column":1},"end":{"line":3338,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":3338,"column":1},"end":{"line":3338,"column":1}},"key":"Ca3ydwD5NK"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways-1","implicit":true,"key":"EZVoAtS1a9"},{"type":"paragraph","position":{"start":{"line":3340,"column":1},"end":{"line":3340,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3340,"column":1},"end":{"line":3340,"column":1}},"key":"w83g8ARcth"},{"type":"strong","position":{"start":{"line":3340,"column":1},"end":{"line":3340,"column":1}},"children":[{"type":"text","value":"NumPy arrays are not Python lists","position":{"start":{"line":3340,"column":1},"end":{"line":3340,"column":1}},"key":"JexXknmPv8"}],"key":"kPIn4ITTKq"},{"type":"text","value":" - They store homogeneous data in contiguous memory, enabling 10-100x performance improvements through vectorized operations in compiled code.","position":{"start":{"line":3340,"column":1},"end":{"line":3340,"column":1}},"key":"JisOHkojdl"}],"key":"oYiFzAkMgK"},{"type":"paragraph","position":{"start":{"line":3342,"column":1},"end":{"line":3342,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3342,"column":1},"end":{"line":3342,"column":1}},"key":"Imbn37yjfB"},{"type":"strong","position":{"start":{"line":3342,"column":1},"end":{"line":3342,"column":1}},"children":[{"type":"text","value":"Vectorization is the key mental shift","position":{"start":{"line":3342,"column":1},"end":{"line":3342,"column":1}},"key":"G40S8pfxhT"}],"key":"lLDRogb6Pz"},{"type":"text","value":" - Think in terms of operations on entire arrays, not individual elements. This leverages CPU vector instructions and eliminates Python loop overhead.","position":{"start":{"line":3342,"column":1},"end":{"line":3342,"column":1}},"key":"ajjj1ZcApb"}],"key":"MvrHkUaSPu"},{"type":"paragraph","position":{"start":{"line":3344,"column":1},"end":{"line":3344,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3344,"column":1},"end":{"line":3344,"column":1}},"key":"Hg6Iu69BoJ"},{"type":"strong","position":{"start":{"line":3344,"column":1},"end":{"line":3344,"column":1}},"children":[{"type":"text","value":"Broadcasting enables elegant code","position":{"start":{"line":3344,"column":1},"end":{"line":3344,"column":1}},"key":"WKxs32caiJ"}],"key":"jnvjIXEaAM"},{"type":"text","value":" - Operations between arrays of different shapes follow simple rules, eliminating the need for explicit loops while maintaining memory efficiency.","position":{"start":{"line":3344,"column":1},"end":{"line":3344,"column":1}},"key":"RUIpaFAm1U"}],"key":"UHO5RdbZJK"},{"type":"paragraph","position":{"start":{"line":3346,"column":1},"end":{"line":3346,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3346,"column":1},"end":{"line":3346,"column":1}},"key":"pqYS2pZJXh"},{"type":"strong","position":{"start":{"line":3346,"column":1},"end":{"line":3346,"column":1}},"children":[{"type":"text","value":"Views vs copies matter for performance","position":{"start":{"line":3346,"column":1},"end":{"line":3346,"column":1}},"key":"iaWdR5J9W7"}],"key":"QNUOaDnW3H"},{"type":"text","value":" - Basic slicing creates views (shared memory), while fancy indexing creates copies. Understanding this prevents bugs and memory issues.","position":{"start":{"line":3346,"column":1},"end":{"line":3346,"column":1}},"key":"UJy7CjNOZn"}],"key":"EELPCwRZ27"},{"type":"paragraph","position":{"start":{"line":3348,"column":1},"end":{"line":3348,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3348,"column":1},"end":{"line":3348,"column":1}},"key":"Hgg2nOM7DU"},{"type":"strong","position":{"start":{"line":3348,"column":1},"end":{"line":3348,"column":1}},"children":[{"type":"text","value":"Data types affect both memory and precision","position":{"start":{"line":3348,"column":1},"end":{"line":3348,"column":1}},"key":"TpYRe7hCPR"}],"key":"nPDwmBJaPm"},{"type":"text","value":" - Choose float32 for speed/memory with acceptable precision loss, float64 for accuracy, and appropriate integer types for counting.","position":{"start":{"line":3348,"column":1},"end":{"line":3348,"column":1}},"key":"pYuRHruCVz"}],"key":"g3NeKwmJeZ"},{"type":"paragraph","position":{"start":{"line":3350,"column":1},"end":{"line":3350,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3350,"column":1},"end":{"line":3350,"column":1}},"key":"I0tg4dUsNv"},{"type":"strong","position":{"start":{"line":3350,"column":1},"end":{"line":3350,"column":1}},"children":[{"type":"text","value":"Memory layout impacts performance","position":{"start":{"line":3350,"column":1},"end":{"line":3350,"column":1}},"key":"xazVuArZ4N"}],"key":"WciySmLTjj"},{"type":"text","value":" - Row-major (C) vs column-major (Fortran) ordering affects cache efficiency. Access patterns should match memory layout.","position":{"start":{"line":3350,"column":1},"end":{"line":3350,"column":1}},"key":"gpl9uxPNCA"}],"key":"Fylxs4kwky"},{"type":"paragraph","position":{"start":{"line":3352,"column":1},"end":{"line":3352,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3352,"column":1},"end":{"line":3352,"column":1}},"key":"BTRnqw6zGh"},{"type":"strong","position":{"start":{"line":3352,"column":1},"end":{"line":3352,"column":1}},"children":[{"type":"text","value":"NumPy is the foundation","position":{"start":{"line":3352,"column":1},"end":{"line":3352,"column":1}},"key":"isnNelVhYo"}],"key":"JV6mGEuzj8"},{"type":"text","value":" - Every major scientific Python library builds on NumPy. Understanding NumPy deeply means understanding scientific Python.","position":{"start":{"line":3352,"column":1},"end":{"line":3352,"column":1}},"key":"V5bTQRMzXk"}],"key":"HMcT1oECCd"},{"type":"paragraph","position":{"start":{"line":3354,"column":1},"end":{"line":3354,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":3354,"column":1},"end":{"line":3354,"column":1}},"key":"zt0pXtj7eG"},{"type":"strong","position":{"start":{"line":3354,"column":1},"end":{"line":3354,"column":1}},"children":[{"type":"text","value":"Debugging NumPy requires different tools","position":{"start":{"line":3354,"column":1},"end":{"line":3354,"column":1}},"key":"jE9iBtDZRd"}],"key":"MJJy8KCvAH"},{"type":"text","value":" - Use shape, dtype, and flags attributes to understand arrays. Check for views vs copies, broadcasting behavior, and memory layout.","position":{"start":{"line":3354,"column":1},"end":{"line":3354,"column":1}},"key":"ETjr9Lck2k"}],"key":"wzM2Sxc0rA"},{"type":"heading","depth":2,"position":{"start":{"line":3356,"column":1},"end":{"line":3356,"column":1}},"children":[{"type":"text","value":"Quick Reference Tables","position":{"start":{"line":3356,"column":1},"end":{"line":3356,"column":1}},"key":"fuABX063s4"}],"identifier":"quick-reference-tables","label":"Quick Reference Tables","html_id":"quick-reference-tables-1","implicit":true,"key":"oIqGnfHLJ6"},{"type":"heading","depth":3,"position":{"start":{"line":3358,"column":1},"end":{"line":3358,"column":1}},"children":[{"type":"text","value":"Array Creation Functions","position":{"start":{"line":3358,"column":1},"end":{"line":3358,"column":1}},"key":"Aa6eEs7qLS"}],"identifier":"array-creation-functions","label":"Array Creation Functions","html_id":"array-creation-functions-1","implicit":true,"key":"cMHmDbDGJt"},{"type":"table","position":{"start":{"line":3360,"column":1},"end":{"line":3371,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"children":[{"type":"text","value":"Function","position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"key":"wRl1L3kCKW"}],"key":"Cx40zhm8by"},{"type":"tableCell","header":true,"position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"key":"vhZYOUQzLi"}],"key":"H3ca0PcHqy"},{"type":"tableCell","header":true,"position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":3360,"column":1},"end":{"line":3360,"column":1}},"key":"CCYfSYs1xc"}],"key":"BGrjWVEL3N"}],"key":"G1NeSqPA4O"},{"type":"tableRow","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"children":[{"type":"inlineCode","value":"np.array()","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"key":"VkHSxu4nBg"}],"key":"i90B87Ck6x"},{"type":"tableCell","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"children":[{"type":"text","value":"From Python sequence","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"key":"WeaoxA7gJq"}],"key":"BZuv6flyqH"},{"type":"tableCell","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"children":[{"type":"inlineCode","value":"np.array([1, 2, 3])","position":{"start":{"line":3362,"column":1},"end":{"line":3362,"column":1}},"key":"Gfg70UKGFh"}],"key":"qY51kWZ1YX"}],"key":"SLOJzFdhyG"},{"type":"tableRow","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"children":[{"type":"inlineCode","value":"np.zeros()","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"key":"F5enRaNh4E"}],"key":"bjEvwJqc5H"},{"type":"tableCell","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"children":[{"type":"text","value":"Initialize with zeros","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"key":"BcLuzmwMOv"}],"key":"ddRa1a0bHK"},{"type":"tableCell","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"children":[{"type":"inlineCode","value":"np.zeros((3, 4))","position":{"start":{"line":3363,"column":1},"end":{"line":3363,"column":1}},"key":"FI64jjzN0E"}],"key":"ThriLQY1J2"}],"key":"Bacms7izAu"},{"type":"tableRow","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"children":[{"type":"inlineCode","value":"np.ones()","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"key":"yiu34J5hBA"}],"key":"x3aiPQ0wAi"},{"type":"tableCell","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"children":[{"type":"text","value":"Initialize with ones","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"key":"bOOgxjHTdH"}],"key":"KWrBwImbFk"},{"type":"tableCell","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"children":[{"type":"inlineCode","value":"np.ones((2, 3))","position":{"start":{"line":3364,"column":1},"end":{"line":3364,"column":1}},"key":"WOtg1fGpVd"}],"key":"LbFkuMBXtQ"}],"key":"i7S1XrhxYf"},{"type":"tableRow","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"children":[{"type":"inlineCode","value":"np.empty()","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"key":"TsdKjzr2pm"}],"key":"SqHZ1K0A1P"},{"type":"tableCell","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"children":[{"type":"text","value":"Uninitialized (fast)","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"key":"kb9v8J2cCj"}],"key":"idVjYcWLvD"},{"type":"tableCell","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"children":[{"type":"inlineCode","value":"np.empty((2, 2))","position":{"start":{"line":3365,"column":1},"end":{"line":3365,"column":1}},"key":"E5XyzsM7eQ"}],"key":"LCD9pxlzny"}],"key":"nIkzoZq6xQ"},{"type":"tableRow","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"children":[{"type":"inlineCode","value":"np.arange()","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"key":"A6dVACd6S5"}],"key":"TT7LEuuSBV"},{"type":"tableCell","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"children":[{"type":"text","value":"Range of values","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"key":"KlJsYLlyHx"}],"key":"rjjex6o9k6"},{"type":"tableCell","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"children":[{"type":"inlineCode","value":"np.arange(0, 10, 2)","position":{"start":{"line":3366,"column":1},"end":{"line":3366,"column":1}},"key":"b6qf6g2sFB"}],"key":"ehFG8s6LOa"}],"key":"J6Fbxz15kb"},{"type":"tableRow","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"children":[{"type":"inlineCode","value":"np.linspace()","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"key":"OFEqOrcTPe"}],"key":"HEgLnbJ58u"},{"type":"tableCell","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"children":[{"type":"text","value":"N evenly spaced","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"key":"VNMbtMJZmh"}],"key":"wZVzAmAVHb"},{"type":"tableCell","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"children":[{"type":"inlineCode","value":"np.linspace(0, 1, 11)","position":{"start":{"line":3367,"column":1},"end":{"line":3367,"column":1}},"key":"d415UMbS1s"}],"key":"XM3vzM4KGX"}],"key":"xKat7LZCmx"},{"type":"tableRow","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"children":[{"type":"inlineCode","value":"np.logspace()","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"key":"U04kscMsZY"}],"key":"UDmqfX0SC6"},{"type":"tableCell","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"children":[{"type":"text","value":"Log-spaced values","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"key":"dWtQRZMDqO"}],"key":"TOLUxz0fj7"},{"type":"tableCell","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"children":[{"type":"inlineCode","value":"np.logspace(0, 3, 4)","position":{"start":{"line":3368,"column":1},"end":{"line":3368,"column":1}},"key":"QQMUpTiy4K"}],"key":"zssiHcExO5"}],"key":"M7cb43m5cZ"},{"type":"tableRow","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"children":[{"type":"inlineCode","value":"np.eye()","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"key":"hnJVUDEYpD"}],"key":"PSd47Tvsuq"},{"type":"tableCell","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"children":[{"type":"text","value":"Identity matrix","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"key":"zxC4GvzUtQ"}],"key":"sps4YN9HcJ"},{"type":"tableCell","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"children":[{"type":"inlineCode","value":"np.eye(3)","position":{"start":{"line":3369,"column":1},"end":{"line":3369,"column":1}},"key":"d3QCWVKtKM"}],"key":"WX3NXGGBSs"}],"key":"MnCwonYQ8O"},{"type":"tableRow","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"children":[{"type":"inlineCode","value":"np.random.rand()","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"key":"M6ojqhe0XM"}],"key":"baEMfZUhwA"},{"type":"tableCell","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"children":[{"type":"text","value":"Uniform [0,1)","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"key":"KPaLF27oJZ"}],"key":"mvUX8PHPse"},{"type":"tableCell","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"children":[{"type":"inlineCode","value":"np.random.rand(3, 3)","position":{"start":{"line":3370,"column":1},"end":{"line":3370,"column":1}},"key":"j0PwgYCKCa"}],"key":"oQcIvBPuzz"}],"key":"AvGi8zPYgD"},{"type":"tableRow","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"children":[{"type":"inlineCode","value":"np.random.randn()","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"key":"IgkVO9aQsx"}],"key":"X6WmRW7yca"},{"type":"tableCell","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"children":[{"type":"text","value":"Standard normal","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"key":"LmMqISAOk7"}],"key":"hZpHx6uT3g"},{"type":"tableCell","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"children":[{"type":"inlineCode","value":"np.random.randn(3, 3)","position":{"start":{"line":3371,"column":1},"end":{"line":3371,"column":1}},"key":"D4gHOxBKZ5"}],"key":"EOStnnduCd"}],"key":"fBYXHSB3dO"}],"key":"E0cGUWVvkm"},{"type":"heading","depth":3,"position":{"start":{"line":3373,"column":1},"end":{"line":3373,"column":1}},"children":[{"type":"text","value":"Essential Array Attributes","position":{"start":{"line":3373,"column":1},"end":{"line":3373,"column":1}},"key":"p5SgdKGztD"}],"identifier":"essential-array-attributes","label":"Essential Array Attributes","html_id":"essential-array-attributes-1","implicit":true,"key":"TZYlqA9kBQ"},{"type":"table","position":{"start":{"line":3375,"column":1},"end":{"line":3385,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"children":[{"type":"text","value":"Attribute","position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"key":"cgedEI1o99"}],"key":"QHHCYRgUKG"},{"type":"tableCell","header":true,"position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"children":[{"type":"text","value":"Description","position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"key":"WMoDR08Usu"}],"key":"aahn49UUa6"},{"type":"tableCell","header":true,"position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"children":[{"type":"text","value":"Example Output","position":{"start":{"line":3375,"column":1},"end":{"line":3375,"column":1}},"key":"iNlNThC8SO"}],"key":"CHmcHWtbzw"}],"key":"KebdHgS5T4"},{"type":"tableRow","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"children":[{"type":"inlineCode","value":".shape","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"key":"BVBYgi2glK"}],"key":"TZnQLxjOtX"},{"type":"tableCell","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"children":[{"type":"text","value":"Dimensions","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"key":"tnBL4RbZVq"}],"key":"gBJzvWwjXj"},{"type":"tableCell","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3377,"column":1},"end":{"line":3377,"column":1}},"key":"YYT7njXmgO"}],"key":"uF9Lrm7x5B"}],"key":"cx5mxNxbnl"},{"type":"tableRow","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"children":[{"type":"inlineCode","value":".ndim","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"key":"LeFkYnAiVc"}],"key":"KkACG8iFZX"},{"type":"tableCell","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"children":[{"type":"text","value":"Number of dimensions","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"key":"LkRVnglOlX"}],"key":"k9SmJADjHj"},{"type":"tableCell","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"children":[{"type":"inlineCode","value":"2","position":{"start":{"line":3378,"column":1},"end":{"line":3378,"column":1}},"key":"Tu6H4sfPmN"}],"key":"x0ZNpM97GO"}],"key":"oPQPay7b3J"},{"type":"tableRow","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"children":[{"type":"inlineCode","value":".size","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"key":"lX8lmBbSMT"}],"key":"U5WrTtbcaG"},{"type":"tableCell","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"children":[{"type":"text","value":"Total elements","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"key":"oNbYNplTfS"}],"key":"W6B7P6NXUH"},{"type":"tableCell","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"children":[{"type":"inlineCode","value":"12","position":{"start":{"line":3379,"column":1},"end":{"line":3379,"column":1}},"key":"uzOzqMCOcJ"}],"key":"UMGoL4LXFQ"}],"key":"UVHk7FW3IM"},{"type":"tableRow","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"children":[{"type":"inlineCode","value":".dtype","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"key":"TxnpQRO9SU"}],"key":"GDrkpd8hlK"},{"type":"tableCell","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"children":[{"type":"text","value":"Data type","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"key":"ADkJZKZF5o"}],"key":"Hlst1KrNlJ"},{"type":"tableCell","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"children":[{"type":"inlineCode","value":"dtype('float64')","position":{"start":{"line":3380,"column":1},"end":{"line":3380,"column":1}},"key":"oevFY9GiI9"}],"key":"lwj03K2KRr"}],"key":"UcblLf3jtk"},{"type":"tableRow","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"children":[{"type":"inlineCode","value":".nbytes","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"key":"kWMQKnPUs0"}],"key":"VXeAMG2A3J"},{"type":"tableCell","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"children":[{"type":"text","value":"Total bytes","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"key":"Ro6VOchpq9"}],"key":"d95U4G5M1w"},{"type":"tableCell","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"children":[{"type":"inlineCode","value":"96","position":{"start":{"line":3381,"column":1},"end":{"line":3381,"column":1}},"key":"ViYoKel5bN"}],"key":"g7l9vaAdcO"}],"key":"uslGkEKtor"},{"type":"tableRow","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"children":[{"type":"inlineCode","value":".T","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"key":"lzhKKvsI4U"}],"key":"BoH1WNgJ6c"},{"type":"tableCell","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"children":[{"type":"text","value":"Transpose","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"key":"IVo85N2MP5"}],"key":"PnAFiInHDb"},{"type":"tableCell","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"children":[{"type":"text","value":"Array view","position":{"start":{"line":3382,"column":1},"end":{"line":3382,"column":1}},"key":"jFfFxU1Zfp"}],"key":"JVoTUgbE3b"}],"key":"I4smBIVLly"},{"type":"tableRow","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"children":[{"type":"inlineCode","value":".flat","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"key":"gJE4fUu6xL"}],"key":"kgPz0l6hIR"},{"type":"tableCell","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"children":[{"type":"text","value":"Flattened iterator","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"key":"zNuiq3PQAP"}],"key":"aololBbkgi"},{"type":"tableCell","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"children":[{"type":"text","value":"Iterator object","position":{"start":{"line":3383,"column":1},"end":{"line":3383,"column":1}},"key":"Xhkr9lI07L"}],"key":"r7hqgDa8WJ"}],"key":"woDmk9U4OM"},{"type":"tableRow","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"children":[{"type":"inlineCode","value":".real","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"key":"PGXLw9ql2I"}],"key":"V504oiwcrM"},{"type":"tableCell","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"children":[{"type":"text","value":"Real part","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"key":"kNjAF1HbEu"}],"key":"EmF0WEH0J7"},{"type":"tableCell","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"children":[{"type":"text","value":"Array","position":{"start":{"line":3384,"column":1},"end":{"line":3384,"column":1}},"key":"FFzLD0Uutj"}],"key":"ceCjxdklUY"}],"key":"lrzV3KfrpS"},{"type":"tableRow","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"children":[{"type":"inlineCode","value":".imag","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"key":"HlRF8Au8nc"}],"key":"VVndOTNR2h"},{"type":"tableCell","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"children":[{"type":"text","value":"Imaginary part","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"key":"i1LsPRtpq2"}],"key":"Wapaxr4VTn"},{"type":"tableCell","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"children":[{"type":"text","value":"Array","position":{"start":{"line":3385,"column":1},"end":{"line":3385,"column":1}},"key":"LsNlcXmFdd"}],"key":"Is3WhOizFf"}],"key":"J2AqVYxGdL"}],"key":"AV9YxZnEyl"},{"type":"heading","depth":3,"position":{"start":{"line":3387,"column":1},"end":{"line":3387,"column":1}},"children":[{"type":"text","value":"Common Array Methods","position":{"start":{"line":3387,"column":1},"end":{"line":3387,"column":1}},"key":"fdMe0A3y48"}],"identifier":"common-array-methods","label":"Common Array Methods","html_id":"common-array-methods-1","implicit":true,"key":"by9omFYVQM"},{"type":"table","position":{"start":{"line":3389,"column":1},"end":{"line":3402,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"children":[{"type":"text","value":"Method","position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"key":"bWBzHgCdsK"}],"key":"F0z4vG8hWC"},{"type":"tableCell","header":true,"position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"key":"SdINimrLJo"}],"key":"uy6uDQSJ58"},{"type":"tableCell","header":true,"position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":3389,"column":1},"end":{"line":3389,"column":1}},"key":"UxUUvD9rF8"}],"key":"pRbxNgIfk4"}],"key":"tgsvjDtf5T"},{"type":"tableRow","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"children":[{"type":"inlineCode","value":".reshape()","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"key":"E1SZhJPwfc"}],"key":"EC9XosmhkF"},{"type":"tableCell","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"children":[{"type":"text","value":"Change dimensions","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"key":"TXcMNLkfeS"}],"key":"WdqFB2uqdW"},{"type":"tableCell","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"children":[{"type":"inlineCode","value":"arr.reshape(2, 3)","position":{"start":{"line":3391,"column":1},"end":{"line":3391,"column":1}},"key":"ZeTY6Ut50d"}],"key":"Aww4OpcNAt"}],"key":"kzrA542Twb"},{"type":"tableRow","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"children":[{"type":"inlineCode","value":".flatten()","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"key":"nrRPuXKi9B"}],"key":"aC5CEGfKTN"},{"type":"tableCell","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"children":[{"type":"text","value":"To 1D copy","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"key":"Zg1U76Nh6B"}],"key":"P1PnHccRGx"},{"type":"tableCell","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"children":[{"type":"inlineCode","value":"arr.flatten()","position":{"start":{"line":3392,"column":1},"end":{"line":3392,"column":1}},"key":"X8oVEy3gqZ"}],"key":"QAMfQnz6o7"}],"key":"dt90OvHU7h"},{"type":"tableRow","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"children":[{"type":"inlineCode","value":".ravel()","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"key":"HC8du3bccy"}],"key":"wmA6gIEW1W"},{"type":"tableCell","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"children":[{"type":"text","value":"To 1D view/copy","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"key":"uEUtzorNWi"}],"key":"GcCySva64D"},{"type":"tableCell","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"children":[{"type":"inlineCode","value":"arr.ravel()","position":{"start":{"line":3393,"column":1},"end":{"line":3393,"column":1}},"key":"F3q57Au9p9"}],"key":"zJiHkky8b1"}],"key":"nXkMgLpsmt"},{"type":"tableRow","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"children":[{"type":"inlineCode","value":".transpose()","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"key":"PyxU45Th0D"}],"key":"SLEGTIYq7N"},{"type":"tableCell","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"children":[{"type":"text","value":"Swap axes","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"key":"LDXj2Ee4KB"}],"key":"tEsNSuKMxY"},{"type":"tableCell","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"children":[{"type":"inlineCode","value":"arr.transpose()","position":{"start":{"line":3394,"column":1},"end":{"line":3394,"column":1}},"key":"MckvZzJqK7"}],"key":"QuiIpv4qto"}],"key":"epMHlhTwj9"},{"type":"tableRow","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"children":[{"type":"inlineCode","value":".swapaxes()","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"key":"MZum7jR8sG"}],"key":"Viy7UD7WaD"},{"type":"tableCell","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"children":[{"type":"text","value":"Swap two axes","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"key":"Ourfa7ovnL"}],"key":"E08d6CeZmE"},{"type":"tableCell","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"children":[{"type":"inlineCode","value":"arr.swapaxes(0, 1)","position":{"start":{"line":3395,"column":1},"end":{"line":3395,"column":1}},"key":"GRg3a1O39Y"}],"key":"kvpEWjTh4c"}],"key":"B0XursPIff"},{"type":"tableRow","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"children":[{"type":"inlineCode","value":".sum()","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"key":"VXOjrwyQUD"}],"key":"DSzwHz4W2n"},{"type":"tableCell","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"children":[{"type":"text","value":"Sum elements","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"key":"KPbKfxIepX"}],"key":"ChYlHSbxA1"},{"type":"tableCell","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"children":[{"type":"inlineCode","value":"arr.sum(axis=0)","position":{"start":{"line":3396,"column":1},"end":{"line":3396,"column":1}},"key":"jxZX1HyrqG"}],"key":"l6jwQ0zJLG"}],"key":"JoKSKQL7sd"},{"type":"tableRow","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"children":[{"type":"inlineCode","value":".mean()","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"key":"TPXecrT3dX"}],"key":"kMlQzGfGu5"},{"type":"tableCell","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"children":[{"type":"text","value":"Average","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"key":"iJXWEjJ78v"}],"key":"B272ofCpS9"},{"type":"tableCell","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"children":[{"type":"inlineCode","value":"arr.mean()","position":{"start":{"line":3397,"column":1},"end":{"line":3397,"column":1}},"key":"a3ELueKhxy"}],"key":"jO22j5neny"}],"key":"VyHHKovv87"},{"type":"tableRow","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"children":[{"type":"inlineCode","value":".std()","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"key":"AO9xzDWFnR"}],"key":"eLsMD3odDV"},{"type":"tableCell","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"children":[{"type":"text","value":"Standard deviation","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"key":"B4AoGYUa3C"}],"key":"a3iQjnpGed"},{"type":"tableCell","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"children":[{"type":"inlineCode","value":"arr.std()","position":{"start":{"line":3398,"column":1},"end":{"line":3398,"column":1}},"key":"ynYoCa5rAw"}],"key":"OGRUCBqLdG"}],"key":"vRwiLoBGgt"},{"type":"tableRow","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"children":[{"type":"inlineCode","value":".min()/.max()","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"key":"OylnMKTXO5"}],"key":"ASlsswLzVc"},{"type":"tableCell","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"children":[{"type":"text","value":"Extrema","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"key":"H2sA8J6WbL"}],"key":"Npwtm3tWSB"},{"type":"tableCell","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"children":[{"type":"inlineCode","value":"arr.max()","position":{"start":{"line":3399,"column":1},"end":{"line":3399,"column":1}},"key":"zu04WynzFg"}],"key":"VtbngszZi9"}],"key":"kBpGpdSioO"},{"type":"tableRow","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"children":[{"type":"inlineCode","value":".argmin()/.argmax()","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"key":"fgVJb9GiDm"}],"key":"Z4mTbM9kvY"},{"type":"tableCell","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"children":[{"type":"text","value":"Index of extrema","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"key":"NtsWWDMTvZ"}],"key":"UxFsdX1taw"},{"type":"tableCell","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"children":[{"type":"inlineCode","value":"arr.argmax()","position":{"start":{"line":3400,"column":1},"end":{"line":3400,"column":1}},"key":"GiWfMIsjMv"}],"key":"eQpUaecoto"}],"key":"ISsvMdn222"},{"type":"tableRow","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"children":[{"type":"inlineCode","value":".sort()","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"key":"LqeEcmBMbP"}],"key":"yTCOZBcyTK"},{"type":"tableCell","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"children":[{"type":"text","value":"Sort in-place","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"key":"K1S873GV03"}],"key":"prnHAy1gO9"},{"type":"tableCell","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"children":[{"type":"inlineCode","value":"arr.sort()","position":{"start":{"line":3401,"column":1},"end":{"line":3401,"column":1}},"key":"C8Axj6cvMq"}],"key":"WfqgKE9Duz"}],"key":"slvSSlUwqN"},{"type":"tableRow","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"children":[{"type":"inlineCode","value":".copy()","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"key":"d7PDtaJ7p1"}],"key":"IgWWUSYG2I"},{"type":"tableCell","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"children":[{"type":"text","value":"Deep copy","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"key":"qW1f1McwrX"}],"key":"ud1v3NISmJ"},{"type":"tableCell","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"children":[{"type":"inlineCode","value":"arr.copy()","position":{"start":{"line":3402,"column":1},"end":{"line":3402,"column":1}},"key":"Cl1KPZ0dsx"}],"key":"wObix2vSDm"}],"key":"kDIcLgBnwN"}],"key":"rohCOVIGXf"},{"type":"heading","depth":3,"position":{"start":{"line":3404,"column":1},"end":{"line":3404,"column":1}},"children":[{"type":"text","value":"Mathematical Functions","position":{"start":{"line":3404,"column":1},"end":{"line":3404,"column":1}},"key":"ghNZUqouiw"}],"identifier":"mathematical-functions","label":"Mathematical Functions","html_id":"mathematical-functions","implicit":true,"key":"tScCf9Vf5x"},{"type":"table","position":{"start":{"line":3406,"column":1},"end":{"line":3417,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"children":[{"type":"text","value":"Function","position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"key":"xPooNcDky3"}],"key":"JhFCvzPaIz"},{"type":"tableCell","header":true,"position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"key":"idkxC3z2P2"}],"key":"HNJTeZJ5zp"},{"type":"tableCell","header":true,"position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":3406,"column":1},"end":{"line":3406,"column":1}},"key":"DE1GAb7R94"}],"key":"Gxs7bZaRwS"}],"key":"OTZmFTxIvX"},{"type":"tableRow","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"children":[{"type":"inlineCode","value":"np.add()","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"key":"S03T8OIOVr"}],"key":"MBqoXAFp2h"},{"type":"tableCell","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"children":[{"type":"text","value":"Addition","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"key":"B7m8Id8gwe"}],"key":"SVpL6VZ0pN"},{"type":"tableCell","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"children":[{"type":"inlineCode","value":"np.add(a, b)","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"key":"np2MH2BElx"},{"type":"text","value":" or ","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"key":"lCbUUcA3UU"},{"type":"inlineCode","value":"a + b","position":{"start":{"line":3408,"column":1},"end":{"line":3408,"column":1}},"key":"Nckbx7jA4Z"}],"key":"ZYyHZKaYpk"}],"key":"L1IShMhCbN"},{"type":"tableRow","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"children":[{"type":"inlineCode","value":"np.multiply()","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"key":"xQJTflGciL"}],"key":"kYFOMezeKY"},{"type":"tableCell","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"children":[{"type":"text","value":"Element-wise multiply","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"key":"elDrcOjP1C"}],"key":"JLCERh9wk1"},{"type":"tableCell","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"children":[{"type":"inlineCode","value":"np.multiply(a, b)","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"key":"fxKjUrJ35V"},{"type":"text","value":" or ","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"key":"nH1xB807z6"},{"type":"inlineCode","value":"a * b","position":{"start":{"line":3409,"column":1},"end":{"line":3409,"column":1}},"key":"l6CZs1Izft"}],"key":"ychGIAmaQK"}],"key":"yw275H4nlN"},{"type":"tableRow","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"children":[{"type":"inlineCode","value":"np.dot()","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"key":"zncCFfa6Eh"}],"key":"L7mOEF3hJV"},{"type":"tableCell","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"children":[{"type":"text","value":"Dot product","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"key":"NqFxpIw9KM"}],"key":"gUwZAG9cBC"},{"type":"tableCell","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"children":[{"type":"inlineCode","value":"np.dot(a, b)","position":{"start":{"line":3410,"column":1},"end":{"line":3410,"column":1}},"key":"KMcTUNLKmx"}],"key":"m0x6JUcvb9"}],"key":"pYuhBcIPPh"},{"type":"tableRow","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"children":[{"type":"inlineCode","value":"np.matmul()","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"key":"ovMvcvGPNx"}],"key":"eZVR05NZgO"},{"type":"tableCell","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"children":[{"type":"text","value":"Matrix multiply","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"key":"cz8LSObTO2"}],"key":"U0GL5K82Lx"},{"type":"tableCell","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"children":[{"type":"inlineCode","value":"np.matmul(a, b)","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"key":"q8MMNEYzAF"},{"type":"text","value":" or ","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"key":"dSDk0smqBV"},{"type":"inlineCode","value":"a @ b","position":{"start":{"line":3411,"column":1},"end":{"line":3411,"column":1}},"key":"Fz7dy5CLF7"}],"key":"GwXdJrUGUA"}],"key":"bfXnwUKzss"},{"type":"tableRow","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"children":[{"type":"inlineCode","value":"np.sqrt()","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"key":"r2aR7fmBDD"}],"key":"jiSPUyyQ5u"},{"type":"tableCell","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"children":[{"type":"text","value":"Square root","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"key":"D3jTO1veNe"}],"key":"ADcIuc9Wjn"},{"type":"tableCell","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"children":[{"type":"inlineCode","value":"np.sqrt(arr)","position":{"start":{"line":3412,"column":1},"end":{"line":3412,"column":1}},"key":"ucoY1FwriS"}],"key":"gdK5lEDJKr"}],"key":"f3pXXiBxE8"},{"type":"tableRow","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"children":[{"type":"inlineCode","value":"np.exp()","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"key":"ZiktxyyeON"}],"key":"tKk5kZwkWC"},{"type":"tableCell","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"children":[{"type":"text","value":"Exponential","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"key":"Mq3CK3itVj"}],"key":"Gzf3Badblv"},{"type":"tableCell","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"children":[{"type":"inlineCode","value":"np.exp(arr)","position":{"start":{"line":3413,"column":1},"end":{"line":3413,"column":1}},"key":"ynkNSDBoHU"}],"key":"bzfA5HtZHP"}],"key":"dWCe05Swwk"},{"type":"tableRow","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"children":[{"type":"inlineCode","value":"np.log()","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"key":"CIHDOfH2YH"}],"key":"fqz8yZCKTs"},{"type":"tableCell","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"children":[{"type":"text","value":"Natural log","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"key":"Tgvj2OaW7u"}],"key":"jcQDe3DSom"},{"type":"tableCell","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"children":[{"type":"inlineCode","value":"np.log(arr)","position":{"start":{"line":3414,"column":1},"end":{"line":3414,"column":1}},"key":"hgJOUM4N11"}],"key":"KigWAtT9Jh"}],"key":"RvXTQMPOU9"},{"type":"tableRow","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"children":[{"type":"inlineCode","value":"np.sin()/.cos()","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"key":"CN64FOmZEM"}],"key":"oi1kXU8bpV"},{"type":"tableCell","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"children":[{"type":"text","value":"Trigonometric","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"key":"gZks7DcTxf"}],"key":"Rj6N2PUXw7"},{"type":"tableCell","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"children":[{"type":"inlineCode","value":"np.sin(arr)","position":{"start":{"line":3415,"column":1},"end":{"line":3415,"column":1}},"key":"Phfn3YFPfY"}],"key":"PC7x1It01k"}],"key":"sXwnWV2tkO"},{"type":"tableRow","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"children":[{"type":"inlineCode","value":"np.abs()","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"key":"GfkyInNsDp"}],"key":"XO1MH6ISNy"},{"type":"tableCell","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"children":[{"type":"text","value":"Absolute value","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"key":"B5jbylgDiQ"}],"key":"zsabpzgTNx"},{"type":"tableCell","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"children":[{"type":"inlineCode","value":"np.abs(arr)","position":{"start":{"line":3416,"column":1},"end":{"line":3416,"column":1}},"key":"gfCiOH1qk5"}],"key":"BliYwuEkVC"}],"key":"MXVIHHK60C"},{"type":"tableRow","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"children":[{"type":"inlineCode","value":"np.round()","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"key":"GGKlvDBvWg"}],"key":"ADwKFdSgHk"},{"type":"tableCell","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"children":[{"type":"text","value":"Round to nearest","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"key":"CmGyXvjCr6"}],"key":"B0mtnO3h1o"},{"type":"tableCell","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"children":[{"type":"inlineCode","value":"np.round(arr, 2)","position":{"start":{"line":3417,"column":1},"end":{"line":3417,"column":1}},"key":"xV6JhMA1ui"}],"key":"gad4UvjujV"}],"key":"iFl67jOW04"}],"key":"ECw7K6cIQ0"},{"type":"heading","depth":3,"position":{"start":{"line":3419,"column":1},"end":{"line":3419,"column":1}},"children":[{"type":"text","value":"Broadcasting Rules Quick Reference","position":{"start":{"line":3419,"column":1},"end":{"line":3419,"column":1}},"key":"n9Se64NCCV"}],"identifier":"broadcasting-rules-quick-reference","label":"Broadcasting Rules Quick Reference","html_id":"broadcasting-rules-quick-reference-1","implicit":true,"key":"xbQHR5ldya"},{"type":"table","position":{"start":{"line":3421,"column":1},"end":{"line":3428,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"children":[{"type":"text","value":"Shape A","position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"key":"yXCwWKYruH"}],"key":"m19KX2yE2Z"},{"type":"tableCell","header":true,"position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"children":[{"type":"text","value":"Shape B","position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"key":"jUxSYh4Ahv"}],"key":"uk5j2NUje3"},{"type":"tableCell","header":true,"position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"children":[{"type":"text","value":"Result","position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"key":"FwkXBiazUG"}],"key":"g7XZcYxKI0"},{"type":"tableCell","header":true,"position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"children":[{"type":"text","value":"Rule Applied","position":{"start":{"line":3421,"column":1},"end":{"line":3421,"column":1}},"key":"DgzbwH6CMD"}],"key":"FN6FbFr81I"}],"key":"YjUNb2tlGc"},{"type":"tableRow","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"children":[{"type":"inlineCode","value":"(3,)","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"key":"MtLnKWip6q"}],"key":"sutrNwkvpG"},{"type":"tableCell","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"children":[{"type":"inlineCode","value":"()","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"key":"Uh59uWl4Ov"}],"key":"w9MyAwTOMZ"},{"type":"tableCell","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"children":[{"type":"inlineCode","value":"(3,)","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"key":"S31nm3PC7X"}],"key":"p4NYTYBBfE"},{"type":"tableCell","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"children":[{"type":"text","value":"Scalar broadcasts","position":{"start":{"line":3423,"column":1},"end":{"line":3423,"column":1}},"key":"Qib4C0Q7hh"}],"key":"nEivuxd7Tn"}],"key":"ppdyhGXveG"},{"type":"tableRow","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"key":"cKbaAW8Iyf"}],"key":"OIU02pCYPr"},{"type":"tableCell","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"children":[{"type":"inlineCode","value":"(4,)","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"key":"r3JRpKLPeS"}],"key":"YJsOL14oyp"},{"type":"tableCell","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"key":"sHWKZ933Jg"}],"key":"l4T9EHAgcu"},{"type":"tableCell","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"children":[{"type":"text","value":"1D broadcasts to rows","position":{"start":{"line":3424,"column":1},"end":{"line":3424,"column":1}},"key":"v2TbclLku7"}],"key":"i5VKWDhzCv"}],"key":"gLBIb0NCuS"},{"type":"tableRow","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"key":"CTuOoB2HTJ"}],"key":"mrv0W4OaNe"},{"type":"tableCell","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"children":[{"type":"inlineCode","value":"(3, 1)","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"key":"E2UXwg9aQR"}],"key":"Fq5gKzB3Kr"},{"type":"tableCell","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"key":"Zxn3OmbCdc"}],"key":"Bv4Shi7mTj"},{"type":"tableCell","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"children":[{"type":"text","value":"Column broadcasts","position":{"start":{"line":3425,"column":1},"end":{"line":3425,"column":1}},"key":"Go6Kg1zzwm"}],"key":"vGgrNuuE6N"}],"key":"RNzmTlWWME"},{"type":"tableRow","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"children":[{"type":"inlineCode","value":"(3, 1, 4)","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"key":"YGxrvoFPvY"}],"key":"jjlXaUJkzg"},{"type":"tableCell","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"children":[{"type":"inlineCode","value":"(1, 5, 4)","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"key":"KLStfg8xwf"}],"key":"Om1mYB3Uh4"},{"type":"tableCell","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"children":[{"type":"inlineCode","value":"(3, 5, 4)","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"key":"PZaLeeskwC"}],"key":"qKhxWtyaoJ"},{"type":"tableCell","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"children":[{"type":"text","value":"Both broadcast","position":{"start":{"line":3426,"column":1},"end":{"line":3426,"column":1}},"key":"N96OELX6Un"}],"key":"gu7hN3ObVu"}],"key":"erCiooAAHG"},{"type":"tableRow","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"key":"bAZ3sPp4uY"}],"key":"NZthullkzZ"},{"type":"tableCell","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"children":[{"type":"inlineCode","value":"(2, 3, 4)","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"key":"RJ9ZN8ADOW"}],"key":"P3d5z22Oai"},{"type":"tableCell","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"children":[{"type":"inlineCode","value":"(2, 3, 4)","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"key":"jWhgyFCtjn"}],"key":"U0tme0OXpe"},{"type":"tableCell","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"children":[{"type":"text","value":"Smaller adds dimensions","position":{"start":{"line":3427,"column":1},"end":{"line":3427,"column":1}},"key":"TrIp21YiWC"}],"key":"Ro5NrudIZG"}],"key":"woKBWzciNm"},{"type":"tableRow","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"children":[{"type":"inlineCode","value":"(3, 4)","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"key":"HloHYyGB5J"}],"key":"JjaabO7CnJ"},{"type":"tableCell","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"children":[{"type":"inlineCode","value":"(5, 4)","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"key":"CUjN0vNOss"}],"key":"IhUyoPFytw"},{"type":"tableCell","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"children":[{"type":"text","value":"Error!","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"key":"zTBnDcMSbI"}],"key":"z38ieuwRMT"},{"type":"tableCell","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"children":[{"type":"text","value":"Incompatible","position":{"start":{"line":3428,"column":1},"end":{"line":3428,"column":1}},"key":"DfGR9Za4Fm"}],"key":"kz1rmb0FKy"}],"key":"D7LfFJtTaQ"}],"key":"MYrTCfwEQ6"},{"type":"heading","depth":3,"position":{"start":{"line":3430,"column":1},"end":{"line":3430,"column":1}},"children":[{"type":"text","value":"Linear Algebra Functions","position":{"start":{"line":3430,"column":1},"end":{"line":3430,"column":1}},"key":"cWrYPNrFbD"}],"identifier":"linear-algebra-functions","label":"Linear Algebra Functions","html_id":"linear-algebra-functions","implicit":true,"key":"PgHekuCdjo"},{"type":"table","position":{"start":{"line":3432,"column":1},"end":{"line":3441,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"children":[{"type":"text","value":"Function","position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"key":"ukQ01YXo6v"}],"key":"aUlb8rD8wI"},{"type":"tableCell","header":true,"position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"key":"e8lPBqGqiB"}],"key":"mz0yRIEM3C"},{"type":"tableCell","header":true,"position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":3432,"column":1},"end":{"line":3432,"column":1}},"key":"Cxr6jvHe77"}],"key":"raeN2HVUsE"}],"key":"zeWfvezVFO"},{"type":"tableRow","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.inv()","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"key":"llPaYiIBJ4"}],"key":"bw03A7SIHG"},{"type":"tableCell","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"children":[{"type":"text","value":"Matrix inverse","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"key":"EGppGVaj61"}],"key":"rSUZenAUOM"},{"type":"tableCell","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.inv(A)","position":{"start":{"line":3434,"column":1},"end":{"line":3434,"column":1}},"key":"qAaSxr4Jh1"}],"key":"fw1U8FI9Bk"}],"key":"FloC2om6X3"},{"type":"tableRow","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.det()","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"key":"SbFZReKxWT"}],"key":"lkLmZXHI6J"},{"type":"tableCell","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"children":[{"type":"text","value":"Determinant","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"key":"gbklLLgzBV"}],"key":"orZsGYpKNK"},{"type":"tableCell","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.det(A)","position":{"start":{"line":3435,"column":1},"end":{"line":3435,"column":1}},"key":"t5niplxgj7"}],"key":"UobfNcF7n0"}],"key":"mzjEYCrt4X"},{"type":"tableRow","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.eig()","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"key":"LxdssUen18"}],"key":"wDQodcQA84"},{"type":"tableCell","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"children":[{"type":"text","value":"Eigenvalues/vectors","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"key":"KF7TiqZyyM"}],"key":"QkHh5U6c7J"},{"type":"tableCell","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"children":[{"type":"inlineCode","value":"vals, vecs = np.linalg.eig(A)","position":{"start":{"line":3436,"column":1},"end":{"line":3436,"column":1}},"key":"x1vgzSsTGy"}],"key":"nBCR4NyYgI"}],"key":"NO9bXb6zTw"},{"type":"tableRow","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.solve()","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"key":"chl1QfBDoX"}],"key":"orZmoh2ffs"},{"type":"tableCell","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"children":[{"type":"text","value":"Solve Ax = b","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"key":"ARMq9C0yqu"}],"key":"FWw8glh0b8"},{"type":"tableCell","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.solve(A, b)","position":{"start":{"line":3437,"column":1},"end":{"line":3437,"column":1}},"key":"f5k0xlpKlT"}],"key":"h1uVeAw8aP"}],"key":"z6E6OuFZ28"},{"type":"tableRow","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.lstsq()","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"key":"Wh5GBme034"}],"key":"ybq72JIuJD"},{"type":"tableCell","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"children":[{"type":"text","value":"Least squares","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"key":"Kw2Mpylk8M"}],"key":"UUUocJ1m9x"},{"type":"tableCell","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.lstsq(A, b)","position":{"start":{"line":3438,"column":1},"end":{"line":3438,"column":1}},"key":"POOYr1AAjE"}],"key":"RtWRxIPVGI"}],"key":"WuD4o9ODzA"},{"type":"tableRow","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.norm()","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"key":"VA2ZCGtg7l"}],"key":"SZUKO7Xdmx"},{"type":"tableCell","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"children":[{"type":"text","value":"Matrix/vector norm","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"key":"QgkDG79v1F"}],"key":"n66Gtz2Tf5"},{"type":"tableCell","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.norm(A)","position":{"start":{"line":3439,"column":1},"end":{"line":3439,"column":1}},"key":"QadmGOppBF"}],"key":"HeGhgUqyCH"}],"key":"C2EjOLmo0X"},{"type":"tableRow","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.svd()","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"key":"LtfpcIeV1c"}],"key":"czVCMqOc23"},{"type":"tableCell","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"children":[{"type":"text","value":"Singular value decomp","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"key":"YUaluGExBY"}],"key":"fpvYgEAw0v"},{"type":"tableCell","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"children":[{"type":"inlineCode","value":"U, s, Vh = np.linalg.svd(A)","position":{"start":{"line":3440,"column":1},"end":{"line":3440,"column":1}},"key":"aNgc1sdV8S"}],"key":"tHhGgeUkuM"}],"key":"cZUK8yFncp"},{"type":"tableRow","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"children":[{"type":"inlineCode","value":"np.linalg.qr()","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"key":"tkQJxJA0ub"}],"key":"dmzE0AXjZI"},{"type":"tableCell","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"children":[{"type":"text","value":"QR decomposition","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"key":"fbkoFLjIql"}],"key":"J3rZbP7F51"},{"type":"tableCell","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"children":[{"type":"inlineCode","value":"Q, R = np.linalg.qr(A)","position":{"start":{"line":3441,"column":1},"end":{"line":3441,"column":1}},"key":"PYUVbAoCIU"}],"key":"oGRGmHhgMt"}],"key":"JxS5a2WYYg"}],"key":"Qwyrbn7yHa"},{"type":"heading","depth":2,"position":{"start":{"line":3443,"column":1},"end":{"line":3443,"column":1}},"children":[{"type":"text","value":"Common Patterns Reference","position":{"start":{"line":3443,"column":1},"end":{"line":3443,"column":1}},"key":"ltmliZmf4i"}],"identifier":"common-patterns-reference","label":"Common Patterns Reference","html_id":"common-patterns-reference","implicit":true,"key":"veaLkTei0O"},{"type":"heading","depth":3,"position":{"start":{"line":3445,"column":1},"end":{"line":3445,"column":1}},"children":[{"type":"text","value":"Pattern: Normalize Data","position":{"start":{"line":3445,"column":1},"end":{"line":3445,"column":1}},"key":"vCjUtuxyAw"}],"identifier":"pattern-normalize-data","label":"Pattern: Normalize Data","html_id":"pattern-normalize-data","implicit":true,"key":"skiQCdrmpU"},{"type":"code","lang":"python","value":"# Min-max normalization to [0, 1]\nnormalized = (data - data.min()) / (data.max() - data.min())\n\n# Z-score normalization (standardization)\nstandardized = (data - data.mean()) / data.std()\n\n# Normalize each column independently\ncol_normalized = (data - data.mean(axis=0)) / data.std(axis=0)","position":{"start":{"line":3446,"column":1},"end":{"line":3455,"column":1}},"key":"K9E8qxNDOU"},{"type":"heading","depth":3,"position":{"start":{"line":3457,"column":1},"end":{"line":3457,"column":1}},"children":[{"type":"text","value":"Pattern: Find Indices","position":{"start":{"line":3457,"column":1},"end":{"line":3457,"column":1}},"key":"Dd4T1sm9nf"}],"identifier":"pattern-find-indices","label":"Pattern: Find Indices","html_id":"pattern-find-indices","implicit":true,"key":"N68kG0oZuz"},{"type":"code","lang":"python","value":"# Find indices where condition is true\nindices = np.where(arr > threshold)\n\n# Find first/last occurrence\nfirst_idx = np.argmax(arr > threshold)  # First True\nlast_idx = len(arr) - np.argmax((arr > threshold)[::-1]) - 1\n\n# Find N largest/smallest indices\nn_largest_idx = np.argpartition(arr, -n)[-n:]\nn_smallest_idx = np.argpartition(arr, n)[:n]","position":{"start":{"line":3458,"column":1},"end":{"line":3469,"column":1}},"key":"tJmPICjOW1"},{"type":"heading","depth":3,"position":{"start":{"line":3471,"column":1},"end":{"line":3471,"column":1}},"children":[{"type":"text","value":"Pattern: Sliding Window","position":{"start":{"line":3471,"column":1},"end":{"line":3471,"column":1}},"key":"oJjiXjGJIb"}],"identifier":"pattern-sliding-window","label":"Pattern: Sliding Window","html_id":"pattern-sliding-window","implicit":true,"key":"f4ENLCpW2h"},{"type":"code","lang":"python","value":"# Using stride tricks for sliding windows\nfrom numpy.lib.stride_tricks import sliding_window_view\n\n# Sliding window of size 3\nwindows = sliding_window_view(arr, window_shape=3)\n\n# Manual approach with as_strided (advanced)\nfrom numpy.lib.stride_tricks import as_strided\nwindow_size = 3\nshape = (len(arr) - window_size + 1, window_size)\nstrides = (arr.strides[0], arr.strides[0])\nwindows = as_strided(arr, shape=shape, strides=strides)","position":{"start":{"line":3472,"column":1},"end":{"line":3485,"column":1}},"key":"NBtSbejnwr"},{"type":"heading","depth":3,"position":{"start":{"line":3487,"column":1},"end":{"line":3487,"column":1}},"children":[{"type":"text","value":"Pattern: Batch Processing","position":{"start":{"line":3487,"column":1},"end":{"line":3487,"column":1}},"key":"FKalMWXBKI"}],"identifier":"pattern-batch-processing","label":"Pattern: Batch Processing","html_id":"pattern-batch-processing","implicit":true,"key":"SoW0nFqWJu"},{"type":"code","lang":"python","value":"# Process large array in batches\nbatch_size = 1000\nn_samples = len(data)\n\nfor start_idx in range(0, n_samples, batch_size):\n    end_idx = min(start_idx + batch_size, n_samples)\n    batch = data[start_idx:end_idx]\n    # Process batch\n    result[start_idx:end_idx] = process(batch)","position":{"start":{"line":3488,"column":1},"end":{"line":3498,"column":1}},"key":"R9UgIz8v1X"},{"type":"heading","depth":2,"position":{"start":{"line":3500,"column":1},"end":{"line":3500,"column":1}},"children":[{"type":"text","value":"Debugging Checklist","position":{"start":{"line":3500,"column":1},"end":{"line":3500,"column":1}},"key":"k4sMEgtijp"}],"identifier":"debugging-checklist","label":"Debugging Checklist","html_id":"debugging-checklist-1","implicit":true,"key":"oeD7X8Bm3t"},{"type":"paragraph","position":{"start":{"line":3502,"column":1},"end":{"line":3502,"column":1}},"children":[{"type":"text","value":"When NumPy code doesn’t work as expected, check:","position":{"start":{"line":3502,"column":1},"end":{"line":3502,"column":1}},"key":"hOVMjKJCUK"}],"key":"Joj3oTpqw3"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":3504,"column":1},"end":{"line":3535,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3504,"column":1},"end":{"line":3508,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3504,"column":1},"end":{"line":3504,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3504,"column":1},"end":{"line":3504,"column":1}},"children":[{"type":"text","value":"Shape mismatch","position":{"start":{"line":3504,"column":1},"end":{"line":3504,"column":1}},"key":"YfYoMAaKS0"}],"key":"J0YgMFIrv4"},{"type":"text","value":": Print shapes of all arrays","position":{"start":{"line":3504,"column":1},"end":{"line":3504,"column":1}},"key":"O1E1OFNWbU"}],"key":"EOifVnpQnR"},{"type":"code","lang":"python","value":"print(f\"A shape: {A.shape}, B shape: {B.shape}\")","position":{"start":{"line":3505,"column":1},"end":{"line":3507,"column":1}},"key":"fejAdyVzFB"}],"key":"A8oBeoIm4D"},{"type":"listItem","spread":true,"position":{"start":{"line":3509,"column":1},"end":{"line":3514,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3509,"column":1},"end":{"line":3509,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3509,"column":1},"end":{"line":3509,"column":1}},"children":[{"type":"text","value":"Data type issues","position":{"start":{"line":3509,"column":1},"end":{"line":3509,"column":1}},"key":"Dj8N5YSyiS"}],"key":"HeVzPQlBk1"},{"type":"text","value":": Check and convert if needed","position":{"start":{"line":3509,"column":1},"end":{"line":3509,"column":1}},"key":"y4Ws5b45pc"}],"key":"zCixurz786"},{"type":"code","lang":"python","value":"print(f\"dtype: {arr.dtype}\")\narr = arr.astype(np.float64)","position":{"start":{"line":3510,"column":1},"end":{"line":3513,"column":1}},"key":"dC5DRyxNBZ"}],"key":"wsAl9p0fWD"},{"type":"listItem","spread":true,"position":{"start":{"line":3515,"column":1},"end":{"line":3519,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3515,"column":1},"end":{"line":3515,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3515,"column":1},"end":{"line":3515,"column":1}},"children":[{"type":"text","value":"View vs copy","position":{"start":{"line":3515,"column":1},"end":{"line":3515,"column":1}},"key":"oI6JiWEwnV"}],"key":"bXU76bEkQg"},{"type":"text","value":": Check if modification affects original","position":{"start":{"line":3515,"column":1},"end":{"line":3515,"column":1}},"key":"nkCCw2Fajc"}],"key":"lFpwC6gMkY"},{"type":"code","lang":"python","value":"print(f\"Is view: {arr.base is not None}\")","position":{"start":{"line":3516,"column":1},"end":{"line":3518,"column":1}},"key":"DNGz6ixyfL"}],"key":"duD1hUKk9c"},{"type":"listItem","spread":true,"position":{"start":{"line":3520,"column":1},"end":{"line":3524,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3520,"column":1},"end":{"line":3520,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3520,"column":1},"end":{"line":3520,"column":1}},"children":[{"type":"text","value":"Broadcasting","position":{"start":{"line":3520,"column":1},"end":{"line":3520,"column":1}},"key":"hAuRUv2wQ3"}],"key":"LXBOvwRCRA"},{"type":"text","value":": Verify broadcast behavior","position":{"start":{"line":3520,"column":1},"end":{"line":3520,"column":1}},"key":"IWr5hAYrsE"}],"key":"Le2JOaXLPE"},{"type":"code","lang":"python","value":"result_shape = np.broadcast_shapes(A.shape, B.shape)","position":{"start":{"line":3521,"column":1},"end":{"line":3523,"column":1}},"key":"NKsqWeBY4b"}],"key":"Zn2Fxf29Rv"},{"type":"listItem","spread":true,"position":{"start":{"line":3525,"column":1},"end":{"line":3529,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3525,"column":1},"end":{"line":3525,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3525,"column":1},"end":{"line":3525,"column":1}},"children":[{"type":"text","value":"Memory layout","position":{"start":{"line":3525,"column":1},"end":{"line":3525,"column":1}},"key":"JmpAfkrGB3"}],"key":"nBpo2rws8E"},{"type":"text","value":": Check for performance issues","position":{"start":{"line":3525,"column":1},"end":{"line":3525,"column":1}},"key":"XJGYtXUA47"}],"key":"rsPOUEvwpN"},{"type":"code","lang":"python","value":"print(f\"C-contiguous: {arr.flags['C_CONTIGUOUS']}\")","position":{"start":{"line":3526,"column":1},"end":{"line":3528,"column":1}},"key":"lTE3xEagG4"}],"key":"e06zDXn0Hg"},{"type":"listItem","spread":true,"position":{"start":{"line":3530,"column":1},"end":{"line":3535,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":3530,"column":1},"end":{"line":3530,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3530,"column":1},"end":{"line":3530,"column":1}},"children":[{"type":"text","value":"NaN/Inf values","position":{"start":{"line":3530,"column":1},"end":{"line":3530,"column":1}},"key":"X6Jfxn4il1"}],"key":"dubfS37oMI"},{"type":"text","value":": Check for numerical issues","position":{"start":{"line":3530,"column":1},"end":{"line":3530,"column":1}},"key":"uDi4T6etPi"}],"key":"ZRcdrBMdzE"},{"type":"code","lang":"python","value":"print(f\"Has NaN: {np.isnan(arr).any()}\")\nprint(f\"Has Inf: {np.isinf(arr).any()}\")","position":{"start":{"line":3531,"column":1},"end":{"line":3534,"column":1}},"key":"jvcTM5QXKq"}],"key":"VtUQzbXvf9"}],"key":"jmvsDfymfl"},{"type":"heading","depth":2,"position":{"start":{"line":3536,"column":1},"end":{"line":3536,"column":1}},"children":[{"type":"text","value":"Further Resources","position":{"start":{"line":3536,"column":1},"end":{"line":3536,"column":1}},"key":"eloJBv8gwv"}],"identifier":"further-resources","label":"Further Resources","html_id":"further-resources-1","implicit":true,"key":"xDEUFjzRuv"},{"type":"heading","depth":3,"position":{"start":{"line":3538,"column":1},"end":{"line":3538,"column":1}},"children":[{"type":"text","value":"Official Documentation","position":{"start":{"line":3538,"column":1},"end":{"line":3538,"column":1}},"key":"H8Re8kiPPn"}],"identifier":"official-documentation","label":"Official Documentation","html_id":"official-documentation","implicit":true,"key":"kl5EoSdmun"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3539,"column":1},"end":{"line":3542,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3539,"column":1},"end":{"line":3539,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/user/index.html","position":{"start":{"line":3539,"column":1},"end":{"line":3539,"column":1}},"children":[{"type":"text","value":"NumPy User Guide","position":{"start":{"line":3539,"column":1},"end":{"line":3539,"column":1}},"key":"QCuxFVy9sH"}],"urlSource":"https://numpy.org/doc/stable/user/index.html","key":"aMn6UiWl8j"},{"type":"text","value":" - Comprehensive user guide","position":{"start":{"line":3539,"column":1},"end":{"line":3539,"column":1}},"key":"jPf00sbpEN"}],"key":"ZkGMfAifKR"},{"type":"listItem","spread":true,"position":{"start":{"line":3540,"column":1},"end":{"line":3540,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/reference/index.html","position":{"start":{"line":3540,"column":1},"end":{"line":3540,"column":1}},"children":[{"type":"text","value":"NumPy Reference","position":{"start":{"line":3540,"column":1},"end":{"line":3540,"column":1}},"key":"jlJA9DwKVU"}],"urlSource":"https://numpy.org/doc/stable/reference/index.html","key":"vrjf9EqYjZ"},{"type":"text","value":" - Complete API reference","position":{"start":{"line":3540,"column":1},"end":{"line":3540,"column":1}},"key":"HqiVkhgBLL"}],"key":"hGuBEs1X53"},{"type":"listItem","spread":true,"position":{"start":{"line":3541,"column":1},"end":{"line":3542,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/user/numpy-for-matlab-users.html","position":{"start":{"line":3541,"column":1},"end":{"line":3541,"column":1}},"children":[{"type":"text","value":"NumPy for MATLAB users","position":{"start":{"line":3541,"column":1},"end":{"line":3541,"column":1}},"key":"ypWefNLINP"}],"urlSource":"https://numpy.org/doc/stable/user/numpy-for-matlab-users.html","key":"UZ3qUvubCT"},{"type":"text","value":" - Transition guide","position":{"start":{"line":3541,"column":1},"end":{"line":3541,"column":1}},"key":"BSY2V6OAGX"}],"key":"opSLtpqaC8"}],"key":"b4ORLDRZ7p"},{"type":"heading","depth":3,"position":{"start":{"line":3543,"column":1},"end":{"line":3543,"column":1}},"children":[{"type":"text","value":"Advanced Topics","position":{"start":{"line":3543,"column":1},"end":{"line":3543,"column":1}},"key":"TcGlD8d1Oi"}],"identifier":"advanced-topics","label":"Advanced Topics","html_id":"advanced-topics","implicit":true,"key":"dfIeVBDDtS"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3544,"column":1},"end":{"line":3547,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3544,"column":1},"end":{"line":3544,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/reference/internals.html","position":{"start":{"line":3544,"column":1},"end":{"line":3544,"column":1}},"children":[{"type":"text","value":"NumPy’s internals","position":{"start":{"line":3544,"column":1},"end":{"line":3544,"column":1}},"key":"FnAOyQJmHL"}],"urlSource":"https://numpy.org/doc/stable/reference/internals.html","key":"lMbWj9syE4"},{"type":"text","value":" - How NumPy works under the hood","position":{"start":{"line":3544,"column":1},"end":{"line":3544,"column":1}},"key":"Ab2SbDKAPZ"}],"key":"ABwLjkxfvZ"},{"type":"listItem","spread":true,"position":{"start":{"line":3545,"column":1},"end":{"line":3545,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/reference/arrays.interface.html","position":{"start":{"line":3545,"column":1},"end":{"line":3545,"column":1}},"children":[{"type":"text","value":"Array interface","position":{"start":{"line":3545,"column":1},"end":{"line":3545,"column":1}},"key":"JNA7ZibzB7"}],"urlSource":"https://numpy.org/doc/stable/reference/arrays.interface.html","key":"p2m4sd8xPt"},{"type":"text","value":" - For creating NumPy-compatible objects","position":{"start":{"line":3545,"column":1},"end":{"line":3545,"column":1}},"key":"lft45q55xv"}],"key":"wD4LVNpFlE"},{"type":"listItem","spread":true,"position":{"start":{"line":3546,"column":1},"end":{"line":3547,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/reference/c-api/index.html","position":{"start":{"line":3546,"column":1},"end":{"line":3546,"column":1}},"children":[{"type":"text","value":"C-API","position":{"start":{"line":3546,"column":1},"end":{"line":3546,"column":1}},"key":"qV08QVlXB9"}],"urlSource":"https://numpy.org/doc/stable/reference/c-api/index.html","key":"JbQattKybE"},{"type":"text","value":" - For extending NumPy with C","position":{"start":{"line":3546,"column":1},"end":{"line":3546,"column":1}},"key":"ZPqT7v4h9p"}],"key":"XSBwvjWY3T"}],"key":"ptd9ZC1eAe"},{"type":"heading","depth":3,"position":{"start":{"line":3548,"column":1},"end":{"line":3548,"column":1}},"children":[{"type":"text","value":"Performance Resources","position":{"start":{"line":3548,"column":1},"end":{"line":3548,"column":1}},"key":"egFmcgErmh"}],"identifier":"performance-resources","label":"Performance Resources","html_id":"performance-resources","implicit":true,"key":"kB6CQqIQeZ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3549,"column":1},"end":{"line":3551,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3549,"column":1},"end":{"line":3549,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/user/c-info.how-to-extend.html","position":{"start":{"line":3549,"column":1},"end":{"line":3549,"column":1}},"children":[{"type":"text","value":"Performance tips","position":{"start":{"line":3549,"column":1},"end":{"line":3549,"column":1}},"key":"SNjxLp6teE"}],"urlSource":"https://numpy.org/doc/stable/user/c-info.how-to-extend.html","key":"mM9Eujq5Jl"},{"type":"text","value":" - Official optimization guide","position":{"start":{"line":3549,"column":1},"end":{"line":3549,"column":1}},"key":"haoGvfFE0J"}],"key":"bexslkow28"},{"type":"listItem","spread":true,"position":{"start":{"line":3550,"column":1},"end":{"line":3551,"column":1}},"children":[{"type":"link","url":"https://numpy.org/doc/stable/reference/arrays.ndarray.html#internal-memory-layout-of-an-ndarray","position":{"start":{"line":3550,"column":1},"end":{"line":3550,"column":1}},"children":[{"type":"text","value":"Memory layout","position":{"start":{"line":3550,"column":1},"end":{"line":3550,"column":1}},"key":"mALoAtJOzQ"}],"urlSource":"https://numpy.org/doc/stable/reference/arrays.ndarray.html#internal-memory-layout-of-an-ndarray","key":"q3izS1PkOR"},{"type":"text","value":" - Understanding strides and memory","position":{"start":{"line":3550,"column":1},"end":{"line":3550,"column":1}},"key":"b1xXrr2ENF"}],"key":"XxvSupjSJH"}],"key":"MulyV8R8RH"},{"type":"heading","depth":2,"position":{"start":{"line":3552,"column":1},"end":{"line":3552,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":3552,"column":1},"end":{"line":3552,"column":1}},"key":"YMCZBPYN5s"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview-1","implicit":true,"key":"LbLPNSZAmy"},{"type":"paragraph","position":{"start":{"line":3554,"column":1},"end":{"line":3554,"column":1}},"children":[{"type":"text","value":"With NumPy mastery achieved, Chapter 8 introduces Matplotlib for visualization. You’ll discover how Matplotlib’s object-oriented design (building on Chapter 6) works seamlessly with NumPy arrays. You’ll learn to create publication-quality figures, from simple line plots to complex multi-panel visualizations, understanding how every plot element is an object you can customize.","position":{"start":{"line":3554,"column":1},"end":{"line":3554,"column":1}},"key":"jcFjBekuvG"}],"key":"LPixOuM1mR"},{"type":"paragraph","position":{"start":{"line":3556,"column":1},"end":{"line":3556,"column":1}},"children":[{"type":"text","value":"The NumPy-Matplotlib connection is fundamental: every data point you plot is a NumPy array, every image you display is a NumPy array, and every transformation you apply uses NumPy operations. Understanding NumPy deeply means you can manipulate plot data directly, create custom colormaps as arrays, and even implement your own visualization algorithms.","position":{"start":{"line":3556,"column":1},"end":{"line":3556,"column":1}},"key":"EWjHmxrelD"}],"key":"nm30FtNFhL"},{"type":"paragraph","position":{"start":{"line":3558,"column":1},"end":{"line":3558,"column":1}},"children":[{"type":"text","value":"Get ready to make your data sing through visualization!","position":{"start":{"line":3558,"column":1},"end":{"line":3558,"column":1}},"key":"kJubTmjFVU"}],"key":"PB9EAuIMsG"}],"key":"zhX8d3GIXd"}],"key":"WwoXbhiSgg"},"references":{"cite":{"order":[],"data":{}}}}