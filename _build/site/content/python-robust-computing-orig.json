{"version":2,"kind":"Article","sha256":"1a7d1d499235b4c4ac399dd191d0ebfc32dc30c96c6123949aabbe9a8aec0286","slug":"python-robust-computing-orig","location":"/03-scientific-computing-with-python/02-scientific-computing-core/09-python-robust-computing-ORIG.md","dependencies":[],"frontmatter":{"title":"Chapter 9: Robust Computing Fundamentals - Error Handling and Best Practices","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/02-scientific-computing-core/09-python-robust-computing-ORIG.md","exports":[{"format":"md","filename":"09-python-robust-computing-ORIG.md","url":"/09-python-robust-com-9bfc2b165edc42234aa9b9c925ed0dad.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TyY2QuB6o4"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"iIWz0jYvlj"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"c7OFhyI1aZ"}],"key":"iU7uf5uSTe"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Read and interpret Python ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Ra0mf97QM7"},{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"error messages","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ydgbfr1ETN"}],"key":"agWEdCdtV7"},{"type":"text","value":" to diagnose problems efficiently","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Wd3xgMnU5X"}],"key":"T3ZQJ64gc7"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Write ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"znalwVhsdJ"},{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"try/except blocks","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"UFhOJFutiL"}],"key":"dmL9Y3hh38"},{"type":"text","value":" to handle errors gracefully","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qYwR4C5Vgi"}],"key":"uHRu6qZyvT"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Validate inputs to prevent errors before they occur","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"jUfT9ur3z2"}],"key":"w1LUuvg7Q8"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"uGlTTHHOOo"},{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"assertions","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"FBBbJMProJ"}],"key":"mqoZsQNtky"},{"type":"text","value":" to document and verify assumptions","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"CIaQQgwBJ0"}],"key":"wzQqhJ8aZk"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Replace print statements with proper ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"JqVkbxAfSq"},{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"logging","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"idpoEbB6Yn"}],"key":"IwQo8TDzkR"}],"key":"LEOK2GAxJv"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Write simple ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"TID3U7MykR"},{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"tests","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Vcl5ULgguI"}],"key":"Q6C3KvVB66"},{"type":"text","value":" to verify your functions work correctly","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"oQPDWtDmUB"}],"key":"BRL2ToIa1f"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Debug code systematically using proven strategies","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"bkKjtDmhLb"}],"key":"w4x4MOOZp5"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Understand how errors propagate through scientific calculations","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"AhpCR9HfiY"}],"key":"S3qJlPduUN"}],"key":"YIygUXrf7r"},{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"mFtnh8QMxF"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check","implicit":true,"key":"nyUGPOJLgJ"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"DygHHhQUlX"}],"key":"cuvwUc9BII"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"✓ Write and call functions with parameters (Chapter 5)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"uTrupdsY5R"}],"key":"H54hLOSVDx"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"✓ Work with NumPy arrays (Chapter 7)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"tEArdghWwq"}],"key":"X5yUvmd17K"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"✓ Use if/else statements and loops (Chapter 3)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"NQ6dhBmMGN"}],"key":"VATLQpowel"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"✓ Work with lists and dictionaries (Chapter 4)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"DQ7LMHklah"}],"key":"gzF4zKXUFp"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"✓ Create simple plots with Matplotlib (Chapter 8)","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"n0QDf5ze1W"}],"key":"o1fVHGdvTc"}],"key":"TqssLQ0yWM"},{"type":"heading","depth":2,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"HMlh9mXkUu"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview","implicit":true,"key":"agMxUQtwLM"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Your code will fail. This isn’t pessimism—it’s reality. The difference between beginners and professionals isn’t that professionals write perfect code. It’s that professionals write code that fails gracefully, tells them what went wrong, and helps them fix problems quickly.","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"j2ohQOwaSG"}],"key":"NlP0OQrIRo"},{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Remember in Chapter 5 when we wrote this simple function?","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"uZ3umhmCNS"}],"key":"WjPERdmZsR"},{"type":"code","lang":"python","value":"def calculate_mean(values):\n    return sum(values) / len(values)","position":{"start":{"line":30,"column":1},"end":{"line":33,"column":1}},"key":"r1XWtR1Muh"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"This optimistic code assumes values is never empty, always contains numbers, and never has missing data. In Chapter 7, we processed NumPy arrays without checking for ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"SnDSowHuv4"},{"type":"strong","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"NaN","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"XqJeRv9qNT"}],"key":"lwZRRl5KNY"},{"type":"text","value":" (Not a Number) values. In Chapter 8, we plotted data without verifying it was plottable. Real scientific data breaks all these assumptions.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"GtyVH6gDYQ"}],"key":"ashMwSRxoE"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"This chapter transforms that naive code into ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"dqWdc3M730"},{"type":"strong","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"robust code","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"mFIRqQlSW6"}],"key":"HSChrUrkLp"},{"type":"text","value":"—code that handles unexpected situations gracefully rather than crashing. You’ll learn techniques that prevented disasters like the Mars Climate Orbiter loss and that catch the kinds of errors that have led to retracted papers. By the end, your functions will validate inputs, your scripts will log their progress, and your errors will guide rather than frustrate you.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"V6LUNOD8bZ"}],"key":"j7ywK4Wv3l"},{"type":"heading","depth":2,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"9.1 Understanding Error Messages","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"f07EEfciFi"}],"identifier":"id-9-1-understanding-error-messages","label":"9.1 Understanding Error Messages","html_id":"id-9-1-understanding-error-messages","implicit":true,"key":"eU2it93GOm"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"strong","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Error messages","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"FN9rysVDXY"}],"key":"YdcdxrsQ79"},{"type":"text","value":" are structured reports that Python generates when something goes wrong during code execution. They tell you exactly what went wrong and where. Learning to read them transforms debugging from guesswork into detective work.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"iv0v4b9IbY"}],"key":"ed8iFFI2fu"},{"type":"heading","depth":3,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Your First Error Message","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"S4u36IbhMW"}],"identifier":"your-first-error-message","label":"Your First Error Message","html_id":"your-first-error-message","implicit":true,"key":"YMcStI6Acj"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"Let’s start with a simple error and learn to decode it:","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"G9oXtdpYzz"}],"key":"cQHXI8NAEB"},{"type":"code","lang":"python","value":"# Callback to Chapter 5: Remember our temperature conversion?\ndef celsius_to_fahrenheit(celsius):\n    return celsuis * 9/5 + 32  # Typo: 'celsuis' not 'celsius'\n\n# Try to use it\ntemp = 25\nresult = celsius_to_fahrenheit(temp)","position":{"start":{"line":47,"column":1},"end":{"line":55,"column":1}},"key":"x5eGkBUwO6"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"This produces an error message with three critical parts:","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"Aap1hJ6ope"}],"key":"mntwgPzvmM"},{"type":"code","lang":"","value":"Traceback (most recent call last):\n  File \"example.py\", line 6, in <module>\n    result = celsius_to_fahrenheit(temp)\n  File \"example.py\", line 2, in celsius_to_fahrenheit\n    return celsuis * 9/5 + 32\nNameError: name 'celsuis' is not defined","position":{"start":{"line":59,"column":1},"end":{"line":66,"column":1}},"key":"DdNMc0G6c1"},{"type":"paragraph","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"children":[{"type":"strong","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"children":[{"type":"text","value":"Read error messages from bottom to top:","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"key":"lhDu9Tl6KP"}],"key":"PeTkEfATAj"}],"key":"usjwfMByJX"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":70,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":70,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"children":[{"type":"strong","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"children":[{"type":"text","value":"Error Type","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"yY1pXUN2qG"}],"key":"U9tP4exUcV"},{"type":"text","value":" (bottom line): ","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"wuoiROfxH8"},{"type":"inlineCode","value":"NameError","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"Poj6IyOu3r"},{"type":"text","value":" tells you the category of problem. A ","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"AhRU5LYOkZ"},{"type":"strong","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"children":[{"type":"text","value":"NameError","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"m0XWEVfPQr"}],"key":"hBU0jJwT5e"},{"type":"text","value":" specifically means Python encountered a variable name it doesn’t recognize.","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"LV3tvOL5hb"}],"key":"K3qzyxIcjj"}],"key":"u0YSYB5b5F"},{"type":"listItem","spread":true,"position":{"start":{"line":72,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"strong","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"Error Message","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"W1moYicjIp"}],"key":"dFFLXPVcAZ"},{"type":"text","value":": “name ‘celsuis’ is not defined” explains what’s wrong. Python is looking for a variable called ‘celsuis’ but can’t find it in the current ","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"PuE9BNvklc"},{"type":"strong","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"namespace","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"inl9xbt5ia"}],"key":"o4GwBBpart"},{"type":"text","value":" (the collection of currently defined variables).","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"wexPFIgbfY"}],"key":"PUIeikJTiM"}],"key":"mlRNUqEsoc"},{"type":"listItem","spread":true,"position":{"start":{"line":74,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"strong","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Location","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"EgvVkfGWUo"}],"key":"c6YlH1Y1on"},{"type":"text","value":" (lines above): Shows exactly where the error occurred. The error happened in the file “example.py” on line 2, inside the function ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"wOcuTlm1lV"},{"type":"inlineCode","value":"celsius_to_fahrenheit","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"q6A1WK1gjt"},{"type":"text","value":".","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"PPhNOznUod"}],"key":"IiXj1AlvNt"}],"key":"RUC6Zl78db"},{"type":"listItem","spread":true,"position":{"start":{"line":76,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"strong","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"Call Stack","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"ojPbXTQxBw"}],"key":"ENIXnPZD3d"},{"type":"text","value":" (traceback): The ","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"AfcAE5XeUd"},{"type":"strong","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"traceback","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"I1e3L66ZzA"}],"key":"QLKQoBzr9e"},{"type":"text","value":" shows the sequence of function calls that led to the error. Think of it like breadcrumbs showing Python’s path through your code. Each level shows which function called the next, helping you understand how the program reached the error.","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"eSpQ23kCBD"}],"key":"Cbr57tvzYt"}],"key":"WxlOuJzrTL"}],"key":"P3zIWS8rFI"},{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"This systematic reading approach works for any error. The fix here is obvious—we typed ‘celsuis’ instead of ‘celsius’.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"Wvf6RsBV5O"}],"key":"yeeH4MduJc"},{"type":"heading","depth":3,"position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Common Error Types","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Cu4H3yowVW"}],"identifier":"common-error-types","label":"Common Error Types","html_id":"common-error-types","implicit":true,"key":"VkTBl0ZSXR"},{"type":"paragraph","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"Let’s understand the four ","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"XxLiJ0NR1u"},{"type":"strong","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"exception types","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"PT63QS6XwR"}],"key":"x7PmqamSkC"},{"type":"text","value":" you’ll encounter most often. An ","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"BfpFw1udby"},{"type":"strong","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"exception","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"jphAccI1MG"}],"key":"KlxQrdubxn"},{"type":"text","value":" is Python’s way of signaling that something exceptional (unusual) has happened that prevents normal execution:","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"LcDYzpuj2I"}],"key":"YXegtZFLYR"},{"type":"code","lang":"python","value":"# TypeError: Wrong type for operation\ntext = \"5\"\nresult = text * 2      # Works! Gives \"55\" (string repetition)\nresult = text + 2      # TypeError! Can't add string and number\n\n# Why this matters: Reading data from files often gives strings\n# when you expect numbers, causing TypeErrors in calculations","position":{"start":{"line":84,"column":1},"end":{"line":92,"column":1}},"key":"HkjekGkJI7"},{"type":"paragraph","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"children":[{"type":"text","value":"A ","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"uCzwpQgfpm"},{"type":"strong","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"children":[{"type":"text","value":"TypeError","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"KWXYQ1EkZB"}],"key":"h67tL9WTNK"},{"type":"text","value":" occurs when you try to perform an operation on a value of the wrong ","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"Yn6TRmt7lx"},{"type":"strong","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"children":[{"type":"text","value":"type","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"faxgM8mthk"}],"key":"IFzlvkTyUT"},{"type":"text","value":". Python is strongly typed, meaning it doesn’t automatically convert between types like strings and numbers.","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"UJ5yxTJx1S"}],"key":"rxeCx3aiyO"},{"type":"code","lang":"python","value":"# ValueError: Right type, wrong value  \nimport math\nmath.sqrt(25)     # Works: 5.0\nmath.sqrt(-25)    # ValueError! Can't take sqrt of negative\n\n# Why this matters: Physical calculations have constraints\n# like non-negative masses or temperatures above absolute zero","position":{"start":{"line":96,"column":1},"end":{"line":104,"column":1}},"key":"VS8owYkgfd"},{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"A ","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"xS8gURlwXp"},{"type":"strong","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"ValueError","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"A3COkLUzlP"}],"key":"n2x5yj5y7r"},{"type":"text","value":" means the type is correct but the value is inappropriate for the operation. The square root function expects a non-negative number—giving it a negative number is the right type but wrong value.","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"PLWqfDGLFs"}],"key":"pgmnHAanUm"},{"type":"code","lang":"python","value":"# IndexError: Accessing beyond list bounds\ndata = [10, 20, 30]\nprint(data[2])    # Works: 30 (remember: indexing starts at 0)\nprint(data[3])    # IndexError! No index 3\n\n# Why this matters: Off-by-one errors are incredibly common\n# when processing arrays of scientific data","position":{"start":{"line":108,"column":1},"end":{"line":116,"column":1}},"key":"eP7uQPmRie"},{"type":"paragraph","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"children":[{"type":"text","value":"An ","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"ouxrWkBy32"},{"type":"strong","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"children":[{"type":"text","value":"IndexError","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"YRaAQiTaX8"}],"key":"QxfhAM7rD7"},{"type":"text","value":" occurs when you try to access a list element that doesn’t exist. Python uses ","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"aHnFe0Tt6z"},{"type":"strong","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"children":[{"type":"text","value":"zero-based indexing","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"nPj884tpSP"}],"key":"wPRxwqqJg2"},{"type":"text","value":", meaning the first element is at index 0, which often causes ","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"mwusqv0pGA"},{"type":"strong","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"children":[{"type":"text","value":"off-by-one errors","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"rFPUmgONQm"}],"key":"e2s3zmV7gt"},{"type":"text","value":".","position":{"start":{"line":118,"column":1},"end":{"line":118,"column":1}},"key":"hFRR2i4qJs"}],"key":"LUAVmHqTsI"},{"type":"code","lang":"python","value":"# KeyError: Dictionary key doesn't exist\nsensor = {'id': 'A1', 'temp': 25.3}\nprint(sensor['temp'])       # Works: 25.3\nprint(sensor['pressure'])   # KeyError! No 'pressure' key\n\n# Why this matters: Data files might be missing expected fields\n# or use different naming conventions than expected","position":{"start":{"line":120,"column":1},"end":{"line":128,"column":1}},"key":"dADAbYTbvS"},{"type":"paragraph","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"A ","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"NjInG7euih"},{"type":"strong","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"KeyError","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"RYoJ25soyX"}],"key":"MtL5g2ldyD"},{"type":"text","value":" happens when you try to access a dictionary using a key that doesn’t exist. This is common when processing data files where not all records have the same fields.","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"xwUIrtmkK5"}],"key":"fOBvcxrcg8"},{"type":"heading","depth":3,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"text","value":"Understanding Error Propagation","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"Q9IbJ8gzFQ"}],"identifier":"understanding-error-propagation","label":"Understanding Error Propagation","html_id":"understanding-error-propagation","implicit":true,"key":"wEkBOw2h9r"},{"type":"paragraph","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"strong","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Error propagation","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"tXSgHs1J4N"}],"key":"AZK91Z1NqI"},{"type":"text","value":" refers to how errors spread through your program, potentially corrupting results far from the original problem. In scientific computing, understanding how errors cascade through calculations is crucial. One bad value can corrupt your entire analysis:","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"B1pMOjzqSb"}],"key":"QjXgJtWCCi"},{"type":"code","lang":"python","value":"# Demonstration: How one error ruins everything\ndef process_measurements(readings):\n    \"\"\"Show how errors propagate through calculations.\"\"\"\n    \n    # Step 1: Calculate mean (fails if any reading is None)\n    total = sum(readings)  # TypeError here if None in list\n    mean = total / len(readings)\n    \n    # Step 2: Never reached due to error above\n    normalized = [r / mean for r in readings]\n    \n    # Step 3: Never reached either\n    return normalized\n\n# One bad value stops everything\ndata = [23.5, 24.1, None, 23.8]  # None from sensor failure\nresult = process_measurements(data)  # Crashes at sum()","position":{"start":{"line":136,"column":1},"end":{"line":154,"column":1}},"key":"aC3lonLnYG"},{"type":"paragraph","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"When Python encounters an error it can’t handle, it immediately stops execution. This is called ","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"t3KuCvaSos"},{"type":"strong","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"raising an exception","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"PVeCG0F7y6"}],"key":"rqaL74pBIn"},{"type":"text","value":". The exception travels up through the ","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"T0lKl9G1xJ"},{"type":"strong","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"call stack","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"HKS5WEeQu8"}],"key":"r0zuE9U68P"},{"type":"text","value":" until it either finds code that handles it or reaches the top level and crashes the program.","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"f3gGNU5SiK"}],"key":"BHbYKEdcg2"},{"type":"paragraph","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"children":[{"type":"strong","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"children":[{"type":"text","value":"Visualization of Error Propagation:","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"key":"ZWEDoFnHDQ"}],"key":"hZ1QmrENzn"}],"key":"vxW0O1LXZC"},{"type":"code","lang":"","value":"Input: [23.5, 24.1, None, 23.8]\n   ↓\nStep 1: sum() → TypeError (can't add None)\n   ✗ CRASH (Exception raised)\nStep 2: normalize → Never executed\nStep 3: return → Never reached\n\nResult: No output, just an error","position":{"start":{"line":159,"column":1},"end":{"line":168,"column":1}},"key":"ZTXFejHlq8"},{"type":"paragraph","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"children":[{"type":"text","value":"This demonstrates the ","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"r9cT0kPjyj"},{"type":"strong","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"children":[{"type":"text","value":"fail-fast principle","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"vFiV7DDKE4"}],"key":"cx7Ei0iGkX"},{"type":"text","value":"—it’s better to stop immediately when something’s wrong rather than continue with corrupted data that could produce misleading results.","position":{"start":{"line":170,"column":1},"end":{"line":170,"column":1}},"key":"UG4sXgxCS6"}],"key":"rI45tLRzrS"},{"type":"heading","depth":3,"position":{"start":{"line":172,"column":1},"end":{"line":172,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":172,"column":1},"end":{"line":172,"column":1}},"key":"mqK5gIjnUu"},{"type":"strong","position":{"start":{"line":172,"column":1},"end":{"line":172,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":172,"column":1},"end":{"line":172,"column":1}},"key":"jDyz56Pkrc"}],"key":"oORyVWrmhB"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding","implicit":true,"key":"XfEkMwpSwO"},{"type":"paragraph","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"children":[{"type":"text","value":"What error would this code produce and which line would cause it?","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"MpONDdpQk1"}],"key":"m7RR0EtmoY"},{"type":"code","lang":"python","value":"temperatures = [20.5, 21.0, \"22.5\", 20.8]\ntotal = 0\nfor temp in temperatures:\n    total = total + temp\naverage = total / len(temperatures)","position":{"start":{"line":176,"column":1},"end":{"line":182,"column":1}},"key":"EjiikpHtFu"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"OGkG6rjxwR"}],"key":"arWfv3OCVX"},{"type":"paragraph","children":[{"type":"text","value":"This produces a ","key":"Sc00Gjx8gv"},{"type":"strong","children":[{"type":"text","value":"TypeError","key":"rYhEmt7Cim"}],"key":"r6HMM6Tqhs"},{"type":"text","value":" on line 4 (inside the loop). When the loop reaches “22.5”, Python tries to execute ","key":"FG5b1dokOo"},{"type":"inlineCode","value":"total + temp","key":"ClRm87QF2N"},{"type":"text","value":" which becomes ","key":"xBbcnReopZ"},{"type":"inlineCode","value":"41.5 + \"22.5\"","key":"eYwRWPIOPP"},{"type":"text","value":". You can’t add a number and a string.","key":"CWAb7RIdnV"}],"key":"PWXeqhEl83"},{"type":"paragraph","children":[{"type":"text","value":"The error message would be:","key":"vAlOBY2lLB"}],"key":"zRyfvpYzzr"},{"type":"code","lang":null,"meta":null,"value":"TypeError: unsupported operand type(s) for +: 'float' and 'str'","key":"hNtSx9KgAb"},{"type":"paragraph","children":[{"type":"text","value":"This error message tells us that the + operator doesn’t support combining a float and a string. The term “operand” refers to the values being operated on (41.5 and “22.5”), and “unsupported” means Python doesn’t know how to add these different types together.","key":"MIYcOT7jjF"}],"key":"t30KZeuseu"},{"type":"paragraph","children":[{"type":"text","value":"To fix it, convert the string to a float:","key":"leTprYDHFm"}],"key":"YZZisXhpVZ"},{"type":"code","lang":"python","meta":null,"value":"total = total + float(temp)","key":"s6H8vnt2WK"},{"type":"paragraph","children":[{"type":"text","value":"This is extremely common when reading data from CSV files where numbers might be stored as strings.","key":"VVB1aecLSP"}],"key":"f2tx2q67Va"}],"key":"DjHjbF7L6a"},{"type":"heading","depth":2,"position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"children":[{"type":"text","value":"9.2 Handling Errors with Try/Except","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"key":"rtuye7HFWz"}],"identifier":"id-9-2-handling-errors-with-try-except","label":"9.2 Handling Errors with Try/Except","html_id":"id-9-2-handling-errors-with-try-except","implicit":true,"key":"EPxt7dItn3"},{"type":"paragraph","position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"children":[{"type":"text","value":"Sometimes errors are expected. Files might not exist. Network connections might fail. Data might be corrupted. ","position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"key":"cU5BYt5DjC"},{"type":"strong","position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"children":[{"type":"text","value":"Try/except blocks","position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"key":"vmOdWBxI0U"}],"key":"rYuX16l1mc"},{"type":"text","value":" let your program handle these situations gracefully instead of crashing.","position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"key":"yebGllGEPZ"}],"key":"C5sqBAAQif"},{"type":"heading","depth":3,"position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"children":[{"type":"text","value":"Basic Try/Except Structure","position":{"start":{"line":208,"column":1},"end":{"line":208,"column":1}},"key":"KVq6grBjLx"}],"identifier":"basic-try-except-structure","label":"Basic Try/Except Structure","html_id":"basic-try-except-structure","implicit":true,"key":"yOztpplSgv"},{"type":"paragraph","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"children":[{"type":"text","value":"A ","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"AJaD3HEbl7"},{"type":"strong","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"children":[{"type":"text","value":"try/except block","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"btuHTIB1pm"}],"key":"KW7LV0sy31"},{"type":"text","value":" is a control structure that attempts to execute code and provides alternative behavior if an error occurs:","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"irP4URVnvc"}],"key":"sOo3JHsDhj"},{"type":"code","lang":"python","value":"def safe_divide(a, b):\n    \"\"\"Divide two numbers, handling division by zero.\"\"\"\n    try:\n        # The try block contains code that might fail\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        # The except block runs only if this specific error occurs\n        print(f\"Warning: Attempted to divide {a} by zero\")\n        return None\n\n# Use it safely\nprint(safe_divide(10, 2))   # Output: 5.0\nprint(safe_divide(10, 0))   # Output: Warning message, then None","position":{"start":{"line":212,"column":1},"end":{"line":227,"column":1}},"key":"tXi4qaWB3Q"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"so5pDYIOgW"},{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"try block","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"Zcqf0TFv96"}],"key":"yO8k4hXS7p"},{"type":"text","value":" contains code that might raise an exception. If an exception occurs, Python immediately jumps to the ","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"gH5YW70txi"},{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"except block","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"KHgGi1ChB3"}],"key":"NbhKV0zdVc"},{"type":"text","value":" that matches the exception type. If no exception occurs, the except block is skipped entirely. This is called ","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"U1KKifAeVt"},{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"exception handling","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"lrQTkhXiCI"}],"key":"r9YXQbRwD0"},{"type":"text","value":"—catching and responding to errors rather than letting them crash your program.","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"jTYMfIqilf"}],"key":"axKNRKWWX9"},{"type":"heading","depth":3,"position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"text","value":"Building Robust File Readers","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"FEtKjJCmfo"}],"identifier":"building-robust-file-readers","label":"Building Robust File Readers","html_id":"building-robust-file-readers","implicit":true,"key":"gb5fXi5fNH"},{"type":"paragraph","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"File operations are where try/except blocks shine. Files might not exist, you might lack permissions, or the content might be corrupted. Let’s build up a robust file reader step by step:","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"mRPHKNyuwx"}],"key":"ZvmcDAT7N2"},{"type":"code","lang":"python","value":"# Step 1: Handle missing files (8 lines)\ndef read_file_basic(filename):\n    \"\"\"First lesson: Handle missing files.\"\"\"\n    try:\n        with open(filename, 'r') as f:\n            return f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} not found\")\n        return None","position":{"start":{"line":235,"column":1},"end":{"line":245,"column":1}},"key":"XlwZtCWqi9"},{"type":"paragraph","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"children":[{"type":"text","value":"This handles the most common file error—the file doesn’t exist. The ","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"hCesFpjf34"},{"type":"strong","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"children":[{"type":"text","value":"with statement","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"h3owXmhtwM"}],"key":"PHUW8YVC23"},{"type":"text","value":" ensures the file is properly closed even if an error occurs, which is called ","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"SpJ2PddA5Y"},{"type":"strong","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"children":[{"type":"text","value":"context management","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"CKrz1uhQeW"}],"key":"OHuzob9ZHc"},{"type":"text","value":".","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"kGnGXzJhRD"}],"key":"hahxGet0Y7"},{"type":"code","lang":"python","value":"# Step 2: Add handling for permission errors (12 lines)\ndef read_file_safer(filename):\n    \"\"\"Second lesson: Handle multiple error types.\"\"\"\n    try:\n        with open(filename, 'r') as f:\n            return f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} not found\")\n        return None\n    except PermissionError:\n        print(f\"No permission to read {filename}\")\n        return None","position":{"start":{"line":249,"column":1},"end":{"line":262,"column":1}},"key":"MoKSn8uflz"},{"type":"paragraph","position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"children":[{"type":"text","value":"Now we handle two different exceptions. Python checks each except block in order, running the first one that matches the raised exception.","position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"key":"BdOyDZG1LM"}],"key":"dNmNSDiutR"},{"type":"code","lang":"python","value":"# Step 3: Process content safely (18 lines)\ndef read_numbers_from_file(filename):\n    \"\"\"Third lesson: Handle content errors too.\"\"\"\n    try:\n        with open(filename, 'r') as f:\n            text = f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} not found\")\n        return None\n    \n    # Now parse the content safely\n    try:\n        numbers = [float(line) for line in text.strip().split('\\n')]\n        return numbers\n    except ValueError as e:\n        print(f\"Invalid number in file: {e}\")\n        return None","position":{"start":{"line":266,"column":1},"end":{"line":284,"column":1}},"key":"LeoiIrJKtA"},{"type":"paragraph","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"WKTRJmIlTT"},{"type":"inlineCode","value":"as e","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"rhAKxGwGZC"},{"type":"text","value":" syntax captures the exception object, allowing us to access its error message. This is useful for debugging because it tells us exactly which value caused the problem.","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"YYt5oewsI1"}],"key":"I7cOmEaLy7"},{"type":"heading","depth":3,"position":{"start":{"line":288,"column":1},"end":{"line":288,"column":1}},"children":[{"type":"text","value":"🎯 ","position":{"start":{"line":288,"column":1},"end":{"line":288,"column":1}},"key":"mirUO8usYB"},{"type":"strong","position":{"start":{"line":288,"column":1},"end":{"line":288,"column":1}},"children":[{"type":"text","value":"Why This Matters: The Mars Climate Orbiter Disaster","position":{"start":{"line":288,"column":1},"end":{"line":288,"column":1}},"key":"hGScabZmWk"}],"key":"IATTe3vuHX"}],"identifier":"id-why-this-matters-the-mars-climate-orbiter-disaster","label":"🎯 Why This Matters: The Mars Climate Orbiter Disaster","html_id":"id-why-this-matters-the-mars-climate-orbiter-disaster","implicit":true,"key":"SUISIcKwsX"},{"type":"paragraph","position":{"start":{"line":290,"column":1},"end":{"line":290,"column":1}},"children":[{"type":"text","value":"In 1999, NASA lost the $125 million Mars Climate Orbiter because one team used metric units while another used imperial units. The software didn’t validate or handle unit mismatches. A simple check could have saved the mission:","position":{"start":{"line":290,"column":1},"end":{"line":290,"column":1}},"key":"SsIXzWh0Sg"}],"key":"HCDUGxRRMJ"},{"type":"code","lang":"python","value":"def combine_thrust_data(value1, unit1, value2, unit2):\n    \"\"\"What the Mars software should have done.\"\"\"\n    try:\n        if unit1 != unit2:\n            # Raising an exception explicitly signals an error\n            raise ValueError(f\"Unit mismatch: {unit1} vs {unit2}\")\n        return value1 + value2\n    except ValueError as e:\n        # Log the error and halt rather than proceed with bad data\n        print(f\"CRITICAL ERROR: {e}\")\n        print(\"Halting operation for safety\")\n        return None","position":{"start":{"line":292,"column":1},"end":{"line":305,"column":1}},"key":"lIitTFYGsS"},{"type":"paragraph","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"key":"GiU7LlD7AJ"},{"type":"strong","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"children":[{"type":"text","value":"raise statement","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"key":"NP4O5TTilt"}],"key":"iw3fOcynyS"},{"type":"text","value":" explicitly creates and throws an exception. This is how you signal that something is wrong in your own code. The disaster illustrates why error handling isn’t bureaucracy—it prevents catastrophes.","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"key":"eKMYbrgxlV"}],"key":"KlGJo5NRLD"},{"type":"heading","depth":3,"position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"children":[{"type":"text","value":"When NOT to Use Try/Except","position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"key":"x6FLIi0Z6B"}],"identifier":"when-not-to-use-try-except","label":"When NOT to Use Try/Except","html_id":"when-not-to-use-try-except","implicit":true,"key":"JwgEW5ubOE"},{"type":"paragraph","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"children":[{"type":"text","value":"Not all errors should be caught. Programming mistakes should fail loudly so you can fix them. This is an important distinction between ","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"vwH7OEupZZ"},{"type":"strong","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"children":[{"type":"text","value":"expected errors","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"pI0yEbHkZB"}],"key":"CC8BvBrCwl"},{"type":"text","value":" (like missing files) and ","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"LdXqndi5kn"},{"type":"strong","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"children":[{"type":"text","value":"programming errors","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"g4AdWIx36N"}],"key":"frcuBvjeUi"},{"type":"text","value":" (like typos):","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"gpfmj1wSwE"}],"key":"fFcQX1ogG6"},{"type":"code","lang":"python","value":"# BAD: Hiding programming errors\ndef bad_statistics(data):\n    try:\n        mean = sum(data) / len(dta)  # Typo: 'dta' not 'data'\n        return mean\n    except:  # Never use bare except!\n        return 0  # Hides the typo error!","position":{"start":{"line":313,"column":1},"end":{"line":321,"column":1}},"key":"vqM9VxUq8k"},{"type":"paragraph","position":{"start":{"line":323,"column":1},"end":{"line":323,"column":1}},"children":[{"type":"text","value":"A ","position":{"start":{"line":323,"column":1},"end":{"line":323,"column":1}},"key":"RMS2wEASkU"},{"type":"strong","position":{"start":{"line":323,"column":1},"end":{"line":323,"column":1}},"children":[{"type":"text","value":"bare except","position":{"start":{"line":323,"column":1},"end":{"line":323,"column":1}},"key":"VPhtimKdCI"}],"key":"LoUGkOyXwK"},{"type":"text","value":" catches all exceptions, including ones you don’t expect. This is dangerous because it hides programming errors.","position":{"start":{"line":323,"column":1},"end":{"line":323,"column":1}},"key":"SHsoGC1iV9"}],"key":"kDUGyuCCFc"},{"type":"code","lang":"python","value":"# GOOD: Only catch specific, expected errors\ndef good_statistics(data):\n    \"\"\"Only handle the error we expect.\"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Cannot calculate mean of empty dataset\")\n    \n    mean = sum(data) / len(data)  # Typo would crash (good!)\n    return mean","position":{"start":{"line":325,"column":1},"end":{"line":334,"column":1}},"key":"Rh5dlRHSdF"},{"type":"paragraph","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"children":[{"type":"text","value":"The rule: catch errors you expect and can handle. Let unexpected errors crash so you can fix them. This is called ","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"key":"yhvmzbXvEf"},{"type":"strong","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"children":[{"type":"text","value":"selective exception handling","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"key":"N4G1sUzmAH"}],"key":"WeZJyIW3Th"},{"type":"text","value":".","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"key":"iAd5bJO1L9"}],"key":"mSv3mktDL6"},{"type":"heading","depth":3,"position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"key":"UDLSMTEBvJ"},{"type":"strong","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: The Silent Except","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"key":"DVlzsaWKoc"}],"key":"axlQpUTM9i"}],"identifier":"id-common-bug-alert-the-silent-except","label":"⚠️ Common Bug Alert: The Silent Except","html_id":"id-common-bug-alert-the-silent-except","implicit":true,"key":"mBZpmurPN7"},{"type":"code","lang":"python","value":"# THE WORST ANTI-PATTERN IN PYTHON\ntry:\n    result = complex_calculation()\nexcept:\n    result = 0  # Silently returns 0 for ANY error\n\n# This hides critical errors like:\n# - Typos in variable names (NameError)\n# - Missing imports (ImportError)\n# - Out of memory (MemoryError)\n# - Keyboard interrupts (KeyboardInterrupt)","position":{"start":{"line":340,"column":1},"end":{"line":352,"column":1}},"key":"ywO2C8hS9F"},{"type":"paragraph","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"children":[{"type":"text","value":"This ","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"key":"r6jNWeyN7z"},{"type":"strong","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"children":[{"type":"text","value":"anti-pattern","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"key":"MQ8wEg60bY"}],"key":"s4FKpxis9f"},{"type":"text","value":" (a common but harmful coding pattern) makes debugging nearly impossible because errors disappear silently. Always catch specific exceptions.","position":{"start":{"line":354,"column":1},"end":{"line":354,"column":1}},"key":"HgvBYR7Y2J"}],"key":"krb9XzXR1N"},{"type":"heading","depth":2,"position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"children":[{"type":"text","value":"9.3 Validating Inputs","position":{"start":{"line":356,"column":1},"end":{"line":356,"column":1}},"key":"Bd6YnQqAx7"}],"identifier":"id-9-3-validating-inputs","label":"9.3 Validating Inputs","html_id":"id-9-3-validating-inputs","implicit":true,"key":"KZwXBc3YgZ"},{"type":"paragraph","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"children":[{"type":"text","value":"The best error is one that never happens. ","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"d9Jyh7kJP3"},{"type":"strong","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"children":[{"type":"text","value":"Input validation","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"NYjweyjhgj"}],"key":"kAczIh9gmr"},{"type":"text","value":" is the practice of checking that data meets expected requirements before processing it. This follows the ","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"RY0uAfAHiT"},{"type":"strong","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"children":[{"type":"text","value":"fail-fast principle","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"NSAMI46pN2"}],"key":"qwNRLcrvuZ"},{"type":"text","value":"—detect problems as early as possible.","position":{"start":{"line":358,"column":1},"end":{"line":358,"column":1}},"key":"BE5CeQzzsN"}],"key":"TQzkauy7Io"},{"type":"heading","depth":3,"position":{"start":{"line":360,"column":1},"end":{"line":360,"column":1}},"children":[{"type":"text","value":"💡 ","position":{"start":{"line":360,"column":1},"end":{"line":360,"column":1}},"key":"txaJabhBuA"},{"type":"strong","position":{"start":{"line":360,"column":1},"end":{"line":360,"column":1}},"children":[{"type":"text","value":"Computational Thinking: The Guard Clause Pattern","position":{"start":{"line":360,"column":1},"end":{"line":360,"column":1}},"key":"fkNazsuTeS"}],"key":"f7G8vlrXl5"}],"identifier":"id-computational-thinking-the-guard-clause-pattern","label":"💡 Computational Thinking: The Guard Clause Pattern","html_id":"id-computational-thinking-the-guard-clause-pattern","implicit":true,"key":"mksVHK1kdt"},{"type":"paragraph","position":{"start":{"line":362,"column":1},"end":{"line":362,"column":1}},"children":[{"type":"strong","position":{"start":{"line":362,"column":1},"end":{"line":362,"column":1}},"children":[{"type":"text","value":"Guard clauses","position":{"start":{"line":362,"column":1},"end":{"line":362,"column":1}},"key":"ud0mYSV0lG"}],"key":"vulgNiB32k"},{"type":"text","value":" are conditional statements at the beginning of a function that check preconditions and exit early if they’re not met. This pattern creates a clear separation between validation and logic:","position":{"start":{"line":362,"column":1},"end":{"line":362,"column":1}},"key":"WLhLgx8HC8"}],"key":"HMlaJMBASP"},{"type":"code","lang":"python","value":"# Without guard clauses - nested complexity\ndef process_data_nested(data):\n    if data is not None:\n        if len(data) > 0:\n            if all(isinstance(x, (int, float)) for x in data):\n                # Actual work buried in nested ifs\n                return sum(data) / len(data)\n    return None","position":{"start":{"line":364,"column":1},"end":{"line":373,"column":1}},"key":"lmJ3v1gZwi"},{"type":"paragraph","position":{"start":{"line":375,"column":1},"end":{"line":375,"column":1}},"children":[{"type":"text","value":"This nested structure is hard to read and understand. Each level of indentation adds cognitive load.","position":{"start":{"line":375,"column":1},"end":{"line":375,"column":1}},"key":"YlE61Ly9e0"}],"key":"Kz49bBHsGq"},{"type":"code","lang":"python","value":"# With guard clauses - linear flow\ndef process_data_clean(data):\n    # Guards at the top\n    if data is None:\n        return None\n    if len(data) == 0:\n        return None\n    if not all(isinstance(x, (int, float)) for x in data):\n        return None\n    \n    # Main logic clear and unindented\n    return sum(data) / len(data)","position":{"start":{"line":377,"column":1},"end":{"line":390,"column":1}},"key":"TB8jBwMlh4"},{"type":"paragraph","position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"children":[{"type":"text","value":"Guard clauses create ","position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"key":"vZ06Ngskuh"},{"type":"strong","position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"children":[{"type":"text","value":"linear code flow","position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"key":"uYJdIwoIp8"}],"key":"Ld7nk9WpQ6"},{"type":"text","value":"—you can read from top to bottom without tracking nested conditions. This pattern reduces cognitive load by handling edge cases first, leaving the main logic clean and readable.","position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"key":"Fa2MS5v7mR"}],"key":"gc0RcKapce"},{"type":"heading","depth":3,"position":{"start":{"line":394,"column":1},"end":{"line":394,"column":1}},"children":[{"type":"text","value":"Building Validation Layer by Layer","position":{"start":{"line":394,"column":1},"end":{"line":394,"column":1}},"key":"Ig8BLo83EK"}],"identifier":"building-validation-layer-by-layer","label":"Building Validation Layer by Layer","html_id":"building-validation-layer-by-layer","implicit":true,"key":"QqWxvY2tYf"},{"type":"paragraph","position":{"start":{"line":396,"column":1},"end":{"line":396,"column":1}},"children":[{"type":"text","value":"Effective validation checks multiple aspects of data. Let’s build robust validation step by step, each focusing on one aspect:","position":{"start":{"line":396,"column":1},"end":{"line":396,"column":1}},"key":"pGnHUkMljs"}],"key":"AHFSmE6h6Z"},{"type":"code","lang":"python","value":"# Layer 1: Check for data existence (6 lines)\ndef validate_not_empty(data):\n    \"\"\"First check: Do we have data?\"\"\"\n    if not data:\n        raise ValueError(\"Cannot process empty data\")\n    return True","position":{"start":{"line":398,"column":1},"end":{"line":405,"column":1}},"key":"uGBKDOU2sZ"},{"type":"paragraph","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"key":"PyxSY6nsOs"},{"type":"strong","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"children":[{"type":"text","value":"truthiness","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"key":"VMaoRUNgVz"}],"key":"r8Q7cl0y9H"},{"type":"text","value":" check ","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"key":"dm6MeCxsmd"},{"type":"inlineCode","value":"if not data","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"key":"NSE0d6lxOF"},{"type":"text","value":" works because empty containers (lists, strings, dicts) evaluate to False in Python. This is the cheapest validation—just checking if data exists.","position":{"start":{"line":407,"column":1},"end":{"line":407,"column":1}},"key":"pFnn0TWUK9"}],"key":"nxXGZ5eMZN"},{"type":"code","lang":"python","value":"# Layer 2: Check data types (10 lines)\ndef validate_numeric(values):\n    \"\"\"Second check: Is data the right type?\"\"\"\n    for i, val in enumerate(values):\n        if not isinstance(val, (int, float)):\n            raise TypeError(\n                f\"Item {i} is {type(val).__name__}, expected number\"\n            )\n    return True","position":{"start":{"line":409,"column":1},"end":{"line":419,"column":1}},"key":"BmqVDa7VAM"},{"type":"paragraph","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"key":"GEBVlmZXX5"},{"type":"strong","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"children":[{"type":"text","value":"isinstance() function","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"key":"DshO8TPqj1"}],"key":"slreNMpfBL"},{"type":"text","value":" checks if a value is of a specific type or types. The ","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"key":"t3VkB6GWqc"},{"type":"inlineCode","value":"__name__","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"key":"aQ7ZhNopVG"},{"type":"text","value":" attribute gives us a human-readable type name for error messages.","position":{"start":{"line":421,"column":1},"end":{"line":421,"column":1}},"key":"ko9SQ94IbR"}],"key":"NC3NluNM5W"},{"type":"code","lang":"python","value":"# Layer 3: Check physical constraints (12 lines)\ndef validate_temperature_kelvin(temps):\n    \"\"\"Third check: Does data make physical sense?\"\"\"\n    for i, temp in enumerate(temps):\n        if temp < 0:\n            raise ValueError(\n                f\"Temperature {temp}K at position {i} \"\n                f\"violates absolute zero\"\n            )\n    return True","position":{"start":{"line":423,"column":1},"end":{"line":434,"column":1}},"key":"hNs1uqEspf"},{"type":"paragraph","position":{"start":{"line":436,"column":1},"end":{"line":436,"column":1}},"children":[{"type":"strong","position":{"start":{"line":436,"column":1},"end":{"line":436,"column":1}},"children":[{"type":"text","value":"Domain validation","position":{"start":{"line":436,"column":1},"end":{"line":436,"column":1}},"key":"pEFIZBxTEA"}],"key":"fz4HcFvU16"},{"type":"text","value":" checks if values make sense in your problem domain. Temperature can’t be below absolute zero (0 Kelvin), masses can’t be negative, probabilities must be between 0 and 1.","position":{"start":{"line":436,"column":1},"end":{"line":436,"column":1}},"key":"VtfJK5hNcY"}],"key":"MHM4OGwJbb"},{"type":"paragraph","position":{"start":{"line":438,"column":1},"end":{"line":438,"column":1}},"children":[{"type":"text","value":"Now combine them into a complete validation pipeline:","position":{"start":{"line":438,"column":1},"end":{"line":438,"column":1}},"key":"xfOeKP9tBV"}],"key":"uqKVk1eis9"},{"type":"code","lang":"python","value":"def process_temperature_data(measurements):\n    \"\"\"Complete validation pipeline.\"\"\"\n    # Validate in order of increasing cost\n    validate_not_empty(measurements)      # Cheap check first\n    validate_numeric(measurements)        # Medium cost\n    validate_temperature_kelvin(measurements)  # Expensive last\n    \n    # Now safe to process\n    return {\n        'mean': sum(measurements) / len(measurements),\n        'min': min(measurements),\n        'max': max(measurements)\n    }","position":{"start":{"line":440,"column":1},"end":{"line":454,"column":1}},"key":"hMH2GL3bU6"},{"type":"paragraph","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"children":[{"type":"text","value":"The validation order matters for ","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"key":"g2kyPQa3WG"},{"type":"strong","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"children":[{"type":"text","value":"performance optimization","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"key":"W70PkX9WHA"}],"key":"YfEOo6YxER"},{"type":"text","value":". Check cheap conditions first (like emptiness) before expensive ones (like complex calculations).","position":{"start":{"line":456,"column":1},"end":{"line":456,"column":1}},"key":"EZ71uyx4hP"}],"key":"xXipBQxMC5"},{"type":"heading","depth":3,"position":{"start":{"line":458,"column":1},"end":{"line":458,"column":1}},"children":[{"type":"text","value":"Validating NumPy Arrays","position":{"start":{"line":458,"column":1},"end":{"line":458,"column":1}},"key":"kHybekQIco"}],"identifier":"validating-numpy-arrays","label":"Validating NumPy Arrays","html_id":"validating-numpy-arrays","implicit":true,"key":"AbXw1TQXNn"},{"type":"paragraph","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"children":[{"type":"text","value":"NumPy arrays from Chapter 7 need special validation for ","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"key":"Dj9rp0CoNj"},{"type":"strong","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"children":[{"type":"text","value":"NaN","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"key":"GeyT6Jeq12"}],"key":"STbXlRZQQH"},{"type":"text","value":" (Not a Number) and ","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"key":"fsY5NWaxxp"},{"type":"strong","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"children":[{"type":"text","value":"infinity","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"key":"Gxr0DaDpEi"}],"key":"RSqVwKOV4Q"},{"type":"text","value":" values. NaN represents undefined results (like 0/0), while infinity represents overflow:","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"key":"AzDMfCeLet"}],"key":"ulyPPplqwr"},{"type":"code","lang":"python","value":"import numpy as np\n\ndef validate_array(arr):\n    \"\"\"Check array for common problems.\"\"\"\n    # Convert to array if needed (defensive programming)\n    data = np.asarray(arr)\n    \n    # Check size\n    if data.size == 0:\n        raise ValueError(\"Empty array\")\n    \n    # Check for NaN (Not a Number - undefined values)\n    n_nan = np.sum(np.isnan(data))\n    if n_nan > 0:\n        print(f\"Warning: {n_nan} NaN values found\")\n    \n    # Check for infinity (overflow values)\n    n_inf = np.sum(np.isinf(data))\n    if n_inf > 0:\n        raise ValueError(f\"{n_inf} infinite values found\")\n    \n    return data","position":{"start":{"line":462,"column":1},"end":{"line":485,"column":1}},"key":"EHz0JRfOaU"},{"type":"paragraph","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"fUTvu348NY"},{"type":"strong","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"children":[{"type":"text","value":"np.isnan()","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"KPnzF6BCmD"}],"key":"Ewm7wethR5"},{"type":"text","value":" and ","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"ogXYnat3UB"},{"type":"strong","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"children":[{"type":"text","value":"np.isinf()","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"uvOGSfmILg"}],"key":"ythsxjoYrX"},{"type":"text","value":" functions return boolean arrays indicating which elements are NaN or infinite. These special values can corrupt calculations if not handled properly.","position":{"start":{"line":487,"column":1},"end":{"line":487,"column":1}},"key":"QcZI1QvpNO"}],"key":"VjFPNHEgUA"},{"type":"heading","depth":3,"position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"children":[{"type":"text","value":"Performance Cost of Validation","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"key":"ClIR7D6sQ2"}],"identifier":"performance-cost-of-validation","label":"Performance Cost of Validation","html_id":"performance-cost-of-validation","implicit":true,"key":"GbM5C6S6JM"},{"type":"paragraph","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"children":[{"type":"text","value":"Validation has a ","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"key":"XAFfEC7A6x"},{"type":"strong","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"children":[{"type":"text","value":"performance cost","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"key":"PC2ZhELQB1"}],"key":"Va2hCDWjGk"},{"type":"text","value":"—it takes time to check conditions. Let’s measure it to understand the tradeoff:","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"key":"M3MxXpRNZ6"}],"key":"ZbyoeYcg8D"},{"type":"code","lang":"python","value":"import time\nimport numpy as np\n\ndef process_without_validation(data):\n    \"\"\"No safety checks.\"\"\"\n    return np.mean(data)\n\ndef process_with_validation(data):\n    \"\"\"With safety checks.\"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Empty data\")\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Contains NaN\")\n    return np.mean(data)\n\n# Measure the cost\ndata = np.random.randn(1000000)  # 1 million random numbers\n\nstart = time.time()\nfor _ in range(100):\n    process_without_validation(data)\nno_check_time = time.time() - start\n\nstart = time.time()\nfor _ in range(100):\n    process_with_validation(data)\ncheck_time = time.time() - start\n\nprint(f\"Without validation: {no_check_time:.3f}s\")\nprint(f\"With validation: {check_time:.3f}s\")\nprint(f\"Overhead: {(check_time/no_check_time - 1)*100:.1f}%\")\n\n# Typical output:\n# Without validation: 0.123s\n# With validation: 0.145s\n# Overhead: 17.9%","position":{"start":{"line":493,"column":1},"end":{"line":530,"column":1}},"key":"dIHtq0HBMq"},{"type":"paragraph","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"children":[{"type":"text","value":"The ~18% ","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"key":"TimC3dlWzH"},{"type":"strong","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"children":[{"type":"text","value":"overhead","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"key":"kXKnDWhk93"}],"key":"X1YfrS1AV6"},{"type":"text","value":" (additional time cost) is worth it for catching errors that could invalidate hours of computation. This is a classic ","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"key":"SpV2mowf5r"},{"type":"strong","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"children":[{"type":"text","value":"tradeoff","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"key":"vneV8gCTu8"}],"key":"nF1zaGFCn8"},{"type":"text","value":"—spending a little time upfront to save a lot of time debugging later.","position":{"start":{"line":532,"column":1},"end":{"line":532,"column":1}},"key":"ceiXRmSF9u"}],"key":"vrx5P1e8MP"},{"type":"heading","depth":3,"position":{"start":{"line":534,"column":1},"end":{"line":534,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":534,"column":1},"end":{"line":534,"column":1}},"key":"avXD96eFnl"},{"type":"strong","position":{"start":{"line":534,"column":1},"end":{"line":534,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":534,"column":1},"end":{"line":534,"column":1}},"key":"QY3bLlK7Fw"}],"key":"fje0T42d3C"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-1","implicit":true,"key":"t9lbOgR1Ot"},{"type":"paragraph","position":{"start":{"line":536,"column":1},"end":{"line":536,"column":1}},"children":[{"type":"text","value":"Which validation should come first and why?","position":{"start":{"line":536,"column":1},"end":{"line":536,"column":1}},"key":"Iy1YWBrTxg"}],"key":"jXM7pLkyBl"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":537,"column":1},"end":{"line":540,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":537,"column":1},"end":{"line":537,"column":1}},"children":[{"type":"text","value":"Checking if temperature is positive","position":{"start":{"line":537,"column":1},"end":{"line":537,"column":1}},"key":"CTt4gyv7u4"}],"key":"wc77YVtFPC"},{"type":"listItem","spread":true,"position":{"start":{"line":538,"column":1},"end":{"line":538,"column":1}},"children":[{"type":"text","value":"Checking if list is empty","position":{"start":{"line":538,"column":1},"end":{"line":538,"column":1}},"key":"hM4mHsJpXl"}],"key":"xLb73mEaUA"},{"type":"listItem","spread":true,"position":{"start":{"line":539,"column":1},"end":{"line":540,"column":1}},"children":[{"type":"text","value":"Checking if values are numbers","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"key":"cIsjj0cMfp"}],"key":"gYqwY8cP04"}],"key":"DrZ8trqxuz"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"IHfGbe9W7y"}],"key":"EVZHyrn8mv"},{"type":"paragraph","children":[{"type":"text","value":"The correct order is:","key":"dHe2WjQXK8"}],"key":"iNeK2t3JJd"},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Check if list is empty (fastest, most fundamental)","key":"Ej80tmAg10"}],"key":"HhbUP1zkGn"}],"key":"odFridmTVS"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Check if values are numbers (can’t check temperature if not numbers)","key":"EquZxoI7TX"}],"key":"W9QfCVroFE"}],"key":"GildvIoLGA"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Check if temperature is positive (domain-specific, most expensive)","key":"E8IxLWhEUk"}],"key":"vs04n2B24N"}],"key":"zY9ANBvdcU"}],"key":"E2dbio3B9u"},{"type":"paragraph","children":[{"type":"text","value":"This follows the principle of “fail fast with cheapest check first.” An empty list check is ","key":"jkWn4Inkuu"},{"type":"strong","children":[{"type":"text","value":"O(1)","key":"ACws8E2TCE"}],"key":"UA9ipdthL0"},{"type":"text","value":" (constant time), type checking is ","key":"P0GkSO8K9s"},{"type":"strong","children":[{"type":"text","value":"O(n)","key":"kGN6KeJlEk"}],"key":"rGBq6SLRXC"},{"type":"text","value":" (linear time), and domain validation might involve complex calculations. By ordering checks from cheapest to most expensive, we minimize the average time spent on validation.","key":"YRwJXBc0fK"}],"key":"IRNRclO3RT"},{"type":"paragraph","children":[{"type":"text","value":"The ","key":"rbxwIRgNdO"},{"type":"strong","children":[{"type":"text","value":"dependency order","key":"RqLkxRkejK"}],"key":"QJci2oiegF"},{"type":"text","value":" also matters—you can’t check if temperatures are positive if you haven’t verified they’re numbers first!","key":"ZECYf5KLif"}],"key":"SjBx07vuyO"}],"key":"tYEUc5AAIi"},{"type":"heading","depth":2,"position":{"start":{"line":554,"column":1},"end":{"line":554,"column":1}},"children":[{"type":"text","value":"9.4 Using Assertions","position":{"start":{"line":554,"column":1},"end":{"line":554,"column":1}},"key":"issxJCzaxD"}],"identifier":"id-9-4-using-assertions","label":"9.4 Using Assertions","html_id":"id-9-4-using-assertions","implicit":true,"key":"krEZaq0KAv"},{"type":"paragraph","position":{"start":{"line":556,"column":1},"end":{"line":556,"column":1}},"children":[{"type":"strong","position":{"start":{"line":556,"column":1},"end":{"line":556,"column":1}},"children":[{"type":"text","value":"Assertions","position":{"start":{"line":556,"column":1},"end":{"line":556,"column":1}},"key":"mV2DcYd3XS"}],"key":"EMV97RItLO"},{"type":"text","value":" are debugging aids that verify assumptions about your program’s state. They’re like scientific hypotheses in your code—statements you believe must be true. Python checks them and alerts you if they’re violated. They’re your safety net during development.","position":{"start":{"line":556,"column":1},"end":{"line":556,"column":1}},"key":"GVUFWyDbN4"}],"key":"HSj9FkA2lz"},{"type":"heading","depth":3,"position":{"start":{"line":558,"column":1},"end":{"line":558,"column":1}},"children":[{"type":"text","value":"Assertions vs Validation: Know the Difference","position":{"start":{"line":558,"column":1},"end":{"line":558,"column":1}},"key":"hB9P1R1Qz0"}],"identifier":"assertions-vs-validation-know-the-difference","label":"Assertions vs Validation: Know the Difference","html_id":"assertions-vs-validation-know-the-difference","implicit":true,"key":"sFuPz5yiWg"},{"type":"paragraph","position":{"start":{"line":560,"column":1},"end":{"line":560,"column":1}},"children":[{"type":"text","value":"There’s a critical distinction between validating external input and asserting internal correctness:","position":{"start":{"line":560,"column":1},"end":{"line":560,"column":1}},"key":"og1Xfm6myP"}],"key":"j5l5pdBxkX"},{"type":"code","lang":"python","value":"def analyze_spectrum(wavelengths, intensities):\n    # VALIDATION: Check external inputs\n    if len(wavelengths) == 0:\n        raise ValueError(\"No wavelength data provided\")\n    if len(wavelengths) != len(intensities):\n        raise ValueError(\"Wavelength and intensity arrays must match\")\n    \n    # Process data\n    normalized = intensities / np.max(intensities)\n    \n    # ASSERTION: Verify our logic is correct\n    assert len(normalized) == len(intensities), \"Lost data during normalization!\"\n    assert np.all(normalized <= 1.0), \"Normalization failed!\"\n    \n    return normalized","position":{"start":{"line":562,"column":1},"end":{"line":578,"column":1}},"key":"JEw9ot5eHC"},{"type":"paragraph","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"children":[{"type":"strong","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"children":[{"type":"text","value":"Validation","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"CgWVw5nBRd"}],"key":"DbitKgTHwC"},{"type":"text","value":" protects against bad input from external sources (users, files, networks). ","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"TPy6011x43"},{"type":"strong","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"children":[{"type":"text","value":"Assertions","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"Ez2ZYGJjaD"}],"key":"kMCJUTghst"},{"type":"text","value":" catch bugs in your logic—they verify that your code does what you think it does. Assertions can be disabled in production with the ","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"Kh9UxPCH6U"},{"type":"inlineCode","value":"-O","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"GSC1Jc6d1p"},{"type":"text","value":" flag, while validation always runs.","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"nBfWSGkiCI"}],"key":"KHun7N0Cuw"},{"type":"heading","depth":3,"position":{"start":{"line":582,"column":1},"end":{"line":582,"column":1}},"children":[{"type":"text","value":"Using Assertions to Document Assumptions","position":{"start":{"line":582,"column":1},"end":{"line":582,"column":1}},"key":"hHOodjhWh5"}],"identifier":"using-assertions-to-document-assumptions","label":"Using Assertions to Document Assumptions","html_id":"using-assertions-to-document-assumptions","implicit":true,"key":"d80SuyrfTZ"},{"type":"paragraph","position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"children":[{"type":"text","value":"Assertions make your ","position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"key":"DGHAeMtDCz"},{"type":"strong","position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"children":[{"type":"text","value":"assumptions","position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"key":"PV41hERtaU"}],"key":"l64O5Qgw3P"},{"type":"text","value":" explicit—they document what you believe to be true at specific points in your code:","position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"key":"ikfdPXmdrZ"}],"key":"MFIx4U9g99"},{"type":"code","lang":"python","value":"def find_peak(data):\n    \"\"\"Find the maximum value and its index.\"\"\"\n    # Precondition: what must be true at start\n    assert len(data) > 0, \"Requires non-empty data\"\n    \n    max_val = data[0]\n    max_idx = 0\n    \n    for i, val in enumerate(data[1:], 1):\n        if val > max_val:\n            max_val = val\n            max_idx = i\n    \n    # Postconditions: what we guarantee at end\n    assert 0 <= max_idx < len(data), \"Index out of bounds\"\n    assert data[max_idx] == max_val, \"Index doesn't match value\"\n    \n    return max_idx, max_val","position":{"start":{"line":586,"column":1},"end":{"line":605,"column":1}},"key":"w7YgPpLUVF"},{"type":"paragraph","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"children":[{"type":"strong","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"children":[{"type":"text","value":"Preconditions","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"key":"w9izTP3nLb"}],"key":"BxyhpOVsYj"},{"type":"text","value":" are assumptions about input state, while ","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"key":"GS4X99xpFW"},{"type":"strong","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"children":[{"type":"text","value":"postconditions","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"key":"vbUFhJViCb"}],"key":"CVVzInajQO"},{"type":"text","value":" are guarantees about output state. Together they form a ","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"key":"NpUmZxNRN0"},{"type":"strong","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"children":[{"type":"text","value":"contract","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"key":"p0CmQrbnDk"}],"key":"NNMkMnhHzK"},{"type":"text","value":"—if the preconditions are met, the postconditions will be satisfied.","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":1}},"key":"hUi4MF3XZH"}],"key":"uKnW6BozmS"},{"type":"heading","depth":3,"position":{"start":{"line":609,"column":1},"end":{"line":609,"column":1}},"children":[{"type":"text","value":"Assertions in Numerical Algorithms","position":{"start":{"line":609,"column":1},"end":{"line":609,"column":1}},"key":"TkUtBqVeqt"}],"identifier":"assertions-in-numerical-algorithms","label":"Assertions in Numerical Algorithms","html_id":"assertions-in-numerical-algorithms","implicit":true,"key":"YrBpyNiW0g"},{"type":"paragraph","position":{"start":{"line":611,"column":1},"end":{"line":611,"column":1}},"children":[{"type":"text","value":"Assertions are particularly valuable for checking ","position":{"start":{"line":611,"column":1},"end":{"line":611,"column":1}},"key":"k3axPJpiwD"},{"type":"strong","position":{"start":{"line":611,"column":1},"end":{"line":611,"column":1}},"children":[{"type":"text","value":"numerical stability","position":{"start":{"line":611,"column":1},"end":{"line":611,"column":1}},"key":"JdiqB7Do9L"}],"key":"IzvXItEUEH"},{"type":"text","value":"—whether calculations maintain mathematical properties despite floating-point limitations:","position":{"start":{"line":611,"column":1},"end":{"line":611,"column":1}},"key":"PiWzYNQoH9"}],"key":"iiZf9VPW2j"},{"type":"code","lang":"python","value":"def normalize_to_unit_range(values):\n    \"\"\"Scale values to [0, 1] range.\"\"\"\n    min_val = min(values)\n    max_val = max(values)\n    \n    # Mathematical requirement\n    assert max_val >= min_val, \"Max less than min!\"\n    \n    if max_val == min_val:\n        # All values identical - special case\n        return [0.5] * len(values)\n    \n    # Normalize using linear transformation\n    range_val = max_val - min_val\n    normalized = [(v - min_val) / range_val for v in values]\n    \n    # Verify our math preserved the mathematical properties\n    assert all(0 <= v <= 1 for v in normalized), \\\n        f\"Normalization produced values outside [0,1]\"\n    \n    return normalized","position":{"start":{"line":613,"column":1},"end":{"line":635,"column":1}},"key":"d0BIF02bTl"},{"type":"paragraph","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"children":[{"type":"text","value":"The assertion checks that our normalization formula ","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"key":"kIhQ7lI1ak"},{"type":"inlineCode","value":"(v - min) / (max - min)","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"key":"FDPysTJwxP"},{"type":"text","value":" actually produces values in [0, 1]. This catches ","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"key":"aVpNYmsHzK"},{"type":"strong","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"children":[{"type":"text","value":"numerical errors","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"key":"NItp8CJo0N"}],"key":"aAfNN101dB"},{"type":"text","value":" that could arise from floating-point arithmetic.","position":{"start":{"line":637,"column":1},"end":{"line":637,"column":1}},"key":"w0SiwG7fN6"}],"key":"bWhTZcburC"},{"type":"heading","depth":3,"position":{"start":{"line":639,"column":1},"end":{"line":639,"column":1}},"children":[{"type":"text","value":"🛠️ ","position":{"start":{"line":639,"column":1},"end":{"line":639,"column":1}},"key":"DYL7mUQuIg"},{"type":"strong","position":{"start":{"line":639,"column":1},"end":{"line":639,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":639,"column":1},"end":{"line":639,"column":1}},"key":"zV7XAG8NHI"}],"key":"CN59GbTKRP"}],"identifier":"id-debug-this","label":"🛠️ Debug This!","html_id":"id-debug-this","implicit":true,"key":"iWGUaBeBTu"},{"type":"paragraph","position":{"start":{"line":641,"column":1},"end":{"line":641,"column":1}},"children":[{"type":"text","value":"This function has a subtle bug that the assertion will catch:","position":{"start":{"line":641,"column":1},"end":{"line":641,"column":1}},"key":"yvJpnwXnNW"}],"key":"jF04Dj75Bd"},{"type":"code","lang":"python","value":"def calculate_variance(data):\n    \"\"\"Calculate variance with Bessel's correction.\"\"\"\n    n = len(data)\n    assert n > 1, \"Need at least 2 values for variance\"\n    \n    mean = sum(data) / n\n    squared_diffs = [(x - mean)**2 for x in data]\n    variance = sum(squared_diffs) / (n - 1)\n    \n    # This assertion sometimes fails. Why?\n    assert variance >= 0, f\"Variance {variance} is negative!\"\n    \n    return variance\n\n# Test case that breaks it\ndata = [1e20, 1, 2, 3]\nresult = calculate_variance(data)","position":{"start":{"line":643,"column":1},"end":{"line":661,"column":1}},"key":"Jgl6UKlytC"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Bug Explanation and Fix","key":"dUqfj6XEXc"}],"key":"iStdiPWKPD"},{"type":"paragraph","children":[{"type":"text","value":"The bug is ","key":"NvjwGLwKPP"},{"type":"strong","children":[{"type":"text","value":"catastrophic cancellation","key":"EeNEPIORJ2"}],"key":"pa58z2k7Ug"},{"type":"text","value":"—a form of numerical instability that occurs when subtracting nearly equal floating-point numbers. When data contains values of very different magnitudes (1e20 vs 1), the mean is dominated by the large value. Subtracting this large mean from small values can produce negative squared differences due to ","key":"JJeae5xEn7"},{"type":"strong","children":[{"type":"text","value":"floating-point rounding errors","key":"wzovGJCUQP"}],"key":"bR8Dv5SkE8"},{"type":"text","value":".","key":"JQd93aojCZ"}],"key":"kdmPZ7kNXt"},{"type":"paragraph","children":[{"type":"text","value":"Here’s what happens:","key":"DKU40pEVe8"}],"key":"cFvDvWyzxn"},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Mean ≈ 2.5e19 (dominated by 1e20)","key":"Z63NFIZmyN"}],"key":"zrDyJmcJuG"}],"key":"v8zDOaRl17"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"(1 - 2.5e19)² should be positive","key":"uB1ZICju6c"}],"key":"HSsTgxS2V7"}],"key":"ihud6uTqvQ"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"But floating-point arithmetic loses precision","key":"uTXs4pT0Ci"}],"key":"eha3QyKdgg"}],"key":"L74VHPEWFV"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Result can be slightly negative due to rounding","key":"uGSgnwRZ5B"}],"key":"gjB8KB4xYU"}],"key":"qQ2aF5D6fR"}],"key":"LkIjYcWO23"},{"type":"paragraph","children":[{"type":"text","value":"Fix using the numerically stable two-pass algorithm:","key":"LAuoRPZx7F"}],"key":"oVsG760173"},{"type":"code","lang":"python","meta":null,"value":"def calculate_variance_stable(data):\n    n = len(data)\n    assert n > 1, \"Need at least 2 values for variance\"\n    \n    # First pass: accurate mean\n    mean = sum(data) / n\n    \n    # Second pass: stable sum of squares\n    sum_sq = 0\n    for x in data:\n        sum_sq += (x - mean) ** 2\n    \n    variance = sum_sq / (n - 1)\n    \n    # Allow tiny negative values from rounding\n    assert variance >= -1e-10, f\"Numerical error: {variance}\"\n    \n    # Clamp to zero if slightly negative\n    return max(0, variance)","key":"LYGLHQVA9V"},{"type":"paragraph","children":[{"type":"text","value":"This demonstrates why assertions are crucial for catching numerical instabilities!","key":"YS65RZaXyz"}],"key":"s6BnmyNQxp"}],"key":"HixYwOsBEj"},{"type":"heading","depth":2,"position":{"start":{"line":700,"column":1},"end":{"line":700,"column":1}},"children":[{"type":"text","value":"9.5 Logging Instead of Print","position":{"start":{"line":700,"column":1},"end":{"line":700,"column":1}},"key":"ykJHVE0rUz"}],"identifier":"id-9-5-logging-instead-of-print","label":"9.5 Logging Instead of Print","html_id":"id-9-5-logging-instead-of-print","implicit":true,"key":"OgKhs2GQEq"},{"type":"paragraph","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"children":[{"type":"text","value":"Professional code uses ","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"key":"iwJU8q87ce"},{"type":"strong","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"children":[{"type":"text","value":"logging","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"key":"QOlaKlFVEo"}],"key":"N0FVdNDGjj"},{"type":"text","value":" instead of print statements. Logging is a systematic way to record program events with timestamps, severity levels, and structured output. It’s the difference between scribbled notes and a proper lab notebook.","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"key":"wPuJeCmmy4"}],"key":"sDEPWE5pa5"},{"type":"heading","depth":3,"position":{"start":{"line":704,"column":1},"end":{"line":704,"column":1}},"children":[{"type":"text","value":"From Print to Logging: A Transformation","position":{"start":{"line":704,"column":1},"end":{"line":704,"column":1}},"key":"WGcsudYWvM"}],"identifier":"from-print-to-logging-a-transformation","label":"From Print to Logging: A Transformation","html_id":"from-print-to-logging-a-transformation","implicit":true,"key":"rgRpI60Z22"},{"type":"paragraph","position":{"start":{"line":706,"column":1},"end":{"line":706,"column":1}},"children":[{"type":"text","value":"Let’s transform print-based debugging into professional logging:","position":{"start":{"line":706,"column":1},"end":{"line":706,"column":1}},"key":"Jr0h2kEasD"}],"key":"T54c1aMBd3"},{"type":"code","lang":"python","value":"# Before: Using print (what we did in Chapter 5)\ndef process_data_print(data):\n    print(\"Starting processing\")\n    print(f\"Got {len(data)} items\")\n    \n    results = []\n    for item in data:\n        if item < 0:\n            print(f\"Warning: negative value {item}\")\n        results.append(abs(item))\n    \n    print(\"Done\")\n    return results","position":{"start":{"line":708,"column":1},"end":{"line":722,"column":1}},"key":"TYx9qt0x9e"},{"type":"code","lang":"python","value":"# After: Using logging\nimport logging\n\n# Configure once at program start\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\ndef process_data_logged(data):\n    logging.info(f\"Starting processing of {len(data)} items\")\n    \n    results = []\n    for i, item in enumerate(data):\n        if item < 0:\n            logging.warning(f\"Negative value {item} at index {i}\")\n        results.append(abs(item))\n    \n    logging.info(f\"Completed: processed {len(results)} items\")\n    return results","position":{"start":{"line":724,"column":1},"end":{"line":745,"column":1}},"key":"KnyyZg9CZc"},{"type":"paragraph","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"key":"kKGkIFDY4C"},{"type":"strong","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"children":[{"type":"text","value":"logging module","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"key":"uSMnafiHji"}],"key":"Uh1ACdCacq"},{"type":"text","value":" provides structured output with:","position":{"start":{"line":747,"column":1},"end":{"line":747,"column":1}},"key":"BSLalo4BOW"}],"key":"SvzlvrvZ0R"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":748,"column":1},"end":{"line":752,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":748,"column":1},"end":{"line":748,"column":1}},"children":[{"type":"strong","position":{"start":{"line":748,"column":1},"end":{"line":748,"column":1}},"children":[{"type":"text","value":"Timestamps","position":{"start":{"line":748,"column":1},"end":{"line":748,"column":1}},"key":"QYE9LqFDm2"}],"key":"KK9Al9GaHk"},{"type":"text","value":" showing exactly when events occurred","position":{"start":{"line":748,"column":1},"end":{"line":748,"column":1}},"key":"QTqfVRRpXa"}],"key":"U1ZX5neMxw"},{"type":"listItem","spread":true,"position":{"start":{"line":749,"column":1},"end":{"line":749,"column":1}},"children":[{"type":"strong","position":{"start":{"line":749,"column":1},"end":{"line":749,"column":1}},"children":[{"type":"text","value":"Severity levels","position":{"start":{"line":749,"column":1},"end":{"line":749,"column":1}},"key":"v5xGtSdZmw"}],"key":"n4d1vHVr0f"},{"type":"text","value":" indicating importance (DEBUG, INFO, WARNING, ERROR, CRITICAL)","position":{"start":{"line":749,"column":1},"end":{"line":749,"column":1}},"key":"ff303u4dj7"}],"key":"DL7qpCHYeq"},{"type":"listItem","spread":true,"position":{"start":{"line":750,"column":1},"end":{"line":750,"column":1}},"children":[{"type":"strong","position":{"start":{"line":750,"column":1},"end":{"line":750,"column":1}},"children":[{"type":"text","value":"Consistent formatting","position":{"start":{"line":750,"column":1},"end":{"line":750,"column":1}},"key":"gpPlmrR3GF"}],"key":"hkgdwJo8RW"},{"type":"text","value":" making logs easy to parse","position":{"start":{"line":750,"column":1},"end":{"line":750,"column":1}},"key":"n8Y7mVBHs1"}],"key":"ubTqCfN7z2"},{"type":"listItem","spread":true,"position":{"start":{"line":751,"column":1},"end":{"line":752,"column":1}},"children":[{"type":"strong","position":{"start":{"line":751,"column":1},"end":{"line":751,"column":1}},"children":[{"type":"text","value":"Flexible output","position":{"start":{"line":751,"column":1},"end":{"line":751,"column":1}},"key":"wOcHpnb74F"}],"key":"oyEh6vsJ2N"},{"type":"text","value":" to console, files, or network","position":{"start":{"line":751,"column":1},"end":{"line":751,"column":1}},"key":"Pdr1qA8K0r"}],"key":"iavvvHN9RN"}],"key":"EwtRNWVBZr"},{"type":"paragraph","position":{"start":{"line":753,"column":1},"end":{"line":753,"column":1}},"children":[{"type":"text","value":"The logged output includes all this metadata:","position":{"start":{"line":753,"column":1},"end":{"line":753,"column":1}},"key":"leeCJyELmY"}],"key":"uQmS60yxot"},{"type":"code","lang":"","value":"2024-11-15 10:23:45 - INFO - Starting processing of 5 items\n2024-11-15 10:23:45 - WARNING - Negative value -2 at index 1\n2024-11-15 10:23:45 - INFO - Completed: processed 5 items","position":{"start":{"line":754,"column":1},"end":{"line":758,"column":1}},"key":"Dm1iBi0brZ"},{"type":"heading","depth":3,"position":{"start":{"line":760,"column":1},"end":{"line":760,"column":1}},"children":[{"type":"text","value":"Logging Levels and When to Use Them","position":{"start":{"line":760,"column":1},"end":{"line":760,"column":1}},"key":"ya4RmuhqUW"}],"identifier":"logging-levels-and-when-to-use-them","label":"Logging Levels and When to Use Them","html_id":"logging-levels-and-when-to-use-them","implicit":true,"key":"D0UvriWYpD"},{"type":"paragraph","position":{"start":{"line":762,"column":1},"end":{"line":762,"column":1}},"children":[{"type":"text","value":"Different ","position":{"start":{"line":762,"column":1},"end":{"line":762,"column":1}},"key":"TLMcWvcTTO"},{"type":"strong","position":{"start":{"line":762,"column":1},"end":{"line":762,"column":1}},"children":[{"type":"text","value":"severity levels","position":{"start":{"line":762,"column":1},"end":{"line":762,"column":1}},"key":"og82wdr1Dp"}],"key":"x5auX9GPPv"},{"type":"text","value":" serve different purposes. Think of them like different types of lab notebook entries:","position":{"start":{"line":762,"column":1},"end":{"line":762,"column":1}},"key":"zYMsJolser"}],"key":"tJDS8Q02sd"},{"type":"code","lang":"python","value":"import logging\n\ndef analyze_measurement(value, expected_range=(0, 100)):\n    \"\"\"Demonstrate all logging levels.\"\"\"\n    \n    # DEBUG: Detailed information for diagnosing problems\n    logging.debug(f\"Raw input: {value}\")\n    \n    if value < expected_range[0]:\n        # ERROR: Something went wrong that prevents normal operation\n        logging.error(f\"Value {value} below minimum {expected_range[0]}\")\n        return None\n    elif value > expected_range[1]:\n        # WARNING: Something unexpected but not fatal\n        logging.warning(f\"Value {value} above typical maximum\")\n    \n    result = value * 2.54  # Convert to metric\n    \n    # INFO: Normal program flow confirmation\n    logging.info(f\"Converted {value} to {result}\")\n    \n    return result\n\n# Set level to control what's shown\nlogging.getLogger().setLevel(logging.DEBUG)  # See everything\n# logging.getLogger().setLevel(logging.WARNING)  # Only warnings and above","position":{"start":{"line":764,"column":1},"end":{"line":791,"column":1}},"key":"nuVcMsVnpL"},{"type":"paragraph","position":{"start":{"line":793,"column":1},"end":{"line":793,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":793,"column":1},"end":{"line":793,"column":1}},"key":"QLhulbEUfk"},{"type":"strong","position":{"start":{"line":793,"column":1},"end":{"line":793,"column":1}},"children":[{"type":"text","value":"logging level","position":{"start":{"line":793,"column":1},"end":{"line":793,"column":1}},"key":"Z1hRXaRAQ4"}],"key":"u2y3keviRB"},{"type":"text","value":" acts as a filter—only messages at or above the set level are displayed. This lets you control verbosity without changing code.","position":{"start":{"line":793,"column":1},"end":{"line":793,"column":1}},"key":"N0E7peN2hD"}],"key":"cr7xFV6iC0"},{"type":"heading","depth":3,"position":{"start":{"line":795,"column":1},"end":{"line":795,"column":1}},"children":[{"type":"text","value":"Logging to Files for Permanent Records","position":{"start":{"line":795,"column":1},"end":{"line":795,"column":1}},"key":"jVox9zKsIX"}],"identifier":"logging-to-files-for-permanent-records","label":"Logging to Files for Permanent Records","html_id":"logging-to-files-for-permanent-records","implicit":true,"key":"YGNZ2RVqMh"},{"type":"paragraph","position":{"start":{"line":797,"column":1},"end":{"line":797,"column":1}},"children":[{"type":"text","value":"For long-running computations, ","position":{"start":{"line":797,"column":1},"end":{"line":797,"column":1}},"key":"ertpMQovwG"},{"type":"strong","position":{"start":{"line":797,"column":1},"end":{"line":797,"column":1}},"children":[{"type":"text","value":"file logging","position":{"start":{"line":797,"column":1},"end":{"line":797,"column":1}},"key":"VoW5rnyE22"}],"key":"yxoZWS9q0K"},{"type":"text","value":" creates permanent records you can analyze later:","position":{"start":{"line":797,"column":1},"end":{"line":797,"column":1}},"key":"zvuzrUHrg1"}],"key":"ALYEvbdJyP"},{"type":"code","lang":"python","value":"import logging\n\n# Configure file logging\nlogging.basicConfig(\n    filename='computation.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\ndef long_computation(data):\n    \"\"\"Simulate a long-running process.\"\"\"\n    logging.info(f\"Starting computation with {len(data)} points\")\n    \n    for i, point in enumerate(data):\n        if i % 1000 == 0:\n            # Progress indicators help track long runs\n            logging.info(f\"Processed {i}/{len(data)} points\")\n        \n        # Actual computation here\n        result = complex_calculation(point)\n        \n        if result is None:\n            logging.error(f\"Failed at point {i}\")\n    \n    logging.info(\"Computation complete\")","position":{"start":{"line":799,"column":1},"end":{"line":825,"column":1}},"key":"PmQtVWrYhv"},{"type":"paragraph","position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"children":[{"type":"text","value":"File logs provide an ","position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"key":"JZSxl1T7zY"},{"type":"strong","position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"children":[{"type":"text","value":"audit trail","position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"key":"Qf9aYENoDT"}],"key":"p6O3pwZ0ly"},{"type":"text","value":"—a permanent record of what happened during execution. This is invaluable for debugging issues that only appear after hours of computation.","position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"key":"UNvxjspKcl"}],"key":"UmFrIAEea3"},{"type":"heading","depth":3,"position":{"start":{"line":829,"column":1},"end":{"line":829,"column":1}},"children":[{"type":"text","value":"📊 ","position":{"start":{"line":829,"column":1},"end":{"line":829,"column":1}},"key":"e9J6Plu8zs"},{"type":"strong","position":{"start":{"line":829,"column":1},"end":{"line":829,"column":1}},"children":[{"type":"text","value":"Performance Profile: Print vs Logging","position":{"start":{"line":829,"column":1},"end":{"line":829,"column":1}},"key":"cio5bk5Sv7"}],"key":"vHtAXCylRL"}],"identifier":"id-performance-profile-print-vs-logging","label":"📊 Performance Profile: Print vs Logging","html_id":"id-performance-profile-print-vs-logging","implicit":true,"key":"eyD5BNJurJ"},{"type":"code","lang":"python","value":"import time\nimport logging\nimport sys\n\n# Test: Impact of debug output\ndata = list(range(10000))\n\n# Measure print\nstart = time.time()\nfor i in data:\n    if i % 1000 == 0:\n        print(f\"Processing {i}\", file=sys.stderr)\nprint_time = time.time() - start\n\n# Measure logging\nstart = time.time()\nfor i in data:\n    if i % 1000 == 0:\n        logging.info(f\"Processing {i}\")\nlog_time = time.time() - start\n\n# Measure logging with DEBUG level (not shown)\nlogging.getLogger().setLevel(logging.WARNING)\nstart = time.time()\nfor i in data:\n    if i % 1000 == 0:\n        logging.debug(f\"Processing {i}\")  # Not displayed\ndebug_time = time.time() - start\n\nprint(f\"Print time: {print_time:.4f}s\")\nprint(f\"Logging time: {log_time:.4f}s\")\nprint(f\"Silent debug time: {debug_time:.4f}s\")\n\n# Typical output:\n# Print time: 0.0234s\n# Logging time: 0.0275s (17% slower but adds timestamps)\n# Silent debug time: 0.0089s (debug calls still have cost)","position":{"start":{"line":831,"column":1},"end":{"line":869,"column":1}},"key":"VnG3mXMIdr"},{"type":"paragraph","position":{"start":{"line":871,"column":1},"end":{"line":871,"column":1}},"children":[{"type":"text","value":"Key insight: Logging is slightly slower than print but provides much more value. Even “silent” debug statements (below the current logging level) have a small ","position":{"start":{"line":871,"column":1},"end":{"line":871,"column":1}},"key":"IEHwlfwq8Y"},{"type":"strong","position":{"start":{"line":871,"column":1},"end":{"line":871,"column":1}},"children":[{"type":"text","value":"performance cost","position":{"start":{"line":871,"column":1},"end":{"line":871,"column":1}},"key":"qlQnANuYAE"}],"key":"GuUQ45ugQr"},{"type":"text","value":" because Python still evaluates the arguments.","position":{"start":{"line":871,"column":1},"end":{"line":871,"column":1}},"key":"vMrGf1LENN"}],"key":"DJAjUIP5Tt"},{"type":"heading","depth":2,"position":{"start":{"line":873,"column":1},"end":{"line":873,"column":1}},"children":[{"type":"text","value":"9.6 Writing Simple Tests","position":{"start":{"line":873,"column":1},"end":{"line":873,"column":1}},"key":"CmNWUn7DGQ"}],"identifier":"id-9-6-writing-simple-tests","label":"9.6 Writing Simple Tests","html_id":"id-9-6-writing-simple-tests","implicit":true,"key":"KicUvdCln7"},{"type":"paragraph","position":{"start":{"line":875,"column":1},"end":{"line":875,"column":1}},"children":[{"type":"strong","position":{"start":{"line":875,"column":1},"end":{"line":875,"column":1}},"children":[{"type":"text","value":"Testing","position":{"start":{"line":875,"column":1},"end":{"line":875,"column":1}},"key":"UJigPCjmee"}],"key":"TOsbhVIVar"},{"type":"text","value":" is the practice of verifying that code behaves as expected. It isn’t about proving code is perfect—it’s about catching obvious bugs before they waste your time. Think of tests as experimental verification of your code’s hypotheses.","position":{"start":{"line":875,"column":1},"end":{"line":875,"column":1}},"key":"JIsxY8eCSp"}],"key":"ij5EIoLezb"},{"type":"heading","depth":3,"position":{"start":{"line":877,"column":1},"end":{"line":877,"column":1}},"children":[{"type":"text","value":"Your First Test Function","position":{"start":{"line":877,"column":1},"end":{"line":877,"column":1}},"key":"OsKXAHFNhP"}],"identifier":"your-first-test-function","label":"Your First Test Function","html_id":"your-first-test-function","implicit":true,"key":"gpG6YsCxdl"},{"type":"paragraph","position":{"start":{"line":879,"column":1},"end":{"line":879,"column":1}},"children":[{"type":"text","value":"A ","position":{"start":{"line":879,"column":1},"end":{"line":879,"column":1}},"key":"pcYbGtNE8g"},{"type":"strong","position":{"start":{"line":879,"column":1},"end":{"line":879,"column":1}},"children":[{"type":"text","value":"test function","position":{"start":{"line":879,"column":1},"end":{"line":879,"column":1}},"key":"iHCm0zpWzs"}],"key":"VeRQpFGqjf"},{"type":"text","value":" is code that verifies other code works correctly. Let’s test a function from Chapter 5, now with better structure:","position":{"start":{"line":879,"column":1},"end":{"line":879,"column":1}},"key":"mrxwHMKw6U"}],"key":"e3fBfP2eth"},{"type":"code","lang":"python","value":"def kelvin_to_celsius(kelvin):\n    \"\"\"Convert Kelvin to Celsius.\"\"\"\n    return kelvin - 273.15\n\ndef test_kelvin_to_celsius():\n    \"\"\"Test temperature conversion.\"\"\"\n    \n    # Test 1: Known values (ground truth)\n    assert kelvin_to_celsius(273.15) == 0, \"Freezing point wrong\"\n    assert kelvin_to_celsius(373.15) == 100, \"Boiling point wrong\"\n    \n    # Test 2: Boundary conditions\n    assert kelvin_to_celsius(0) == -273.15, \"Absolute zero wrong\"\n    \n    # Test 3: Round trip (inverse operations)\n    temp_c = 25\n    temp_k = temp_c + 273.15\n    assert kelvin_to_celsius(temp_k) == temp_c, \"Round trip failed\"\n    \n    print(\"✓ All temperature tests passed!\")\n\n# Run the test\ntest_kelvin_to_celsius()","position":{"start":{"line":881,"column":1},"end":{"line":905,"column":1}},"key":"kyO0hixPts"},{"type":"paragraph","position":{"start":{"line":907,"column":1},"end":{"line":907,"column":1}},"children":[{"type":"text","value":"Good tests check multiple aspects:","position":{"start":{"line":907,"column":1},"end":{"line":907,"column":1}},"key":"ivLDiIxM7t"}],"key":"reCwdB4tHf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":908,"column":1},"end":{"line":912,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":908,"column":1},"end":{"line":908,"column":1}},"children":[{"type":"strong","position":{"start":{"line":908,"column":1},"end":{"line":908,"column":1}},"children":[{"type":"text","value":"Known values","position":{"start":{"line":908,"column":1},"end":{"line":908,"column":1}},"key":"EA7sfq91Hj"}],"key":"PcK7Vypjd5"},{"type":"text","value":": Cases where you know the exact answer","position":{"start":{"line":908,"column":1},"end":{"line":908,"column":1}},"key":"RKvzl9RWGP"}],"key":"gdp448e5uZ"},{"type":"listItem","spread":true,"position":{"start":{"line":909,"column":1},"end":{"line":909,"column":1}},"children":[{"type":"strong","position":{"start":{"line":909,"column":1},"end":{"line":909,"column":1}},"children":[{"type":"text","value":"Boundary conditions","position":{"start":{"line":909,"column":1},"end":{"line":909,"column":1}},"key":"zNy6aUrCBo"}],"key":"ZLfdAQB2M6"},{"type":"text","value":": Edge cases and limits","position":{"start":{"line":909,"column":1},"end":{"line":909,"column":1}},"key":"TZyDC8qCOo"}],"key":"BFskexHNwJ"},{"type":"listItem","spread":true,"position":{"start":{"line":910,"column":1},"end":{"line":910,"column":1}},"children":[{"type":"strong","position":{"start":{"line":910,"column":1},"end":{"line":910,"column":1}},"children":[{"type":"text","value":"Round trips","position":{"start":{"line":910,"column":1},"end":{"line":910,"column":1}},"key":"qUjZB0P7HO"}],"key":"sX8n1Fd58y"},{"type":"text","value":": Operations that should cancel out","position":{"start":{"line":910,"column":1},"end":{"line":910,"column":1}},"key":"MmrfjROaZw"}],"key":"iCh3u8hFTp"},{"type":"listItem","spread":true,"position":{"start":{"line":911,"column":1},"end":{"line":912,"column":1}},"children":[{"type":"strong","position":{"start":{"line":911,"column":1},"end":{"line":911,"column":1}},"children":[{"type":"text","value":"Properties","position":{"start":{"line":911,"column":1},"end":{"line":911,"column":1}},"key":"arRcYCXyIV"}],"key":"ETTIM563i9"},{"type":"text","value":": Mathematical relationships that must hold","position":{"start":{"line":911,"column":1},"end":{"line":911,"column":1}},"key":"VUtnR2l08X"}],"key":"IwIbwoOgSC"}],"key":"iRoe2N2gLy"},{"type":"heading","depth":3,"position":{"start":{"line":913,"column":1},"end":{"line":913,"column":1}},"children":[{"type":"text","value":"Testing Properties, Not Just Values","position":{"start":{"line":913,"column":1},"end":{"line":913,"column":1}},"key":"THmyKO0lzn"}],"identifier":"testing-properties-not-just-values","label":"Testing Properties, Not Just Values","html_id":"testing-properties-not-just-values","implicit":true,"key":"QdiCQxh6HX"},{"type":"paragraph","position":{"start":{"line":915,"column":1},"end":{"line":915,"column":1}},"children":[{"type":"strong","position":{"start":{"line":915,"column":1},"end":{"line":915,"column":1}},"children":[{"type":"text","value":"Property-based testing","position":{"start":{"line":915,"column":1},"end":{"line":915,"column":1}},"key":"TIMgF6rmWi"}],"key":"kESIiII3eE"},{"type":"text","value":" verifies that mathematical properties hold regardless of specific values:","position":{"start":{"line":915,"column":1},"end":{"line":915,"column":1}},"key":"n3g5iNkida"}],"key":"Izg6ohyQM8"},{"type":"code","lang":"python","value":"def test_mean_properties():\n    \"\"\"Test properties that must hold for any mean function.\"\"\"\n    \n    # Property 1: Mean of identical values equals that value\n    same = [42.0] * 10\n    assert calculate_mean(same) == 42.0\n    \n    # Property 2: Mean is within data range\n    data = [1, 2, 3, 4, 5]\n    mean = calculate_mean(data)\n    assert min(data) <= mean <= max(data)\n    \n    # Property 3: Scaling data scales mean (linearity)\n    scaled = [x * 2 for x in data]\n    assert calculate_mean(scaled) == mean * 2\n    \n    # Property 4: Mean of two values is their midpoint\n    assert calculate_mean([10, 20]) == 15\n    \n    print(\"✓ Mean properties verified!\")","position":{"start":{"line":917,"column":1},"end":{"line":938,"column":1}},"key":"d6hCG30hSC"},{"type":"paragraph","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"children":[{"type":"text","value":"Properties are more robust than specific values because they test the underlying mathematics rather than individual cases.","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"key":"Uh8YA0jDdH"}],"key":"j05Y06js2G"},{"type":"heading","depth":3,"position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"children":[{"type":"text","value":"Testing Edge Cases","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"key":"mbgmDH0NOI"}],"identifier":"testing-edge-cases","label":"Testing Edge Cases","html_id":"testing-edge-cases","implicit":true,"key":"za9FCxOyBb"},{"type":"paragraph","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"strong","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"text","value":"Edge cases","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"key":"J74c9nEpZZ"}],"key":"UMXKYDkkuQ"},{"type":"text","value":" are unusual inputs that often reveal bugs. They’re the boundaries and special conditions where code is most likely to fail:","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"key":"orRpsGTBNC"}],"key":"rLpXXmHYoj"},{"type":"code","lang":"python","value":"def remove_outliers(data, threshold=3):\n    \"\"\"Remove values more than threshold stdevs from mean.\"\"\"\n    if len(data) == 0:\n        return []\n    \n    mean = sum(data) / len(data)\n    variance = sum((x - mean)**2 for x in data) / len(data)\n    stdev = variance ** 0.5\n    \n    if stdev == 0:  # All values identical\n        return data\n    \n    return [x for x in data if abs(x - mean) <= threshold * stdev]\n\ndef test_remove_outliers():\n    \"\"\"Test outlier removal with edge cases.\"\"\"\n    \n    # Normal case\n    data = [1, 2, 3, 100, 4, 5]\n    cleaned = remove_outliers(data)\n    assert 100 not in cleaned\n    assert 3 in cleaned\n    \n    # Edge case 1: Empty list\n    assert remove_outliers([]) == []\n    \n    # Edge case 2: Single value\n    assert remove_outliers([42]) == [42]\n    \n    # Edge case 3: All identical (zero variance)\n    same = [5, 5, 5, 5]\n    assert remove_outliers(same) == same\n    \n    # Edge case 4: Two values far apart\n    two = [0, 1000]\n    result = remove_outliers(two, threshold=1)\n    assert len(result) <= 2  # Might remove one or both\n    \n    print(\"✓ Edge cases handled correctly!\")\n\ntest_remove_outliers()","position":{"start":{"line":946,"column":1},"end":{"line":988,"column":1}},"key":"cRUxasWQSC"},{"type":"paragraph","position":{"start":{"line":990,"column":1},"end":{"line":990,"column":1}},"children":[{"type":"text","value":"Common edge cases to test:","position":{"start":{"line":990,"column":1},"end":{"line":990,"column":1}},"key":"asder9Gikn"}],"key":"cXwlkw3NIy"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":991,"column":1},"end":{"line":996,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":991,"column":1},"end":{"line":991,"column":1}},"children":[{"type":"strong","position":{"start":{"line":991,"column":1},"end":{"line":991,"column":1}},"children":[{"type":"text","value":"Empty input","position":{"start":{"line":991,"column":1},"end":{"line":991,"column":1}},"key":"YuSK8JaN9q"}],"key":"LcXnauirFS"},{"type":"text","value":": No data at all","position":{"start":{"line":991,"column":1},"end":{"line":991,"column":1}},"key":"fKMsKtsrAW"}],"key":"XGfFfaqBW0"},{"type":"listItem","spread":true,"position":{"start":{"line":992,"column":1},"end":{"line":992,"column":1}},"children":[{"type":"strong","position":{"start":{"line":992,"column":1},"end":{"line":992,"column":1}},"children":[{"type":"text","value":"Single element","position":{"start":{"line":992,"column":1},"end":{"line":992,"column":1}},"key":"TyzU8hBR6e"}],"key":"PwXEYuWzFU"},{"type":"text","value":": Minimum valid input","position":{"start":{"line":992,"column":1},"end":{"line":992,"column":1}},"key":"Ri0lhxkf0y"}],"key":"yw8hyVUVcD"},{"type":"listItem","spread":true,"position":{"start":{"line":993,"column":1},"end":{"line":993,"column":1}},"children":[{"type":"strong","position":{"start":{"line":993,"column":1},"end":{"line":993,"column":1}},"children":[{"type":"text","value":"Identical values","position":{"start":{"line":993,"column":1},"end":{"line":993,"column":1}},"key":"wRrzt6oI36"}],"key":"KTsd83pgpA"},{"type":"text","value":": No variation","position":{"start":{"line":993,"column":1},"end":{"line":993,"column":1}},"key":"n7foyF6UPd"}],"key":"WxilepcBNZ"},{"type":"listItem","spread":true,"position":{"start":{"line":994,"column":1},"end":{"line":994,"column":1}},"children":[{"type":"strong","position":{"start":{"line":994,"column":1},"end":{"line":994,"column":1}},"children":[{"type":"text","value":"Extreme values","position":{"start":{"line":994,"column":1},"end":{"line":994,"column":1}},"key":"L6OXNBlibt"}],"key":"Dpucf6FYSV"},{"type":"text","value":": Very large or small numbers","position":{"start":{"line":994,"column":1},"end":{"line":994,"column":1}},"key":"XZvor4Z1Ho"}],"key":"p5ZpVPMW3W"},{"type":"listItem","spread":true,"position":{"start":{"line":995,"column":1},"end":{"line":996,"column":1}},"children":[{"type":"strong","position":{"start":{"line":995,"column":1},"end":{"line":995,"column":1}},"children":[{"type":"text","value":"Boundary values","position":{"start":{"line":995,"column":1},"end":{"line":995,"column":1}},"key":"C6AbdBt39f"}],"key":"lOiLSFlGbZ"},{"type":"text","value":": Exactly at limits","position":{"start":{"line":995,"column":1},"end":{"line":995,"column":1}},"key":"msys6j7i5V"}],"key":"qZHM7EDav6"}],"key":"Cly4F12eTP"},{"type":"heading","depth":3,"position":{"start":{"line":997,"column":1},"end":{"line":997,"column":1}},"children":[{"type":"text","value":"🎯 ","position":{"start":{"line":997,"column":1},"end":{"line":997,"column":1}},"key":"gxmSWfIT7b"},{"type":"strong","position":{"start":{"line":997,"column":1},"end":{"line":997,"column":1}},"children":[{"type":"text","value":"Why This Matters: The Ariane 5 Disaster","position":{"start":{"line":997,"column":1},"end":{"line":997,"column":1}},"key":"KpXQpzkIIJ"}],"key":"GNevYplYFt"}],"identifier":"id-why-this-matters-the-ariane-5-disaster","label":"🎯 Why This Matters: The Ariane 5 Disaster","html_id":"id-why-this-matters-the-ariane-5-disaster","implicit":true,"key":"BiEVL0QtHe"},{"type":"paragraph","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"children":[{"type":"text","value":"In 1996, the Ariane 5 rocket exploded 37 seconds after launch, destroying $370 million in satellites. The cause? ","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"key":"JG2SpqLpyK"},{"type":"strong","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"children":[{"type":"text","value":"Reused code","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"key":"Rj1OXFgleN"}],"key":"ObH33gmbVf"},{"type":"text","value":" from Ariane 4 wasn’t tested with Ariane 5’s flight parameters. A single untested edge case—a velocity value that exceeded 16-bit integer limits—caused an ","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"key":"Tv7IB0cT3y"},{"type":"strong","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"children":[{"type":"text","value":"integer overflow","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"key":"M3WMHJF7TM"}],"key":"hxucs7G5qX"},{"type":"text","value":" error.","position":{"start":{"line":999,"column":1},"end":{"line":999,"column":1}},"key":"cL5kfmjv1e"}],"key":"qUkPzsttpH"},{"type":"code","lang":"python","value":"def velocity_to_int16(velocity):\n    \"\"\"What went wrong in Ariane 5.\"\"\"\n    # This should have been tested!\n    assert -32768 <= velocity <= 32767, \\\n        f\"Velocity {velocity} exceeds 16-bit range\"\n    return int(velocity)\n\n# Ariane 4 test (passed)\ntest_velocity_to_int16(25000)  # OK\n\n# Ariane 5 test (never run!)\ntest_velocity_to_int16(40000)  # Would have caught the bug!","position":{"start":{"line":1001,"column":1},"end":{"line":1014,"column":1}},"key":"W1EefiTXW5"},{"type":"paragraph","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"children":[{"type":"text","value":"Testing with realistic data ranges would have prevented this disaster. The lesson: always test with the actual conditions your code will face, not just convenient test values.","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"key":"vlHh3xeRsJ"}],"key":"nEpRopQ5DK"},{"type":"heading","depth":2,"position":{"start":{"line":1018,"column":1},"end":{"line":1018,"column":1}},"children":[{"type":"text","value":"9.7 Debugging Strategies","position":{"start":{"line":1018,"column":1},"end":{"line":1018,"column":1}},"key":"CWqzZIoMpy"}],"identifier":"id-9-7-debugging-strategies","label":"9.7 Debugging Strategies","html_id":"id-9-7-debugging-strategies","implicit":true,"key":"SMdaUlrVTO"},{"type":"paragraph","position":{"start":{"line":1020,"column":1},"end":{"line":1020,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1020,"column":1},"end":{"line":1020,"column":1}},"children":[{"type":"text","value":"Debugging","position":{"start":{"line":1020,"column":1},"end":{"line":1020,"column":1}},"key":"lqT4votEeQ"}],"key":"iSFWAHfO97"},{"type":"text","value":" is the process of finding and fixing errors in code. It’s detective work. Instead of randomly changing code hoping it works, follow a systematic approach that mirrors the scientific method.","position":{"start":{"line":1020,"column":1},"end":{"line":1020,"column":1}},"key":"Y6JyqRRQYK"}],"key":"KNU4wZb3io"},{"type":"heading","depth":3,"position":{"start":{"line":1022,"column":1},"end":{"line":1022,"column":1}},"children":[{"type":"text","value":"The Scientific Method of Debugging","position":{"start":{"line":1022,"column":1},"end":{"line":1022,"column":1}},"key":"OhnoqqWPqA"}],"identifier":"the-scientific-method-of-debugging","label":"The Scientific Method of Debugging","html_id":"the-scientific-method-of-debugging","implicit":true,"key":"xqn6eXdGbN"},{"type":"paragraph","position":{"start":{"line":1024,"column":1},"end":{"line":1024,"column":1}},"children":[{"type":"text","value":"Debugging follows the same process as scientific research—observation, hypothesis, experimentation, and analysis:","position":{"start":{"line":1024,"column":1},"end":{"line":1024,"column":1}},"key":"DUKNKO4xBd"}],"key":"KY0cL25l8G"},{"type":"code","lang":"python","value":"def demonstrate_debugging_process():\n    \"\"\"Show systematic debugging approach.\"\"\"\n    \n    # THE PROBLEM: Function returns wrong result\n    def buggy_variance(data):\n        \"\"\"Calculate variance (has a bug).\"\"\"\n        mean = sum(data) / len(data)\n        diffs = [x - mean for x in data]\n        squares = [d*d for d in diffs]\n        return sum(squares) / len(data) - 1  # Bug here!\n    \n    # STEP 1: OBSERVE - Identify the symptom\n    test_data = [2, 4, 6]\n    result = buggy_variance(test_data)\n    expected = 4.0  # Known correct answer\n    print(f\"Expected {expected}, got {result}\")  # Wrong!\n    \n    # STEP 2: HYPOTHESIZE - Form theories\n    # Theory 1: Mean calculation wrong?\n    # Theory 2: Squared differences wrong?\n    # Theory 3: Final division wrong?\n    \n    # STEP 3: EXPERIMENT - Test each theory\n    mean = sum(test_data) / len(test_data)\n    print(f\"Mean: {mean}\")  # Correct: 4.0\n    \n    diffs = [x - mean for x in test_data]\n    print(f\"Differences: {diffs}\")  # Correct: [-2, 0, 2]\n    \n    squares = [d*d for d in diffs]\n    print(f\"Squares: {squares}\")  # Correct: [4, 0, 4]\n    \n    # Found it! The bug is here:\n    print(f\"Sum/len: {sum(squares)/len(test_data)}\")  # 2.67\n    print(f\"Sum/len - 1: {sum(squares)/len(test_data) - 1}\")  # 1.67 (wrong!)\n    print(f\"Sum/(len-1): {sum(squares)/(len(test_data)-1)}\")  # 4.0 (correct!)\n    \n    # STEP 4: FIX - Correct the bug\n    def variance_fixed(data):\n        mean = sum(data) / len(data)\n        diffs = [x - mean for x in data]\n        squares = [d*d for d in diffs]\n        return sum(squares) / (len(data) - 1)  # Fixed!\n\ndemonstrate_debugging_process()","position":{"start":{"line":1026,"column":1},"end":{"line":1072,"column":1}},"key":"XlFE9uqiXO"},{"type":"paragraph","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"children":[{"type":"text","value":"This ","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"key":"w6oCB1Mo5R"},{"type":"strong","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"children":[{"type":"text","value":"systematic approach","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"key":"zjglPhGHGz"}],"key":"dKkgB5tj3n"},{"type":"text","value":" is much more efficient than random changes. By testing hypotheses one at a time, you isolate the problem quickly.","position":{"start":{"line":1074,"column":1},"end":{"line":1074,"column":1}},"key":"hgjRKcPVMX"}],"key":"rbA0Lw1SVF"},{"type":"heading","depth":3,"position":{"start":{"line":1076,"column":1},"end":{"line":1076,"column":1}},"children":[{"type":"text","value":"Binary Search Debugging","position":{"start":{"line":1076,"column":1},"end":{"line":1076,"column":1}},"key":"bLVCJhrGqT"}],"identifier":"binary-search-debugging","label":"Binary Search Debugging","html_id":"binary-search-debugging","implicit":true,"key":"de1h7OuQh9"},{"type":"paragraph","position":{"start":{"line":1078,"column":1},"end":{"line":1078,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1078,"column":1},"end":{"line":1078,"column":1}},"children":[{"type":"text","value":"Binary search debugging","position":{"start":{"line":1078,"column":1},"end":{"line":1078,"column":1}},"key":"N8mXDcgfHm"}],"key":"zFHrOmdsPL"},{"type":"text","value":" uses the divide-and-conquer principle to isolate problems in complex code:","position":{"start":{"line":1078,"column":1},"end":{"line":1078,"column":1}},"key":"gxy0P6xNi3"}],"key":"w6nt4QzmlO"},{"type":"code","lang":"python","value":"def complex_calculation(data):\n    \"\"\"A multi-step calculation to debug.\"\"\"\n    # Add checkpoints to bisect the problem\n    \n    # First half of calculation\n    step1 = [x * 2 for x in data]\n    print(f\"After step 1: {step1[:3]}...\")  # Checkpoint 1\n    \n    step2 = [x + 10 for x in step1]\n    print(f\"After step 2: {step2[:3]}...\")  # Checkpoint 2\n    \n    # If error occurs here, problem is in first half\n    # If error occurs below, problem is in second half\n    \n    step3 = [x / 3 for x in step2]\n    print(f\"After step 3: {step3[:3]}...\")  # Checkpoint 3\n    \n    step4 = sum(step3) / len(step3)\n    print(f\"Final result: {step4}\")  # Checkpoint 4\n    \n    return step4","position":{"start":{"line":1080,"column":1},"end":{"line":1102,"column":1}},"key":"DrBxgt7UuC"},{"type":"paragraph","position":{"start":{"line":1104,"column":1},"end":{"line":1104,"column":1}},"children":[{"type":"text","value":"By adding ","position":{"start":{"line":1104,"column":1},"end":{"line":1104,"column":1}},"key":"TAjDFB9IST"},{"type":"strong","position":{"start":{"line":1104,"column":1},"end":{"line":1104,"column":1}},"children":[{"type":"text","value":"checkpoints","position":{"start":{"line":1104,"column":1},"end":{"line":1104,"column":1}},"key":"BdCMb8VfEB"}],"key":"poG9WBSHFh"},{"type":"text","value":" (diagnostic output) at strategic locations, you can quickly determine which section contains the bug. This is much faster than checking every line.","position":{"start":{"line":1104,"column":1},"end":{"line":1104,"column":1}},"key":"zK0lHPQ6Oy"}],"key":"NO1EcPHoYs"},{"type":"heading","depth":3,"position":{"start":{"line":1106,"column":1},"end":{"line":1106,"column":1}},"children":[{"type":"text","value":"Debugging Flowchart","position":{"start":{"line":1106,"column":1},"end":{"line":1106,"column":1}},"key":"If1mj9Axcr"}],"identifier":"debugging-flowchart","label":"Debugging Flowchart","html_id":"debugging-flowchart","implicit":true,"key":"PaloaGoQED"},{"type":"code","lang":"","value":"Start: Code produces wrong output\n    ↓\nCan you reproduce the error?\n    No → Add logging, gather more info\n    Yes ↓\n    \nIs the input what you expected?\n    No → Fix input validation\n    Yes ↓\n    \nAdd checkpoint prints at midpoint\n    ↓\nIs the error before or after midpoint?\n    Before → Check first half\n    After → Check second half\n    ↓\n    \nRepeat bisection until problem isolated\n    ↓\nFound the specific line with the bug\n    ↓\nFix and verify with test case\n    ↓\nEnd: Add regression test to prevent reoccurrence","position":{"start":{"line":1108,"column":1},"end":{"line":1133,"column":1}},"key":"irlrNf4Hpc"},{"type":"paragraph","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"text","value":"This ","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"IyBoKLupBP"},{"type":"strong","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"children":[{"type":"text","value":"decision tree","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"G0uGhiITfx"}],"key":"dbzXsMcp7n"},{"type":"text","value":" approach ensures you don’t miss steps and helps you debug efficiently.","position":{"start":{"line":1135,"column":1},"end":{"line":1135,"column":1}},"key":"n8BHwjQe0X"}],"key":"IMJjg9l98t"},{"type":"heading","depth":3,"position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"children":[{"type":"text","value":"Common Debugging Patterns","position":{"start":{"line":1137,"column":1},"end":{"line":1137,"column":1}},"key":"f56SSJ3vRk"}],"identifier":"common-debugging-patterns","label":"Common Debugging Patterns","html_id":"common-debugging-patterns","implicit":true,"key":"Lu9znIWoT7"},{"type":"paragraph","position":{"start":{"line":1139,"column":1},"end":{"line":1139,"column":1}},"children":[{"type":"text","value":"Certain bugs appear repeatedly. Recognizing these patterns speeds debugging:","position":{"start":{"line":1139,"column":1},"end":{"line":1139,"column":1}},"key":"LOVV5Mz72Z"}],"key":"lDDxYuyfKt"},{"type":"code","lang":"python","value":"# Pattern 1: The Off-By-One Error\ndef find_median_buggy(sorted_data):\n    \"\"\"Common bug: forgetting 0-indexing.\"\"\"\n    n = len(sorted_data)\n    middle = n // 2\n    return sorted_data[middle]  # Bug: wrong for even-length lists\n\ndef find_median_fixed(sorted_data):\n    \"\"\"Fixed: handle even and odd lengths.\"\"\"\n    n = len(sorted_data)\n    if n % 2 == 1:  # Odd length: single middle value\n        return sorted_data[n // 2]\n    else:  # Even length: average of two middle values\n        return (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2","position":{"start":{"line":1141,"column":1},"end":{"line":1156,"column":1}},"key":"gOCj395Ayr"},{"type":"paragraph","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"children":[{"type":"text","value":"Off-by-one errors","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"key":"D09zBus0kc"}],"key":"jW8MkbANSA"},{"type":"text","value":" occur when you forget that Python uses zero-based indexing or miscalculate array boundaries.","position":{"start":{"line":1158,"column":1},"end":{"line":1158,"column":1}},"key":"yKlpCXMIPU"}],"key":"V2oWpGMHNC"},{"type":"code","lang":"python","value":"# Pattern 2: The Mutation Surprise\ndef normalize_buggy(data):\n    \"\"\"Bug: modifying input data while reading it.\"\"\"\n    for i in range(len(data)):\n        data[i] = data[i] / max(data)  # Max changes as we modify!\n    return data\n\ndef normalize_fixed(data):\n    \"\"\"Fixed: calculate max first.\"\"\"\n    max_val = max(data)  # Store before modifying\n    return [x / max_val for x in data]  # Create new list","position":{"start":{"line":1160,"column":1},"end":{"line":1172,"column":1}},"key":"d0cqShejJi"},{"type":"paragraph","position":{"start":{"line":1174,"column":1},"end":{"line":1174,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1174,"column":1},"end":{"line":1174,"column":1}},"children":[{"type":"text","value":"Mutation bugs","position":{"start":{"line":1174,"column":1},"end":{"line":1174,"column":1}},"key":"uWXFIYavVN"}],"key":"aYYdkm9KLi"},{"type":"text","value":" happen when you modify data while still using it, causing unexpected behavior.","position":{"start":{"line":1174,"column":1},"end":{"line":1174,"column":1}},"key":"WuZwc9rKEg"}],"key":"y99PVrnQkB"},{"type":"heading","depth":3,"position":{"start":{"line":1176,"column":1},"end":{"line":1176,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":1176,"column":1},"end":{"line":1176,"column":1}},"key":"C8RGcG13Ov"},{"type":"strong","position":{"start":{"line":1176,"column":1},"end":{"line":1176,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":1176,"column":1},"end":{"line":1176,"column":1}},"key":"aEAIcsWgsi"}],"key":"nWxNkofJzm"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding-2","implicit":true,"key":"HHPcWGq6p7"},{"type":"paragraph","position":{"start":{"line":1178,"column":1},"end":{"line":1178,"column":1}},"children":[{"type":"text","value":"This code should double each value, but sometimes produces wrong results. What’s the bug?","position":{"start":{"line":1178,"column":1},"end":{"line":1178,"column":1}},"key":"Et2GeawOwy"}],"key":"TZxDCSdwUJ"},{"type":"code","lang":"python","value":"def double_values(data):\n    for i in range(len(data)):\n        data[i] *= 2\n    return data\n\n# Test\noriginal = [1, 2, 3]\ndoubled = double_values(original)\nprint(f\"Original: {original}\")\nprint(f\"Doubled: {doubled}\")","position":{"start":{"line":1180,"column":1},"end":{"line":1191,"column":1}},"key":"ag21mKdMaE"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"OXuODCzusc"}],"key":"esLAOMxDSo"},{"type":"paragraph","children":[{"type":"text","value":"The bug is ","key":"p3P9wxYNkY"},{"type":"strong","children":[{"type":"text","value":"in-place modification","key":"bRMDlZ3Tf7"}],"key":"LD2RBt5xEE"},{"type":"text","value":"—the function modifies the input list directly. After calling ","key":"PC4nn0qft4"},{"type":"inlineCode","value":"double_values(original)","key":"G83C5gBBqH"},{"type":"text","value":", both ","key":"iXsvu5DHQu"},{"type":"inlineCode","value":"original","key":"CIa4B9L7kf"},{"type":"text","value":" and ","key":"zG3ue4s0aV"},{"type":"inlineCode","value":"doubled","key":"X9P30lt1rs"},{"type":"text","value":" point to the same modified list.","key":"XFyMvw4J4b"}],"key":"aevbc1cjDc"},{"type":"paragraph","children":[{"type":"text","value":"Output:","key":"mg4tRUQvtJ"}],"key":"m9hNvLxCpT"},{"type":"code","lang":null,"meta":null,"value":"Original: [2, 4, 6]  # Changed!\nDoubled: [2, 4, 6]","key":"qwCWdRyrVq"},{"type":"paragraph","children":[{"type":"text","value":"This violates the ","key":"suTJUbYuce"},{"type":"strong","children":[{"type":"text","value":"principle of least surprise","key":"LiqenlfxGQ"}],"key":"pTbsPKb2M6"},{"type":"text","value":"—functions shouldn’t modify their inputs unless that’s explicitly their purpose. In Python, lists are ","key":"lN65O2Mtro"},{"type":"strong","children":[{"type":"text","value":"mutable","key":"AMSM0IVoL4"}],"key":"uSYePAngIf"},{"type":"text","value":" (can be changed), and when you pass a list to a function, you’re passing a reference to the same list, not a copy.","key":"SnUHDje0LT"}],"key":"xf7kd31Ri5"},{"type":"paragraph","children":[{"type":"text","value":"Fix:","key":"LKnggkb2G4"}],"key":"eoNzTX28RH"},{"type":"code","lang":"python","meta":null,"value":"def double_values_fixed(data):\n    \"\"\"Create new list without modifying input.\"\"\"\n    return [x * 2 for x in data]\n\n# Or if you must modify in-place, make it clear:\ndef double_values_inplace(data):\n    \"\"\"Modifies data in-place (changes input!).\"\"\"\n    for i in range(len(data)):\n        data[i] *= 2\n    # Don't return anything to signal in-place modification","key":"gHnzRkobPA"},{"type":"paragraph","children":[{"type":"text","value":"This bug is common because Python’s ","key":"bQEEHwkda8"},{"type":"strong","children":[{"type":"text","value":"pass-by-object-reference","key":"dCA0WthMIP"}],"key":"FUkYWN8EGe"},{"type":"text","value":" behavior isn’t always intuitive.","key":"yW4s3YiODp"}],"key":"LMSNA1b7OQ"}],"key":"F0GLtM6e6N"},{"type":"heading","depth":2,"position":{"start":{"line":1223,"column":1},"end":{"line":1223,"column":1}},"children":[{"type":"text","value":"Practice Exercises","position":{"start":{"line":1223,"column":1},"end":{"line":1223,"column":1}},"key":"PH0O8uc2aS"}],"identifier":"practice-exercises","label":"Practice Exercises","html_id":"practice-exercises","implicit":true,"key":"ry8qvShusU"},{"type":"heading","depth":3,"position":{"start":{"line":1225,"column":1},"end":{"line":1225,"column":1}},"children":[{"type":"text","value":"Exercise 9.1: Robust Data Reader","position":{"start":{"line":1225,"column":1},"end":{"line":1225,"column":1}},"key":"g65vI1bei4"}],"identifier":"exercise-9-1-robust-data-reader","label":"Exercise 9.1: Robust Data Reader","html_id":"exercise-9-1-robust-data-reader","implicit":true,"key":"kHybGeAoiE"},{"type":"paragraph","position":{"start":{"line":1227,"column":1},"end":{"line":1227,"column":1}},"children":[{"type":"text","value":"Create a function that safely reads numeric data from a file. Build it incrementally:","position":{"start":{"line":1227,"column":1},"end":{"line":1227,"column":1}},"key":"t3bES0DqN9"}],"key":"IoXooRYe5W"},{"type":"code","lang":"python","value":"# Part A: Handle missing files (5 lines)\ndef read_file_basic(filename):\n    \"\"\"Step 1: Handle missing files.\"\"\"\n    # Your code here\n    pass\n\n# Part B: Parse numbers safely (10 lines)\ndef read_numbers_safe(filename):\n    \"\"\"Step 2: Add number parsing.\"\"\"\n    # Build on Part A\n    pass\n\n# Part C: Skip invalid lines (15 lines)\ndef read_data_file(filename):\n    \"\"\"Step 3: Complete robust reader.\n    \n    Should:\n    - Handle missing files gracefully\n    - Skip invalid lines with warning\n    - Return None if no valid data\n    - Return list of floats if successful\n    \"\"\"\n    # Your complete implementation\n    pass\n\n# Test cases:\n# 1. test_missing.txt (doesn't exist)\n# 2. test_empty.txt (empty file)\n# 3. test_mixed.txt (numbers and text)\n# 4. test_valid.txt (all valid numbers)","position":{"start":{"line":1229,"column":1},"end":{"line":1260,"column":1}},"key":"TtYida2Pe0"},{"type":"heading","depth":3,"position":{"start":{"line":1262,"column":1},"end":{"line":1262,"column":1}},"children":[{"type":"text","value":"Exercise 9.2: Validated Statistics Function","position":{"start":{"line":1262,"column":1},"end":{"line":1262,"column":1}},"key":"jCc9ASgQ2l"}],"identifier":"exercise-9-2-validated-statistics-function","label":"Exercise 9.2: Validated Statistics Function","html_id":"exercise-9-2-validated-statistics-function","implicit":true,"key":"fG0QMG1iru"},{"type":"paragraph","position":{"start":{"line":1264,"column":1},"end":{"line":1264,"column":1}},"children":[{"type":"text","value":"Build on Chapter 7 to create a robust statistics calculator:","position":{"start":{"line":1264,"column":1},"end":{"line":1264,"column":1}},"key":"tI3GbtR7Br"}],"key":"ayPcylENrV"},{"type":"code","lang":"python","value":"import numpy as np\n\ndef calculate_stats(data):\n    \"\"\"\n    Calculate statistics with full validation.\n    \n    Should:\n    - Validate input is numeric array\n    - Handle empty arrays\n    - Check for NaN and infinity\n    - Warn about outliers (values > 3 std from mean)\n    - Return dict with mean, std, min, max, n_valid\n    \n    Returns None if data cannot be processed.\n    \"\"\"\n    # Your implementation here\n    pass\n\n# Test with:\ntest_cases = [\n    [1, 2, 3, 4, 5],           # Normal\n    [],                         # Empty\n    [1, 2, np.nan, 4],         # Contains NaN\n    [1, 2, 3, 100],            # Contains outlier\n    [1, np.inf, 3],            # Contains infinity\n]","position":{"start":{"line":1266,"column":1},"end":{"line":1293,"column":1}},"key":"hNkoaj5OfH"},{"type":"heading","depth":3,"position":{"start":{"line":1295,"column":1},"end":{"line":1295,"column":1}},"children":[{"type":"text","value":"Exercise 9.3: Comprehensive Test Suite","position":{"start":{"line":1295,"column":1},"end":{"line":1295,"column":1}},"key":"sTb6cxIY9Y"}],"identifier":"exercise-9-3-comprehensive-test-suite","label":"Exercise 9.3: Comprehensive Test Suite","html_id":"exercise-9-3-comprehensive-test-suite","implicit":true,"key":"IscGKQFeZZ"},{"type":"paragraph","position":{"start":{"line":1297,"column":1},"end":{"line":1297,"column":1}},"children":[{"type":"text","value":"Write thorough tests for this function:","position":{"start":{"line":1297,"column":1},"end":{"line":1297,"column":1}},"key":"kBceHdBNZ1"}],"key":"LDEOl4XT5M"},{"type":"code","lang":"python","value":"def find_peaks(data, threshold=0):\n    \"\"\"Find local maxima above threshold.\n    \n    A peak is a value greater than both neighbors\n    and above the threshold.\n    \"\"\"\n    if len(data) < 3:\n        return []  # No peaks possible\n    \n    peaks = []\n    for i in range(1, len(data) - 1):\n        if data[i] > threshold:\n            if data[i] > data[i-1] and data[i] > data[i+1]:\n                peaks.append(i)\n    \n    return peaks\n\ndef test_find_peaks():\n    \"\"\"Write comprehensive tests.\n    \n    Should test:\n    - Normal case with clear peaks\n    - No peaks (monotonic data)\n    - All peaks (zigzag data)\n    - Edge cases (empty, single value, two values)\n    - Threshold filtering\n    - Plateau handling (consecutive equal values)\n    \"\"\"\n    # Your tests here\n    pass","position":{"start":{"line":1299,"column":1},"end":{"line":1330,"column":1}},"key":"lpz0YuU42P"},{"type":"heading","depth":3,"position":{"start":{"line":1332,"column":1},"end":{"line":1332,"column":1}},"children":[{"type":"text","value":"Exercise 9.4: Debug and Fix","position":{"start":{"line":1332,"column":1},"end":{"line":1332,"column":1}},"key":"vcJiPLqNKK"}],"identifier":"exercise-9-4-debug-and-fix","label":"Exercise 9.4: Debug and Fix","html_id":"exercise-9-4-debug-and-fix","implicit":true,"key":"cTwf5ZWLzE"},{"type":"paragraph","position":{"start":{"line":1334,"column":1},"end":{"line":1334,"column":1}},"children":[{"type":"text","value":"This data processing pipeline has multiple bugs. Find and fix them:","position":{"start":{"line":1334,"column":1},"end":{"line":1334,"column":1}},"key":"FsxK3cphbq"}],"key":"O6Tp6J5tdN"},{"type":"code","lang":"python","value":"def process_sensor_data(readings, calibration_offset):\n    \"\"\"Process sensor readings with calibration.\n    \n    This function has 3 bugs. Find them using debugging\n    techniques from the chapter.\n    \"\"\"\n    \n    # Apply calibration\n    calibrated = []\n    for reading in readings:\n        calibrated.append(reading - calibration_offset)\n    \n    # Remove negative values (physically impossible)\n    valid = []\n    for i in range(len(calibrated)):\n        if calibrated[i] >= 0:\n            valid.append(calibrated[i])\n    \n    # Calculate statistics\n    mean = sum(valid) / len(valid)\n    variance = 0\n    for value in valid:\n        variance += (value - mean) ** 2\n    variance = variance / len(valid) - 1\n    \n    return {\n        'mean': mean,\n        'variance': variance,\n        'n_valid': len(valid),\n        'n_rejected': len(readings) - len(valid)\n    }\n\n# Debug with these test cases:\ntest1 = process_sensor_data([10, 20, 30], 5)\ntest2 = process_sensor_data([1, 2, 3], 10)  # All become negative\ntest3 = process_sensor_data([], 0)  # Empty input","position":{"start":{"line":1336,"column":1},"end":{"line":1373,"column":1}},"key":"nTnsMJodxV"},{"type":"heading","depth":2,"position":{"start":{"line":1375,"column":1},"end":{"line":1375,"column":1}},"children":[{"type":"text","value":"Main Takeaways (Summary)","position":{"start":{"line":1375,"column":1},"end":{"line":1375,"column":1}},"key":"JUokvaJQNw"}],"identifier":"main-takeaways-summary","label":"Main Takeaways (Summary)","html_id":"main-takeaways-summary","implicit":true,"key":"ebAthSdSCb"},{"type":"paragraph","position":{"start":{"line":1377,"column":1},"end":{"line":1377,"column":1}},"children":[{"type":"text","value":"This chapter transformed you from writing hopeful code to creating robust, professional software. Here are the essential concepts you’ve mastered:","position":{"start":{"line":1377,"column":1},"end":{"line":1377,"column":1}},"key":"KHSvAGlPHz"}],"key":"rwP2XpypJq"},{"type":"paragraph","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"children":[{"type":"text","value":"Error Understanding","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"key":"bu2CIdYOXF"}],"key":"kbrUpucH5z"},{"type":"text","value":": You now read error messages systematically from bottom to top, understanding that ","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"key":"Bjf1klZ4vP"},{"type":"strong","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"children":[{"type":"text","value":"exceptions","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"key":"IWzmMn4Sos"}],"key":"oxySX7TwtK"},{"type":"text","value":" are Python’s way of communicating problems. Each error type (TypeError, ValueError, IndexError, KeyError) tells you something specific about what went wrong.","position":{"start":{"line":1379,"column":1},"end":{"line":1379,"column":1}},"key":"vLqfST080C"}],"key":"loOQy2sdMR"},{"type":"paragraph","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"children":[{"type":"text","value":"Exception Handling","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"key":"JxtZWtxkUu"}],"key":"v4uLWXrwZq"},{"type":"text","value":": You’ve learned to use ","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"key":"fDHmdA6hEF"},{"type":"strong","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"children":[{"type":"text","value":"try/except blocks","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"key":"Z7nzPsPzuw"}],"key":"SFrOPHHgXe"},{"type":"text","value":" to gracefully handle expected errors like missing files or invalid input, while letting programming errors crash loudly so you can fix them. The key principle: catch only what you expect and can handle.","position":{"start":{"line":1381,"column":1},"end":{"line":1381,"column":1}},"key":"YfyacYLH4L"}],"key":"byxj5K9hLy"},{"type":"paragraph","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"children":[{"type":"text","value":"Input Validation","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"key":"PBpgdszTk1"}],"key":"HVSyHPyjx2"},{"type":"text","value":": You implement the ","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"key":"PBdAjnJuBf"},{"type":"strong","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"children":[{"type":"text","value":"fail-fast principle","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"key":"Q1Y7j0VsGe"}],"key":"pGQ5GJ9IPP"},{"type":"text","value":" using ","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"key":"grXGYM1pnb"},{"type":"strong","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"children":[{"type":"text","value":"guard clauses","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"key":"ZMDdXv8zXs"}],"key":"uxLPiufxdi"},{"type":"text","value":" to check inputs at function boundaries. Validation happens in order of cost (cheap checks first) and catches problems before they corrupt results.","position":{"start":{"line":1383,"column":1},"end":{"line":1383,"column":1}},"key":"PShbka1BEK"}],"key":"JxfFu4QFDw"},{"type":"paragraph","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"children":[{"type":"text","value":"Assertions as Documentation","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"key":"IfB01rJtoH"}],"key":"HhlVDEer5T"},{"type":"text","value":": You use ","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"key":"sO06wBesbg"},{"type":"strong","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"children":[{"type":"text","value":"assertions","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"key":"L1MYoBWoP3"}],"key":"uoZEZ0DTXd"},{"type":"text","value":" to verify your code’s logic and document assumptions. They’re your safety net during development, catching mathematical impossibilities and numerical instabilities.","position":{"start":{"line":1385,"column":1},"end":{"line":1385,"column":1}},"key":"c0ZFViamiZ"}],"key":"tBj4PfC8wI"},{"type":"paragraph","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"children":[{"type":"text","value":"Professional Logging","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"key":"mp9hkluYzL"}],"key":"j0ra84OsGV"},{"type":"text","value":": You’ve replaced print statements with structured ","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"key":"tfTpABucwx"},{"type":"strong","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"children":[{"type":"text","value":"logging","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"key":"XXojbGFtYV"}],"key":"wDNt9FamLZ"},{"type":"text","value":" that provides timestamps, severity levels, and permanent records. This creates an audit trail for debugging long-running computations.","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"key":"ZrB19RfLEm"}],"key":"QPj9n6GTp3"},{"type":"paragraph","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"children":[{"type":"text","value":"Systematic Testing","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"wnYV1NyQfg"}],"key":"IG0Ch9RPbt"},{"type":"text","value":": You write ","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"SST6sbjsYA"},{"type":"strong","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"children":[{"type":"text","value":"test functions","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"X54CcoZg5u"}],"key":"GzrSJdERPR"},{"type":"text","value":" that verify known values, mathematical properties, and edge cases. Tests prevent ","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"lX23BDV3T9"},{"type":"strong","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"children":[{"type":"text","value":"regression","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"B3uP8gM2Bw"}],"key":"PsmXyNSltD"},{"type":"text","value":"—old bugs reappearing when you modify code.","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"ZUEZDsHqVc"}],"key":"gzTfxGfgjp"},{"type":"paragraph","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"children":[{"type":"text","value":"Scientific Debugging","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"key":"jzhr6nywz6"}],"key":"uuLYk4EEwM"},{"type":"text","value":": You approach debugging like a scientist—observing symptoms, forming hypotheses, experimenting to test them, and analyzing results. ","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"key":"j09Mn5rrMg"},{"type":"strong","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"children":[{"type":"text","value":"Binary search debugging","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"key":"IEJqhQl5m2"}],"key":"JoWenQlARV"},{"type":"text","value":" helps you quickly isolate problems in complex code.","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"key":"WQzhGHVCoA"}],"key":"fiG58EZhmX"},{"type":"paragraph","position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"children":[{"type":"text","value":"The overarching theme: ","position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"key":"p0gILyP4HI"},{"type":"strong","position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"children":[{"type":"text","value":"defensive programming","position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"key":"sa8nHO72yD"}],"key":"oxyQkd6uZ2"},{"type":"text","value":". Every technique in this chapter helps you write code that anticipates problems, handles them gracefully, and helps you fix issues quickly when they arise. This is what separates scripts that work once from tools you can trust with your research.","position":{"start":{"line":1393,"column":1},"end":{"line":1393,"column":1}},"key":"PZtWeh3zI9"}],"key":"enMG3sKi8m"},{"type":"heading","depth":2,"position":{"start":{"line":1395,"column":1},"end":{"line":1395,"column":1}},"children":[{"type":"text","value":"Definitions","position":{"start":{"line":1395,"column":1},"end":{"line":1395,"column":1}},"key":"Yxqy8kMXYp"}],"identifier":"definitions","label":"Definitions","html_id":"definitions","implicit":true,"key":"Rui5rVde7L"},{"type":"paragraph","position":{"start":{"line":1397,"column":1},"end":{"line":1397,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1397,"column":1},"end":{"line":1397,"column":1}},"children":[{"type":"text","value":"Anti-pattern","position":{"start":{"line":1397,"column":1},"end":{"line":1397,"column":1}},"key":"cvmQ49e0OP"}],"key":"EC5gjZgqkG"},{"type":"text","value":": A common but harmful coding pattern that should be avoided (e.g., bare except clauses).","position":{"start":{"line":1397,"column":1},"end":{"line":1397,"column":1}},"key":"OEZA3uZBke"}],"key":"TZoZYSBHOU"},{"type":"paragraph","position":{"start":{"line":1399,"column":1},"end":{"line":1399,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1399,"column":1},"end":{"line":1399,"column":1}},"children":[{"type":"text","value":"Assertion","position":{"start":{"line":1399,"column":1},"end":{"line":1399,"column":1}},"key":"VBVkbZhpCT"}],"key":"LZqvAnsooO"},{"type":"text","value":": A debugging aid that verifies assumptions about program state; can be disabled in production.","position":{"start":{"line":1399,"column":1},"end":{"line":1399,"column":1}},"key":"DvHd95Nhyn"}],"key":"UQX10bSlGh"},{"type":"paragraph","position":{"start":{"line":1401,"column":1},"end":{"line":1401,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1401,"column":1},"end":{"line":1401,"column":1}},"children":[{"type":"text","value":"Bare except","position":{"start":{"line":1401,"column":1},"end":{"line":1401,"column":1}},"key":"pcIloZi5Xf"}],"key":"aXPno24AwD"},{"type":"text","value":": An except clause without specifying exception type; dangerous because it catches all errors.","position":{"start":{"line":1401,"column":1},"end":{"line":1401,"column":1}},"key":"c47ThqEz0a"}],"key":"OdojxvfkPr"},{"type":"paragraph","position":{"start":{"line":1403,"column":1},"end":{"line":1403,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1403,"column":1},"end":{"line":1403,"column":1}},"children":[{"type":"text","value":"Binary search debugging","position":{"start":{"line":1403,"column":1},"end":{"line":1403,"column":1}},"key":"BXKQdZkw7g"}],"key":"Y1wJ6q6uTO"},{"type":"text","value":": Debugging technique that isolates problems by repeatedly dividing code in half.","position":{"start":{"line":1403,"column":1},"end":{"line":1403,"column":1}},"key":"pmjBj220No"}],"key":"sq9i5c4hLP"},{"type":"paragraph","position":{"start":{"line":1405,"column":1},"end":{"line":1405,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1405,"column":1},"end":{"line":1405,"column":1}},"children":[{"type":"text","value":"Call stack","position":{"start":{"line":1405,"column":1},"end":{"line":1405,"column":1}},"key":"qEZQvffBWU"}],"key":"CJ0E9zm9nU"},{"type":"text","value":": The sequence of function calls that led to the current point in execution.","position":{"start":{"line":1405,"column":1},"end":{"line":1405,"column":1}},"key":"RzQ7cKloK9"}],"key":"w9KuK5P54U"},{"type":"paragraph","position":{"start":{"line":1407,"column":1},"end":{"line":1407,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1407,"column":1},"end":{"line":1407,"column":1}},"children":[{"type":"text","value":"Catastrophic cancellation","position":{"start":{"line":1407,"column":1},"end":{"line":1407,"column":1}},"key":"hgJVrsKFir"}],"key":"Q0EXDkIzuF"},{"type":"text","value":": Numerical instability from subtracting nearly equal floating-point numbers.","position":{"start":{"line":1407,"column":1},"end":{"line":1407,"column":1}},"key":"EBD2Aj0sK9"}],"key":"Xt7HJt8O1Q"},{"type":"paragraph","position":{"start":{"line":1409,"column":1},"end":{"line":1409,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1409,"column":1},"end":{"line":1409,"column":1}},"children":[{"type":"text","value":"Context management","position":{"start":{"line":1409,"column":1},"end":{"line":1409,"column":1}},"key":"yxHtHtep3g"}],"key":"WVseObsyOj"},{"type":"text","value":": Ensuring resources (like files) are properly acquired and released using ‘with’ statements.","position":{"start":{"line":1409,"column":1},"end":{"line":1409,"column":1}},"key":"ZPQuUMDJkn"}],"key":"p6QZkmWz9K"},{"type":"paragraph","position":{"start":{"line":1411,"column":1},"end":{"line":1411,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1411,"column":1},"end":{"line":1411,"column":1}},"children":[{"type":"text","value":"Defensive programming","position":{"start":{"line":1411,"column":1},"end":{"line":1411,"column":1}},"key":"WZrhqpQshM"}],"key":"mdKAKUlbgb"},{"type":"text","value":": Writing code that anticipates and handles potential problems.","position":{"start":{"line":1411,"column":1},"end":{"line":1411,"column":1}},"key":"PyXlt17adz"}],"key":"zyVQpSf92O"},{"type":"paragraph","position":{"start":{"line":1413,"column":1},"end":{"line":1413,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1413,"column":1},"end":{"line":1413,"column":1}},"children":[{"type":"text","value":"Domain validation","position":{"start":{"line":1413,"column":1},"end":{"line":1413,"column":1}},"key":"PzTKrmmRHy"}],"key":"FjNmmlhtvP"},{"type":"text","value":": Checking if values make sense in your problem domain (e.g., positive temperatures).","position":{"start":{"line":1413,"column":1},"end":{"line":1413,"column":1}},"key":"gmnZ4Oomqd"}],"key":"Mmn7Y6iHi3"},{"type":"paragraph","position":{"start":{"line":1415,"column":1},"end":{"line":1415,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1415,"column":1},"end":{"line":1415,"column":1}},"children":[{"type":"text","value":"Edge case","position":{"start":{"line":1415,"column":1},"end":{"line":1415,"column":1}},"key":"h9Sy85VEJT"}],"key":"bLXHwgoOWl"},{"type":"text","value":": Unusual or boundary input that often reveals bugs.","position":{"start":{"line":1415,"column":1},"end":{"line":1415,"column":1}},"key":"KcwbWLuGMx"}],"key":"FTiz05DbAm"},{"type":"paragraph","position":{"start":{"line":1417,"column":1},"end":{"line":1417,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1417,"column":1},"end":{"line":1417,"column":1}},"children":[{"type":"text","value":"Error propagation","position":{"start":{"line":1417,"column":1},"end":{"line":1417,"column":1}},"key":"LLPZkpwqcG"}],"key":"JjeHXleu6c"},{"type":"text","value":": How errors spread through calculations, potentially corrupting all downstream results.","position":{"start":{"line":1417,"column":1},"end":{"line":1417,"column":1}},"key":"MLjiF5LtjO"}],"key":"RmgX0rmGfc"},{"type":"paragraph","position":{"start":{"line":1419,"column":1},"end":{"line":1419,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1419,"column":1},"end":{"line":1419,"column":1}},"children":[{"type":"text","value":"Exception","position":{"start":{"line":1419,"column":1},"end":{"line":1419,"column":1}},"key":"OjObvAj5O5"}],"key":"tYNOoRVlUz"},{"type":"text","value":": Python’s way of signaling that something exceptional has happened preventing normal execution.","position":{"start":{"line":1419,"column":1},"end":{"line":1419,"column":1}},"key":"fXoRBpsT2A"}],"key":"Ayg7hHp73y"},{"type":"paragraph","position":{"start":{"line":1421,"column":1},"end":{"line":1421,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1421,"column":1},"end":{"line":1421,"column":1}},"children":[{"type":"text","value":"Exception handling","position":{"start":{"line":1421,"column":1},"end":{"line":1421,"column":1}},"key":"Ie9OW16NLl"}],"key":"Q42m8aGTp8"},{"type":"text","value":": Catching and responding to errors using try/except blocks.","position":{"start":{"line":1421,"column":1},"end":{"line":1421,"column":1}},"key":"aCkJ2Ckm80"}],"key":"rYlYTXIkLB"},{"type":"paragraph","position":{"start":{"line":1423,"column":1},"end":{"line":1423,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1423,"column":1},"end":{"line":1423,"column":1}},"children":[{"type":"text","value":"Fail-fast principle","position":{"start":{"line":1423,"column":1},"end":{"line":1423,"column":1}},"key":"aovEVtrX07"}],"key":"zuxRaxfgpI"},{"type":"text","value":": Detecting and reporting problems as early as possible.","position":{"start":{"line":1423,"column":1},"end":{"line":1423,"column":1}},"key":"yEm35JXe2W"}],"key":"DsE5wQBniD"},{"type":"paragraph","position":{"start":{"line":1425,"column":1},"end":{"line":1425,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1425,"column":1},"end":{"line":1425,"column":1}},"children":[{"type":"text","value":"Guard clause","position":{"start":{"line":1425,"column":1},"end":{"line":1425,"column":1}},"key":"L9N06LLFsN"}],"key":"dB7MnX6gd1"},{"type":"text","value":": Conditional statement at function start that checks preconditions and exits early if not met.","position":{"start":{"line":1425,"column":1},"end":{"line":1425,"column":1}},"key":"rUc32J5KaD"}],"key":"FH34qTlVvd"},{"type":"paragraph","position":{"start":{"line":1427,"column":1},"end":{"line":1427,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1427,"column":1},"end":{"line":1427,"column":1}},"children":[{"type":"text","value":"In-place modification","position":{"start":{"line":1427,"column":1},"end":{"line":1427,"column":1}},"key":"RvpAd9BnMa"}],"key":"Gyjuzvtuq0"},{"type":"text","value":": Changing data directly rather than creating a new copy.","position":{"start":{"line":1427,"column":1},"end":{"line":1427,"column":1}},"key":"YcI7700m62"}],"key":"T01VQf5q2w"},{"type":"paragraph","position":{"start":{"line":1429,"column":1},"end":{"line":1429,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1429,"column":1},"end":{"line":1429,"column":1}},"children":[{"type":"text","value":"IndexError","position":{"start":{"line":1429,"column":1},"end":{"line":1429,"column":1}},"key":"BvnJKM1iG2"}],"key":"OU8HywnSQ9"},{"type":"text","value":": Exception raised when accessing a list index that doesn’t exist.","position":{"start":{"line":1429,"column":1},"end":{"line":1429,"column":1}},"key":"jND69GgKwS"}],"key":"lo6JyC1SSk"},{"type":"paragraph","position":{"start":{"line":1431,"column":1},"end":{"line":1431,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1431,"column":1},"end":{"line":1431,"column":1}},"children":[{"type":"text","value":"Input validation","position":{"start":{"line":1431,"column":1},"end":{"line":1431,"column":1}},"key":"nDkXZ5GvDv"}],"key":"YlTgo941pq"},{"type":"text","value":": Checking that data meets requirements before processing.","position":{"start":{"line":1431,"column":1},"end":{"line":1431,"column":1}},"key":"Dk1FNmsRpc"}],"key":"xfhF6yEGbu"},{"type":"paragraph","position":{"start":{"line":1433,"column":1},"end":{"line":1433,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1433,"column":1},"end":{"line":1433,"column":1}},"children":[{"type":"text","value":"Integer overflow","position":{"start":{"line":1433,"column":1},"end":{"line":1433,"column":1}},"key":"F7qO5AZJtW"}],"key":"sUwgBvw1ku"},{"type":"text","value":": When a number exceeds the maximum value for its type.","position":{"start":{"line":1433,"column":1},"end":{"line":1433,"column":1}},"key":"BCAmmxoUjO"}],"key":"WFvivPsVbE"},{"type":"paragraph","position":{"start":{"line":1435,"column":1},"end":{"line":1435,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1435,"column":1},"end":{"line":1435,"column":1}},"children":[{"type":"text","value":"KeyError","position":{"start":{"line":1435,"column":1},"end":{"line":1435,"column":1}},"key":"Zb9iIDp5hc"}],"key":"VIL49hwRD8"},{"type":"text","value":": Exception raised when accessing a dictionary key that doesn’t exist.","position":{"start":{"line":1435,"column":1},"end":{"line":1435,"column":1}},"key":"CpH0qhVDEi"}],"key":"Ibdk1riDNU"},{"type":"paragraph","position":{"start":{"line":1437,"column":1},"end":{"line":1437,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1437,"column":1},"end":{"line":1437,"column":1}},"children":[{"type":"text","value":"Linear code flow","position":{"start":{"line":1437,"column":1},"end":{"line":1437,"column":1}},"key":"AbLPqw9eHJ"}],"key":"mTvUNz9NRc"},{"type":"text","value":": Code structure that can be read top to bottom without nested conditions.","position":{"start":{"line":1437,"column":1},"end":{"line":1437,"column":1}},"key":"VGdS02otkm"}],"key":"OqD3lM7ZCB"},{"type":"paragraph","position":{"start":{"line":1439,"column":1},"end":{"line":1439,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1439,"column":1},"end":{"line":1439,"column":1}},"children":[{"type":"text","value":"Logging","position":{"start":{"line":1439,"column":1},"end":{"line":1439,"column":1}},"key":"V02u5PdXvM"}],"key":"yG7bTk7Obz"},{"type":"text","value":": Systematic recording of program events with timestamps and severity levels.","position":{"start":{"line":1439,"column":1},"end":{"line":1439,"column":1}},"key":"TqW9Whlmlp"}],"key":"TglxguV5dR"},{"type":"paragraph","position":{"start":{"line":1441,"column":1},"end":{"line":1441,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1441,"column":1},"end":{"line":1441,"column":1}},"children":[{"type":"text","value":"Logging level","position":{"start":{"line":1441,"column":1},"end":{"line":1441,"column":1}},"key":"Zn5QUDSF4z"}],"key":"VuMXCqZM8E"},{"type":"text","value":": Filter controlling which log messages are displayed (DEBUG, INFO, WARNING, ERROR, CRITICAL).","position":{"start":{"line":1441,"column":1},"end":{"line":1441,"column":1}},"key":"jD7uhWgeIt"}],"key":"k4Fhj1zJ6q"},{"type":"paragraph","position":{"start":{"line":1443,"column":1},"end":{"line":1443,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1443,"column":1},"end":{"line":1443,"column":1}},"children":[{"type":"text","value":"Mutation bug","position":{"start":{"line":1443,"column":1},"end":{"line":1443,"column":1}},"key":"sfGuo8LT12"}],"key":"gGRKGXMuHE"},{"type":"text","value":": Error caused by modifying data while still using it.","position":{"start":{"line":1443,"column":1},"end":{"line":1443,"column":1}},"key":"Uu5uu1jrwK"}],"key":"XDcUdoo67T"},{"type":"paragraph","position":{"start":{"line":1445,"column":1},"end":{"line":1445,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1445,"column":1},"end":{"line":1445,"column":1}},"children":[{"type":"text","value":"NameError","position":{"start":{"line":1445,"column":1},"end":{"line":1445,"column":1}},"key":"dnGkTkcVPy"}],"key":"cpDof9ZktJ"},{"type":"text","value":": Exception raised when referencing an undefined variable.","position":{"start":{"line":1445,"column":1},"end":{"line":1445,"column":1}},"key":"IOhqrIH5EJ"}],"key":"CMzaIr5a7R"},{"type":"paragraph","position":{"start":{"line":1447,"column":1},"end":{"line":1447,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1447,"column":1},"end":{"line":1447,"column":1}},"children":[{"type":"text","value":"Namespace","position":{"start":{"line":1447,"column":1},"end":{"line":1447,"column":1}},"key":"zDMyIgX3Rp"}],"key":"iGAAzWo2XI"},{"type":"text","value":": The collection of currently defined variables and their values.","position":{"start":{"line":1447,"column":1},"end":{"line":1447,"column":1}},"key":"DBg2vO7Rpl"}],"key":"gEQcmf0ZCc"},{"type":"paragraph","position":{"start":{"line":1449,"column":1},"end":{"line":1449,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1449,"column":1},"end":{"line":1449,"column":1}},"children":[{"type":"text","value":"NaN (Not a Number)","position":{"start":{"line":1449,"column":1},"end":{"line":1449,"column":1}},"key":"XufyyLSX4s"}],"key":"ZEGJdM8Dl8"},{"type":"text","value":": Special floating-point value representing undefined results.","position":{"start":{"line":1449,"column":1},"end":{"line":1449,"column":1}},"key":"bSGhDsYDcy"}],"key":"q5aQd90ZQn"},{"type":"paragraph","position":{"start":{"line":1451,"column":1},"end":{"line":1451,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1451,"column":1},"end":{"line":1451,"column":1}},"children":[{"type":"text","value":"Numerical stability","position":{"start":{"line":1451,"column":1},"end":{"line":1451,"column":1}},"key":"gePhVwpkav"}],"key":"Ekv4YRXtFg"},{"type":"text","value":": Whether calculations maintain accuracy despite floating-point limitations.","position":{"start":{"line":1451,"column":1},"end":{"line":1451,"column":1}},"key":"w0uDTVEYD8"}],"key":"ZnDVHRPYx0"},{"type":"paragraph","position":{"start":{"line":1453,"column":1},"end":{"line":1453,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1453,"column":1},"end":{"line":1453,"column":1}},"children":[{"type":"text","value":"Off-by-one error","position":{"start":{"line":1453,"column":1},"end":{"line":1453,"column":1}},"key":"ZOaZVidmDu"}],"key":"qHmLkqbnpS"},{"type":"text","value":": Common bug from miscalculating array boundaries or forgetting zero-based indexing.","position":{"start":{"line":1453,"column":1},"end":{"line":1453,"column":1}},"key":"YK1bk3eTZo"}],"key":"aCeVJwVrzR"},{"type":"paragraph","position":{"start":{"line":1455,"column":1},"end":{"line":1455,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1455,"column":1},"end":{"line":1455,"column":1}},"children":[{"type":"text","value":"Overhead","position":{"start":{"line":1455,"column":1},"end":{"line":1455,"column":1}},"key":"pFxBfiHkRP"}],"key":"JnBIsjRNth"},{"type":"text","value":": Additional time or resource cost of an operation.","position":{"start":{"line":1455,"column":1},"end":{"line":1455,"column":1}},"key":"kYb0Sumw4U"}],"key":"fUnukR7gDF"},{"type":"paragraph","position":{"start":{"line":1457,"column":1},"end":{"line":1457,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1457,"column":1},"end":{"line":1457,"column":1}},"children":[{"type":"text","value":"Pass-by-object-reference","position":{"start":{"line":1457,"column":1},"end":{"line":1457,"column":1}},"key":"IKqRxcR7JC"}],"key":"moudhpgjpG"},{"type":"text","value":": Python’s parameter passing mechanism where functions receive references to objects.","position":{"start":{"line":1457,"column":1},"end":{"line":1457,"column":1}},"key":"Q2AiU9RrDo"}],"key":"ZSEXy8kyUB"},{"type":"paragraph","position":{"start":{"line":1459,"column":1},"end":{"line":1459,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1459,"column":1},"end":{"line":1459,"column":1}},"children":[{"type":"text","value":"Performance cost","position":{"start":{"line":1459,"column":1},"end":{"line":1459,"column":1}},"key":"LdQLokhlpP"}],"key":"PJR6JMkl5U"},{"type":"text","value":": Time or resources required for an operation.","position":{"start":{"line":1459,"column":1},"end":{"line":1459,"column":1}},"key":"eYMenuoUcA"}],"key":"kwgAjTnJ3k"},{"type":"paragraph","position":{"start":{"line":1461,"column":1},"end":{"line":1461,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1461,"column":1},"end":{"line":1461,"column":1}},"children":[{"type":"text","value":"Postcondition","position":{"start":{"line":1461,"column":1},"end":{"line":1461,"column":1}},"key":"oLldPYRi63"}],"key":"cFV9ZVj4vI"},{"type":"text","value":": What a function guarantees about its output state.","position":{"start":{"line":1461,"column":1},"end":{"line":1461,"column":1}},"key":"vmr028fSJi"}],"key":"PYRZWCycKs"},{"type":"paragraph","position":{"start":{"line":1463,"column":1},"end":{"line":1463,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1463,"column":1},"end":{"line":1463,"column":1}},"children":[{"type":"text","value":"Precondition","position":{"start":{"line":1463,"column":1},"end":{"line":1463,"column":1}},"key":"dJyV1C9bi1"}],"key":"NzWDvhqXny"},{"type":"text","value":": What must be true about input for a function to work correctly.","position":{"start":{"line":1463,"column":1},"end":{"line":1463,"column":1}},"key":"tCtjKKfViU"}],"key":"r57m59NRdM"},{"type":"paragraph","position":{"start":{"line":1465,"column":1},"end":{"line":1465,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1465,"column":1},"end":{"line":1465,"column":1}},"children":[{"type":"text","value":"Property-based testing","position":{"start":{"line":1465,"column":1},"end":{"line":1465,"column":1}},"key":"M9mM5BSNqd"}],"key":"ZsRaONqUsU"},{"type":"text","value":": Testing mathematical properties rather than specific values.","position":{"start":{"line":1465,"column":1},"end":{"line":1465,"column":1}},"key":"riUPsSTxBD"}],"key":"ckIEGafPcB"},{"type":"paragraph","position":{"start":{"line":1467,"column":1},"end":{"line":1467,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1467,"column":1},"end":{"line":1467,"column":1}},"children":[{"type":"text","value":"Raise statement","position":{"start":{"line":1467,"column":1},"end":{"line":1467,"column":1}},"key":"v3SfEMZeu0"}],"key":"x7eW5EZdKL"},{"type":"text","value":": Explicitly creating and throwing an exception.","position":{"start":{"line":1467,"column":1},"end":{"line":1467,"column":1}},"key":"tdWPGmclDe"}],"key":"V67Qv26K6Y"},{"type":"paragraph","position":{"start":{"line":1469,"column":1},"end":{"line":1469,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1469,"column":1},"end":{"line":1469,"column":1}},"children":[{"type":"text","value":"Regression","position":{"start":{"line":1469,"column":1},"end":{"line":1469,"column":1}},"key":"cnqxS73jFj"}],"key":"NIfCohHqeB"},{"type":"text","value":": When previously fixed bugs reappear after code changes.","position":{"start":{"line":1469,"column":1},"end":{"line":1469,"column":1}},"key":"Xs1tbc1gHa"}],"key":"QtrtGh9whq"},{"type":"paragraph","position":{"start":{"line":1471,"column":1},"end":{"line":1471,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1471,"column":1},"end":{"line":1471,"column":1}},"children":[{"type":"text","value":"Regression test","position":{"start":{"line":1471,"column":1},"end":{"line":1471,"column":1}},"key":"dvKGqUAScZ"}],"key":"lbcSx2oelC"},{"type":"text","value":": Test that ensures old bugs don’t reappear.","position":{"start":{"line":1471,"column":1},"end":{"line":1471,"column":1}},"key":"kX2n2EeLZk"}],"key":"kudg0cgz0g"},{"type":"paragraph","position":{"start":{"line":1473,"column":1},"end":{"line":1473,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1473,"column":1},"end":{"line":1473,"column":1}},"children":[{"type":"text","value":"Robust code","position":{"start":{"line":1473,"column":1},"end":{"line":1473,"column":1}},"key":"SLCQS5aGif"}],"key":"PkDwdJDbvM"},{"type":"text","value":": Code that handles unexpected situations gracefully.","position":{"start":{"line":1473,"column":1},"end":{"line":1473,"column":1}},"key":"HmJxRQyJcS"}],"key":"xJPl3YBri9"},{"type":"paragraph","position":{"start":{"line":1475,"column":1},"end":{"line":1475,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1475,"column":1},"end":{"line":1475,"column":1}},"children":[{"type":"text","value":"Selective exception handling","position":{"start":{"line":1475,"column":1},"end":{"line":1475,"column":1}},"key":"iaP77tanhK"}],"key":"XkAzjVg6m6"},{"type":"text","value":": Only catching specific, expected exceptions.","position":{"start":{"line":1475,"column":1},"end":{"line":1475,"column":1}},"key":"q1fJn5JT7K"}],"key":"wdv7XuGdCI"},{"type":"paragraph","position":{"start":{"line":1477,"column":1},"end":{"line":1477,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1477,"column":1},"end":{"line":1477,"column":1}},"children":[{"type":"text","value":"Test function","position":{"start":{"line":1477,"column":1},"end":{"line":1477,"column":1}},"key":"oJdFnn0Jzk"}],"key":"qjD4Tm8s8d"},{"type":"text","value":": Code that verifies other code works correctly.","position":{"start":{"line":1477,"column":1},"end":{"line":1477,"column":1}},"key":"L4Rskwko6L"}],"key":"lB82aoFouP"},{"type":"paragraph","position":{"start":{"line":1479,"column":1},"end":{"line":1479,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1479,"column":1},"end":{"line":1479,"column":1}},"children":[{"type":"text","value":"Testing","position":{"start":{"line":1479,"column":1},"end":{"line":1479,"column":1}},"key":"wquw8Pt4YX"}],"key":"hp1mpPU1V2"},{"type":"text","value":": Process of verifying code behaves as expected.","position":{"start":{"line":1479,"column":1},"end":{"line":1479,"column":1}},"key":"pwEzlCliTh"}],"key":"CWVDTQMcbx"},{"type":"paragraph","position":{"start":{"line":1481,"column":1},"end":{"line":1481,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1481,"column":1},"end":{"line":1481,"column":1}},"children":[{"type":"text","value":"Traceback","position":{"start":{"line":1481,"column":1},"end":{"line":1481,"column":1}},"key":"LeNvtwhyez"}],"key":"I3QbyAKR3V"},{"type":"text","value":": Report showing the sequence of function calls leading to an error.","position":{"start":{"line":1481,"column":1},"end":{"line":1481,"column":1}},"key":"YoTqpUza6B"}],"key":"SfmhlUHl3i"},{"type":"paragraph","position":{"start":{"line":1483,"column":1},"end":{"line":1483,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1483,"column":1},"end":{"line":1483,"column":1}},"children":[{"type":"text","value":"Tradeoff","position":{"start":{"line":1483,"column":1},"end":{"line":1483,"column":1}},"key":"vwLmmX0fVo"}],"key":"AHzwoA6QKU"},{"type":"text","value":": Balancing competing concerns (e.g., safety vs performance).","position":{"start":{"line":1483,"column":1},"end":{"line":1483,"column":1}},"key":"DSAQfhcH9L"}],"key":"VqZv1F1wjW"},{"type":"paragraph","position":{"start":{"line":1485,"column":1},"end":{"line":1485,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1485,"column":1},"end":{"line":1485,"column":1}},"children":[{"type":"text","value":"Try block","position":{"start":{"line":1485,"column":1},"end":{"line":1485,"column":1}},"key":"eEztNGznEB"}],"key":"HUZyJtY1xF"},{"type":"text","value":": Code section that might raise an exception.","position":{"start":{"line":1485,"column":1},"end":{"line":1485,"column":1}},"key":"pABjR9wkih"}],"key":"xjiY9YgL7R"},{"type":"paragraph","position":{"start":{"line":1487,"column":1},"end":{"line":1487,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1487,"column":1},"end":{"line":1487,"column":1}},"children":[{"type":"text","value":"TypeError","position":{"start":{"line":1487,"column":1},"end":{"line":1487,"column":1}},"key":"MirYUJlen8"}],"key":"U3CElhCT3q"},{"type":"text","value":": Exception raised when operation receives wrong type.","position":{"start":{"line":1487,"column":1},"end":{"line":1487,"column":1}},"key":"Kx8WK6HiIn"}],"key":"tVxcDcrrhl"},{"type":"paragraph","position":{"start":{"line":1489,"column":1},"end":{"line":1489,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1489,"column":1},"end":{"line":1489,"column":1}},"children":[{"type":"text","value":"Validation","position":{"start":{"line":1489,"column":1},"end":{"line":1489,"column":1}},"key":"mWnwfgMaGl"}],"key":"raSezhhRyD"},{"type":"text","value":": Checking that external input meets requirements.","position":{"start":{"line":1489,"column":1},"end":{"line":1489,"column":1}},"key":"qYuAqPDYbg"}],"key":"uSZpdx6vzq"},{"type":"paragraph","position":{"start":{"line":1491,"column":1},"end":{"line":1491,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1491,"column":1},"end":{"line":1491,"column":1}},"children":[{"type":"text","value":"ValueError","position":{"start":{"line":1491,"column":1},"end":{"line":1491,"column":1}},"key":"A7HYENeb2y"}],"key":"sfjXqA3Fgn"},{"type":"text","value":": Exception raised when operation receives right type but wrong value.","position":{"start":{"line":1491,"column":1},"end":{"line":1491,"column":1}},"key":"Zs5qnjhMhR"}],"key":"MHCkdQ58VV"},{"type":"paragraph","position":{"start":{"line":1493,"column":1},"end":{"line":1493,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1493,"column":1},"end":{"line":1493,"column":1}},"children":[{"type":"text","value":"Zero-based indexing","position":{"start":{"line":1493,"column":1},"end":{"line":1493,"column":1}},"key":"atFAfu7xLZ"}],"key":"ALl5AaFIqL"},{"type":"text","value":": Numbering system where first element is at index 0.","position":{"start":{"line":1493,"column":1},"end":{"line":1493,"column":1}},"key":"VJlHSPi3DL"}],"key":"qidzuuJro6"},{"type":"heading","depth":2,"position":{"start":{"line":1495,"column":1},"end":{"line":1495,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":1495,"column":1},"end":{"line":1495,"column":1}},"key":"W0YJsch3fK"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"wpbtK6qQ1O"},{"type":"paragraph","position":{"start":{"line":1497,"column":1},"end":{"line":1497,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1497,"column":1},"end":{"line":1497,"column":1}},"key":"GEzUpUnrj9"},{"type":"strong","position":{"start":{"line":1497,"column":1},"end":{"line":1497,"column":1}},"children":[{"type":"text","value":"Error messages are maps to bugs","position":{"start":{"line":1497,"column":1},"end":{"line":1497,"column":1}},"key":"Q3hMy65Vd5"}],"key":"SK5ggplA8j"},{"type":"text","value":" - Read from bottom (what went wrong) to top (where it happened) for quick diagnosis","position":{"start":{"line":1497,"column":1},"end":{"line":1497,"column":1}},"key":"SYcYxKkgAe"}],"key":"JGHo9tKLKg"},{"type":"paragraph","position":{"start":{"line":1499,"column":1},"end":{"line":1499,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1499,"column":1},"end":{"line":1499,"column":1}},"key":"qTC6uGAOBx"},{"type":"strong","position":{"start":{"line":1499,"column":1},"end":{"line":1499,"column":1}},"children":[{"type":"text","value":"Try/except handles expected failures","position":{"start":{"line":1499,"column":1},"end":{"line":1499,"column":1}},"key":"VmC1GIqLVv"}],"key":"AHgXe3VZfc"},{"type":"text","value":" - Catch specific exceptions for files, network, and user input; let programming errors crash","position":{"start":{"line":1499,"column":1},"end":{"line":1499,"column":1}},"key":"UCOw8nN2Cb"}],"key":"ZG8wkKSFOW"},{"type":"paragraph","position":{"start":{"line":1501,"column":1},"end":{"line":1501,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1501,"column":1},"end":{"line":1501,"column":1}},"key":"PMSyCvZ0L3"},{"type":"strong","position":{"start":{"line":1501,"column":1},"end":{"line":1501,"column":1}},"children":[{"type":"text","value":"Validation is your first defense","position":{"start":{"line":1501,"column":1},"end":{"line":1501,"column":1}},"key":"ZD2kPeLDoL"}],"key":"x5qc93GIhQ"},{"type":"text","value":" - Check inputs at function boundaries using the guard clause pattern to fail fast","position":{"start":{"line":1501,"column":1},"end":{"line":1501,"column":1}},"key":"Dit4hBse0a"}],"key":"kTXwebrSN9"},{"type":"paragraph","position":{"start":{"line":1503,"column":1},"end":{"line":1503,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1503,"column":1},"end":{"line":1503,"column":1}},"key":"bYUxjDkZXX"},{"type":"strong","position":{"start":{"line":1503,"column":1},"end":{"line":1503,"column":1}},"children":[{"type":"text","value":"Assertions verify your logic","position":{"start":{"line":1503,"column":1},"end":{"line":1503,"column":1}},"key":"JEu31pgRrP"}],"key":"W81mnzgUXR"},{"type":"text","value":" - Use them to document assumptions and catch mathematical impossibilities during development","position":{"start":{"line":1503,"column":1},"end":{"line":1503,"column":1}},"key":"qqTAE4EzhS"}],"key":"TfuZ5xwaPp"},{"type":"paragraph","position":{"start":{"line":1505,"column":1},"end":{"line":1505,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1505,"column":1},"end":{"line":1505,"column":1}},"key":"SxCc95w2aH"},{"type":"strong","position":{"start":{"line":1505,"column":1},"end":{"line":1505,"column":1}},"children":[{"type":"text","value":"Logging provides persistent insight","position":{"start":{"line":1505,"column":1},"end":{"line":1505,"column":1}},"key":"ilygyauKvC"}],"key":"iXkeZNLxxZ"},{"type":"text","value":" - Replace print with logging for timestamps, severity levels, and permanent records","position":{"start":{"line":1505,"column":1},"end":{"line":1505,"column":1}},"key":"YBRB2xJe7o"}],"key":"IXhiErceHY"},{"type":"paragraph","position":{"start":{"line":1507,"column":1},"end":{"line":1507,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1507,"column":1},"end":{"line":1507,"column":1}},"key":"Rlz96g1vED"},{"type":"strong","position":{"start":{"line":1507,"column":1},"end":{"line":1507,"column":1}},"children":[{"type":"text","value":"Tests prevent regression","position":{"start":{"line":1507,"column":1},"end":{"line":1507,"column":1}},"key":"gVBkureQzc"}],"key":"imfu2nOJOk"},{"type":"text","value":" - Simple tests of properties and edge cases catch bugs before they waste hours of debugging","position":{"start":{"line":1507,"column":1},"end":{"line":1507,"column":1}},"key":"JdmvXMPjHZ"}],"key":"Pnq12jooOm"},{"type":"paragraph","position":{"start":{"line":1509,"column":1},"end":{"line":1509,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1509,"column":1},"end":{"line":1509,"column":1}},"key":"N1laLT1Ip1"},{"type":"strong","position":{"start":{"line":1509,"column":1},"end":{"line":1509,"column":1}},"children":[{"type":"text","value":"Debugging is systematic science","position":{"start":{"line":1509,"column":1},"end":{"line":1509,"column":1}},"key":"dISrRS41Ob"}],"key":"cBuGTucCBV"},{"type":"text","value":" - Follow observe→hypothesize→experiment→fix rather than random changes","position":{"start":{"line":1509,"column":1},"end":{"line":1509,"column":1}},"key":"x0RXiIHvoJ"}],"key":"DxwOGSPjKr"},{"type":"paragraph","position":{"start":{"line":1511,"column":1},"end":{"line":1511,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1511,"column":1},"end":{"line":1511,"column":1}},"key":"Lg3XRifmB5"},{"type":"strong","position":{"start":{"line":1511,"column":1},"end":{"line":1511,"column":1}},"children":[{"type":"text","value":"Errors propagate and compound","position":{"start":{"line":1511,"column":1},"end":{"line":1511,"column":1}},"key":"i5nsHvXiWd"}],"key":"Af1MA23K2I"},{"type":"text","value":" - One unhandled error can corrupt entire pipelines; catch problems early","position":{"start":{"line":1511,"column":1},"end":{"line":1511,"column":1}},"key":"Q3ppiBH1hm"}],"key":"j6QSAt3cbp"},{"type":"paragraph","position":{"start":{"line":1513,"column":1},"end":{"line":1513,"column":1}},"children":[{"type":"text","value":"✅ ","position":{"start":{"line":1513,"column":1},"end":{"line":1513,"column":1}},"key":"CgRhpdf9v9"},{"type":"strong","position":{"start":{"line":1513,"column":1},"end":{"line":1513,"column":1}},"children":[{"type":"text","value":"Real disasters come from missing validation","position":{"start":{"line":1513,"column":1},"end":{"line":1513,"column":1}},"key":"RC5rM5VrnZ"}],"key":"gPeVgNMoF5"},{"type":"text","value":" - Mars Climate Orbiter, Ariane 5, and other failures were preventable with proper error handling","position":{"start":{"line":1513,"column":1},"end":{"line":1513,"column":1}},"key":"NuXlF5kaOL"}],"key":"s6RBHnw0fV"},{"type":"heading","depth":2,"position":{"start":{"line":1515,"column":1},"end":{"line":1515,"column":1}},"children":[{"type":"text","value":"Quick Reference Tables","position":{"start":{"line":1515,"column":1},"end":{"line":1515,"column":1}},"key":"zRs8Nk3mpa"}],"identifier":"quick-reference-tables","label":"Quick Reference Tables","html_id":"quick-reference-tables","implicit":true,"key":"aGSwcbx1z2"},{"type":"heading","depth":3,"position":{"start":{"line":1517,"column":1},"end":{"line":1517,"column":1}},"children":[{"type":"text","value":"Error Types and Meanings","position":{"start":{"line":1517,"column":1},"end":{"line":1517,"column":1}},"key":"fgTEeNzQOn"}],"identifier":"error-types-and-meanings","label":"Error Types and Meanings","html_id":"error-types-and-meanings","implicit":true,"key":"gQoCY1zNkr"},{"type":"table","position":{"start":{"line":1519,"column":1},"end":{"line":1527,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"children":[{"type":"text","value":"Exception","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"key":"tVkjVNfW2g"}],"key":"Wogc7eni9g"},{"type":"tableCell","header":true,"position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"children":[{"type":"text","value":"Meaning","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"key":"kvepXmJ0SL"}],"key":"z4yxTorsMA"},{"type":"tableCell","header":true,"position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"children":[{"type":"text","value":"Common Cause","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"key":"HWEkboHUcf"}],"key":"OutdUUm7RM"},{"type":"tableCell","header":true,"position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1519,"column":1},"end":{"line":1519,"column":1}},"key":"SkbUv7O8q0"}],"key":"FU86l6ZXVG"}],"key":"oK5vFr9aRm"},{"type":"tableRow","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"children":[{"type":"inlineCode","value":"NameError","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"Tjb5YxzUKX"}],"key":"nuSTfdf0Sd"},{"type":"tableCell","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"children":[{"type":"text","value":"Variable undefined","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"cpo40bToVz"}],"key":"quJ54hZZ7F"},{"type":"tableCell","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"children":[{"type":"text","value":"Typo in name","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"noT7PzLPHp"}],"key":"nbwVRv6VDc"},{"type":"tableCell","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"children":[{"type":"inlineCode","value":"print(resuIt)","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"RS3RRkBff2"},{"type":"text","value":" not ","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"kWvPVMU6Wy"},{"type":"inlineCode","value":"result","position":{"start":{"line":1521,"column":1},"end":{"line":1521,"column":1}},"key":"iz0AEsus9C"}],"key":"H05tFM0suG"}],"key":"i9MTHA6Kjf"},{"type":"tableRow","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"children":[{"type":"inlineCode","value":"TypeError","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"key":"Wos8jOex5b"}],"key":"UQ1P40VPFh"},{"type":"tableCell","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"children":[{"type":"text","value":"Wrong type","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"key":"OvNq87ouyc"}],"key":"I2ApFh9Fzg"},{"type":"tableCell","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"children":[{"type":"text","value":"String not number","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"key":"zOh6Qm17QL"}],"key":"YoOeJiX2o0"},{"type":"tableCell","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"children":[{"type":"inlineCode","value":"\"5\" + 2","position":{"start":{"line":1522,"column":1},"end":{"line":1522,"column":1}},"key":"MxHtiqyILg"}],"key":"SV3ekokIZc"}],"key":"fM7mfLl9Q1"},{"type":"tableRow","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"children":[{"type":"inlineCode","value":"ValueError","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"key":"jYh3KtyGXz"}],"key":"crvNkNBAUs"},{"type":"tableCell","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"children":[{"type":"text","value":"Invalid value","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"key":"PhqRtMbI21"}],"key":"x3NHi8DlJw"},{"type":"tableCell","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"children":[{"type":"text","value":"Outside range","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"key":"Xe3WJJilaw"}],"key":"BTs24BkG6V"},{"type":"tableCell","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"children":[{"type":"inlineCode","value":"math.sqrt(-1)","position":{"start":{"line":1523,"column":1},"end":{"line":1523,"column":1}},"key":"dIMUm9epMh"}],"key":"aW8yaLfsho"}],"key":"UWSkf13UhZ"},{"type":"tableRow","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"children":[{"type":"inlineCode","value":"IndexError","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"key":"z7jwg5cuv6"}],"key":"rWycibEhVc"},{"type":"tableCell","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"children":[{"type":"text","value":"Index too large","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"key":"xs9oTux4U7"}],"key":"i7pLCiKCaC"},{"type":"tableCell","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"children":[{"type":"text","value":"Off-by-one","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"key":"FFzuYjU6XH"}],"key":"fmjyCzr74h"},{"type":"tableCell","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"children":[{"type":"inlineCode","value":"arr[len(arr)]","position":{"start":{"line":1524,"column":1},"end":{"line":1524,"column":1}},"key":"jweNcpU8Yt"}],"key":"akYp3jmdSd"}],"key":"VBOgs73Fvi"},{"type":"tableRow","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"children":[{"type":"inlineCode","value":"KeyError","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"key":"PJgtxE5RuU"}],"key":"SE74mLQ2Zt"},{"type":"tableCell","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"children":[{"type":"text","value":"Missing dict key","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"key":"Bmwvu31azR"}],"key":"KLHpck6yKl"},{"type":"tableCell","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"children":[{"type":"text","value":"Typo or absent","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"key":"AAsp8xLwXZ"}],"key":"x6Iel6t8VZ"},{"type":"tableCell","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"children":[{"type":"inlineCode","value":"dict['temp']","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"key":"ZoKXqvpptD"},{"type":"text","value":" not there","position":{"start":{"line":1525,"column":1},"end":{"line":1525,"column":1}},"key":"T2wfk0VcxV"}],"key":"hWh13zj8e4"}],"key":"ulelpLWJvh"},{"type":"tableRow","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"children":[{"type":"inlineCode","value":"ZeroDivisionError","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"key":"Ncw6qmsMzd"}],"key":"ZSNDLgrd7G"},{"type":"tableCell","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"children":[{"type":"text","value":"Division by zero","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"key":"tfMRkVE7ol"}],"key":"IaV8AnqxQa"},{"type":"tableCell","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"children":[{"type":"text","value":"Empty dataset","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"key":"ISNoCeX623"}],"key":"UcTq432XQy"},{"type":"tableCell","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"children":[{"type":"inlineCode","value":"sum([])/len([])","position":{"start":{"line":1526,"column":1},"end":{"line":1526,"column":1}},"key":"ccJfv6b0kM"}],"key":"e0QTsOtWMZ"}],"key":"pvl0NeLsG9"},{"type":"tableRow","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"children":[{"type":"inlineCode","value":"FileNotFoundError","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"key":"JwAecwiHmM"}],"key":"Vu3bybWw94"},{"type":"tableCell","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"children":[{"type":"text","value":"File missing","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"key":"C8rlnA8xPy"}],"key":"qBffuvYu9A"},{"type":"tableCell","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"children":[{"type":"text","value":"Wrong path","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"key":"uZVy5mV7FA"}],"key":"XCUTYPK9wC"},{"type":"tableCell","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"children":[{"type":"text","value":"Wrong filename","position":{"start":{"line":1527,"column":1},"end":{"line":1527,"column":1}},"key":"l3kmelPlgH"}],"key":"P6dczpvwoC"}],"key":"gGEBkoVKZ0"}],"key":"EVIZyWpdeR"},{"type":"heading","depth":3,"position":{"start":{"line":1529,"column":1},"end":{"line":1529,"column":1}},"children":[{"type":"text","value":"Validation Strategy","position":{"start":{"line":1529,"column":1},"end":{"line":1529,"column":1}},"key":"bZdD00WwFA"}],"identifier":"validation-strategy","label":"Validation Strategy","html_id":"validation-strategy","implicit":true,"key":"vFyAMt5GhZ"},{"type":"table","position":{"start":{"line":1531,"column":1},"end":{"line":1537,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"children":[{"type":"text","value":"Check Type","position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"key":"Nbw94ye17t"}],"key":"i5EurleUB7"},{"type":"tableCell","header":true,"position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"children":[{"type":"text","value":"Code Pattern","position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"key":"BReU6DKHb7"}],"key":"Eid2eDj8uN"},{"type":"tableCell","header":true,"position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"children":[{"type":"text","value":"When to Use","position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"key":"QOrwwP8Wbq"}],"key":"s6V6wjZuK6"},{"type":"tableCell","header":true,"position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"children":[{"type":"text","value":"Cost","position":{"start":{"line":1531,"column":1},"end":{"line":1531,"column":1}},"key":"E8WaTeqtl7"}],"key":"wlgiOWKIru"}],"key":"nFap4vp3lc"},{"type":"tableRow","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"children":[{"type":"text","value":"Empty check","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"key":"qAluV7Frrl"}],"key":"wH9mrpl4Ib"},{"type":"tableCell","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"children":[{"type":"inlineCode","value":"if not data:","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"key":"x66FI0FUQl"}],"key":"eymMJwVeIS"},{"type":"tableCell","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"children":[{"type":"text","value":"Always first","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"key":"NffEjF14ww"}],"key":"v3CcevOLMI"},{"type":"tableCell","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":1533,"column":1},"end":{"line":1533,"column":1}},"key":"RnH3BH9Bp9"}],"key":"q45BHZhcTn"}],"key":"MAgXgVMsiX"},{"type":"tableRow","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"children":[{"type":"text","value":"Type check","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"key":"qq6l6h10XO"}],"key":"iPpE6ERI5D"},{"type":"tableCell","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"children":[{"type":"inlineCode","value":"isinstance(x, type)","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"key":"mz5K8HEcNi"}],"key":"bcjmuwXYY7"},{"type":"tableCell","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"children":[{"type":"text","value":"Mixed inputs","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"key":"eYFAdLKktf"}],"key":"P01ujqyLLj"},{"type":"tableCell","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":1534,"column":1},"end":{"line":1534,"column":1}},"key":"DiRFIZDOFh"}],"key":"UNXFshtvYE"}],"key":"FIYDdgoQ89"},{"type":"tableRow","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"children":[{"type":"text","value":"Range check","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"key":"gtkf3jJavo"}],"key":"f6B8FUKyWc"},{"type":"tableCell","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"children":[{"type":"inlineCode","value":"min <= x <= max","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"key":"yGUm0qb4ZN"}],"key":"FsXOhTTj0s"},{"type":"tableCell","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"children":[{"type":"text","value":"Physical limits","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"key":"onhCIJenvs"}],"key":"PFNmey6ZrR"},{"type":"tableCell","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"children":[{"type":"text","value":"O(1)","position":{"start":{"line":1535,"column":1},"end":{"line":1535,"column":1}},"key":"njPWARZrxP"}],"key":"pZfdLhVtrp"}],"key":"GOsoUlCSGL"},{"type":"tableRow","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"children":[{"type":"text","value":"NaN check","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"JGnRZisbv4"}],"key":"wR3gmGKXBh"},{"type":"tableCell","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"children":[{"type":"inlineCode","value":"np.isnan(x)","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"C3pXOGtfmX"}],"key":"So9QkPtOR3"},{"type":"tableCell","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"children":[{"type":"text","value":"Numerical data","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"a2bpUOSFEV"}],"key":"HzZYL2bh8B"},{"type":"tableCell","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":1536,"column":1},"end":{"line":1536,"column":1}},"key":"Dd03fa0RYu"}],"key":"leRoTZJlZU"}],"key":"m8Jd8JB6w1"},{"type":"tableRow","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"children":[{"type":"text","value":"Uniqueness","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"key":"q4EEr2upat"}],"key":"GZWvy5eQ5W"},{"type":"tableCell","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"children":[{"type":"inlineCode","value":"len(set(x)) == len(x)","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"key":"vvpmHonqe3"}],"key":"LoMkpiyJnX"},{"type":"tableCell","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"children":[{"type":"text","value":"Duplicates bad","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"key":"bXdWVDLLwc"}],"key":"b3erZvsNQB"},{"type":"tableCell","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":1537,"column":1},"end":{"line":1537,"column":1}},"key":"BJPcz8mAI6"}],"key":"JERAxREWr0"}],"key":"VmQW792Y1t"}],"key":"x1Fby2JxA7"},{"type":"heading","depth":3,"position":{"start":{"line":1539,"column":1},"end":{"line":1539,"column":1}},"children":[{"type":"text","value":"Logging Best Practices","position":{"start":{"line":1539,"column":1},"end":{"line":1539,"column":1}},"key":"r6yBaSiTyr"}],"identifier":"logging-best-practices","label":"Logging Best Practices","html_id":"logging-best-practices","implicit":true,"key":"KdMd9VwGUM"},{"type":"table","position":{"start":{"line":1541,"column":1},"end":{"line":1547,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"children":[{"type":"text","value":"Level","position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"key":"Ri3M7S0ici"}],"key":"cpBfEyC8PB"},{"type":"tableCell","header":true,"position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"children":[{"type":"text","value":"Use Case","position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"key":"Zg1fPociMN"}],"key":"OfmnntnVHO"},{"type":"tableCell","header":true,"position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"children":[{"type":"text","value":"Example Message","position":{"start":{"line":1541,"column":1},"end":{"line":1541,"column":1}},"key":"bU0Q2xWAzV"}],"key":"Bmsqe37wfZ"}],"key":"QRfqT3p0RT"},{"type":"tableRow","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"children":[{"type":"inlineCode","value":"DEBUG","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"key":"oU9fm7nda1"}],"key":"o8UcZDAtPP"},{"type":"tableCell","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"children":[{"type":"text","value":"Variable values","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"key":"Iv5liZ4xWP"}],"key":"USMq849O88"},{"type":"tableCell","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"children":[{"type":"text","value":"“Array shape: (100, 50)”","position":{"start":{"line":1543,"column":1},"end":{"line":1543,"column":1}},"key":"smUV5JmfWN"}],"key":"T4WSOb9pUg"}],"key":"wLLxxW8JFr"},{"type":"tableRow","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"children":[{"type":"inlineCode","value":"INFO","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"key":"jNFgTh0Wuy"}],"key":"avX8sI3vYV"},{"type":"tableCell","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"children":[{"type":"text","value":"Normal progress","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"key":"zDmzP6jMVF"}],"key":"G1b3mn7LcC"},{"type":"tableCell","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"children":[{"type":"text","value":"“Processing file 3 of 10”","position":{"start":{"line":1544,"column":1},"end":{"line":1544,"column":1}},"key":"h9k4Tjcxpm"}],"key":"k6qxWmEPOt"}],"key":"CSDZno60vS"},{"type":"tableRow","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"children":[{"type":"inlineCode","value":"WARNING","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"key":"lJ8gy7y86x"}],"key":"ERcMYJRDd1"},{"type":"tableCell","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"children":[{"type":"text","value":"Concerning but OK","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"key":"YTiNTmDUaq"}],"key":"Zzax1J9lqv"},{"type":"tableCell","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"children":[{"type":"text","value":"“Low sample size: n=5”","position":{"start":{"line":1545,"column":1},"end":{"line":1545,"column":1}},"key":"Hm6ryJYxdf"}],"key":"Km7DZvp32e"}],"key":"L2TyO10uOU"},{"type":"tableRow","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"children":[{"type":"inlineCode","value":"ERROR","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"key":"oXjZuxz6CG"}],"key":"vpm4wQiMJN"},{"type":"tableCell","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"children":[{"type":"text","value":"Operation failed","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"key":"OTxrrljIAV"}],"key":"YituigL5zk"},{"type":"tableCell","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"children":[{"type":"text","value":"“Cannot read config file”","position":{"start":{"line":1546,"column":1},"end":{"line":1546,"column":1}},"key":"SWVNUQblBb"}],"key":"KRhljCVjmf"}],"key":"Oi1WklaKOm"},{"type":"tableRow","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"children":[{"type":"inlineCode","value":"CRITICAL","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"key":"yti72I36M6"}],"key":"xCcxnTdsp6"},{"type":"tableCell","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"children":[{"type":"text","value":"Must stop","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"key":"MRTkEBk3e2"}],"key":"wlhBzNU9m6"},{"type":"tableCell","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"children":[{"type":"text","value":"“Database connection lost”","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"key":"l3wsKlyQFB"}],"key":"tYwyuC4w1C"}],"key":"sKBJ7qgNLm"}],"key":"nhFRmUGUVA"},{"type":"heading","depth":3,"position":{"start":{"line":1549,"column":1},"end":{"line":1549,"column":1}},"children":[{"type":"text","value":"Testing Checklist","position":{"start":{"line":1549,"column":1},"end":{"line":1549,"column":1}},"key":"nmHDjFWh9d"}],"identifier":"testing-checklist","label":"Testing Checklist","html_id":"testing-checklist","implicit":true,"key":"kGymU8oi03"},{"type":"table","position":{"start":{"line":1551,"column":1},"end":{"line":1557,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"children":[{"type":"text","value":"Test Type","position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"key":"ptMQcGJ4Ua"}],"key":"BD4aEVf5eV"},{"type":"tableCell","header":true,"position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"children":[{"type":"text","value":"What to Test","position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"key":"zdJoaoVtxE"}],"key":"rssjsdaa5T"},{"type":"tableCell","header":true,"position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1551,"column":1},"end":{"line":1551,"column":1}},"key":"lYyGJjafpw"}],"key":"G0LpijUsso"}],"key":"SDUw6Jwuqd"},{"type":"tableRow","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"children":[{"type":"text","value":"Normal case","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"key":"uJW9JhaDCN"}],"key":"F32ngmLouq"},{"type":"tableCell","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"children":[{"type":"text","value":"Common usage","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"key":"jXhisZtO83"}],"key":"T6WE89VaUw"},{"type":"tableCell","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"children":[{"type":"text","value":"Valid input range","position":{"start":{"line":1553,"column":1},"end":{"line":1553,"column":1}},"key":"ByP72eEyT6"}],"key":"oVPGSUOOsW"}],"key":"JZyGAgtJww"},{"type":"tableRow","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"children":[{"type":"text","value":"Edge cases","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"key":"lB9X9XxXlj"}],"key":"TeaZzeJkDT"},{"type":"tableCell","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"children":[{"type":"text","value":"Boundaries","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"key":"ryQTT6kuQU"}],"key":"FsKPmbIOnM"},{"type":"tableCell","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"children":[{"type":"text","value":"Empty, single item","position":{"start":{"line":1554,"column":1},"end":{"line":1554,"column":1}},"key":"pg6eriDz75"}],"key":"HWkfGfX7o7"}],"key":"gisFNCcOva"},{"type":"tableRow","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"children":[{"type":"text","value":"Error cases","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"key":"iZaPColyf4"}],"key":"SMz6oOqJlA"},{"type":"tableCell","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"children":[{"type":"text","value":"Invalid input","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"key":"Yy1FizyhLl"}],"key":"IsPIR9JciJ"},{"type":"tableCell","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"children":[{"type":"text","value":"Wrong type, NaN","position":{"start":{"line":1555,"column":1},"end":{"line":1555,"column":1}},"key":"Jz8OwUMlfY"}],"key":"sj4pBN1Xj4"}],"key":"NKKXjpQrcm"},{"type":"tableRow","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"children":[{"type":"text","value":"Properties","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"key":"dQXVbtz00u"}],"key":"k6IXcURBqi"},{"type":"tableCell","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"children":[{"type":"text","value":"Math invariants","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"key":"H46dDhhe3P"}],"key":"kXUBqamwMy"},{"type":"tableCell","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"children":[{"type":"text","value":"Mean in [min, max]","position":{"start":{"line":1556,"column":1},"end":{"line":1556,"column":1}},"key":"LQRvLqW7mM"}],"key":"BXsICT4Zhf"}],"key":"gB9Rs1i3Am"},{"type":"tableRow","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"children":[{"type":"text","value":"Regression","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"key":"REFBHIWP7I"}],"key":"EgkmglrCey"},{"type":"tableCell","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"children":[{"type":"text","value":"Previous bugs","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"key":"PBM4rx1dxJ"}],"key":"J8SThk2VOR"},{"type":"tableCell","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"children":[{"type":"text","value":"Specific failure case","position":{"start":{"line":1557,"column":1},"end":{"line":1557,"column":1}},"key":"gBdKSJaJJ7"}],"key":"szlcxtrH3Y"}],"key":"FLEUtOHDzb"}],"key":"t4k9YY1VwT"},{"type":"heading","depth":2,"position":{"start":{"line":1559,"column":1},"end":{"line":1559,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":1559,"column":1},"end":{"line":1559,"column":1}},"key":"kl9eD14wVz"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview","implicit":true,"key":"DrdFrO3mNe"},{"type":"paragraph","position":{"start":{"line":1561,"column":1},"end":{"line":1561,"column":1}},"children":[{"type":"text","value":"Now that your code can handle errors gracefully, Chapter 10 will explore reading and writing scientific data formats. You’ll learn to work with CSV files, JSON data, and binary formats like HDF5. The error handling skills from this chapter will be essential when dealing with external data files where formats might be inconsistent, values might be missing, and files might be corrupted.","position":{"start":{"line":1561,"column":1},"end":{"line":1561,"column":1}},"key":"jGDCOYcBzO"}],"key":"y6btYWK2CU"},{"type":"paragraph","position":{"start":{"line":1563,"column":1},"end":{"line":1563,"column":1}},"children":[{"type":"text","value":"You’re building the foundation for robust scientific computing. Your code no longer just works—it works reliably, tells you when something’s wrong, and helps you fix problems quickly. This transformation from hopeful code to professional code is what separates scripts that work once from tools you can trust with your research.","position":{"start":{"line":1563,"column":1},"end":{"line":1563,"column":1}},"key":"cZyTOzlRZY"}],"key":"MkfbkNhZbb"}],"key":"w0CpB4IiD5"}],"key":"lznME8EKLH"},"references":{"cite":{"order":[],"data":{}}}}