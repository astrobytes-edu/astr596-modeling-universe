{"version":2,"kind":"Article","sha256":"4fd2daae84007f0520b26be51dcb897acbd791960b7da96d2dced904d0c61623","slug":"project2-description","location":"/short-projects/2_project2_description.md","dependencies":[],"frontmatter":{"title":"ASTR 596 Project 2: N-Body Dynamics + Statistical Sampling + Stellar Systems","content_includes_title":false,"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/short-projects/2_project2_description.md","exports":[{"format":"md","filename":"2_project2_description.md","url":"/2_project2_descripti-64a81361f2bfa29ba49ee57930002edf.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Duration","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"a6FDmhrIuG"}],"key":"ZGMwlE5mOR"},{"type":"text","value":": 3 weeks\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"a6IQmQ7oRX"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Weight","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"neCpY54uUM"}],"key":"j96WZyX0fK"},{"type":"text","value":": 15% of course grade\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"jhdB7yRRrU"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Theme","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"jO9uFOyxSa"}],"key":"PuAPUVYOqa"},{"type":"text","value":": “Realistic Stellar Clusters with Gravitational Dynamics”","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"i8ftcl2FHz"}],"key":"MryBEWWSbx"},{"type":"thematicBreak","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Wf4aCsY3PT"},{"type":"heading","depth":3,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Project Overview","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"AYh03Mxz3A"}],"identifier":"project-overview","label":"Project Overview","html_id":"project-overview","implicit":true,"key":"mBBDwbMzGQ"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"This project builds sophisticated N-body gravitational dynamics simulations with realistic stellar populations. You will implement multiple ODE integration schemes, master statistical sampling from astrophysical distributions, and create evolving stellar clusters that serve as input for radiation calculations in Project 3. The emphasis is on vectorization, performance optimization, and adaptive numerical methods.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"SAGa1JhHM5"}],"key":"MYXSJ6JSeU"},{"type":"heading","depth":3,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"tT7WdDW965"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"aUEQdFT2TT"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"By completing this project, you will:","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"VC8mCxyB6p"}],"key":"MnVAq7XOub"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":15,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Master ODE integration","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"q4sry83X3H"}],"key":"SxJc4XF0rt"},{"type":"text","value":": Implement and compare multiple numerical integration schemes","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"T9s2euMmwd"}],"key":"e1pW67b5hT"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Understand gravitational dynamics","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"jS0Wm9J8fd"}],"key":"l5lwyNHt6g"},{"type":"text","value":": N-body physics, energy conservation, and cluster evolution","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Sa8cOmxmI8"}],"key":"ykMjGQH5K2"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Learn statistical sampling","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"rF02QtMaI1"}],"key":"D9sVHNVfIO"},{"type":"text","value":": Sample from Initial Mass Function and spatial distributions","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Nuw0ug2fzc"}],"key":"XaSeNOSrMw"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"strong","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Develop vectorization skills","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"HUJ5RKHMiQ"}],"key":"lqugJtPEdq"},{"type":"text","value":": Efficient NumPy operations for computational performance","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"JYgz1gzzKJ"}],"key":"dwX2eZuUtL"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Implement adaptive methods","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"ZQTd3i5FEr"}],"key":"qFQxLTJr1z"},{"type":"text","value":": Energy-controlled timestep adjustment","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"gvaZ4ax86z"}],"key":"F71tEF0ELe"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"strong","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Generate realistic astrophysical data","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"zq8aB4QNMy"}],"key":"IweoitFesA"},{"type":"text","value":": Stellar clusters for radiation modeling","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"dgu2mByrYm"}],"key":"lctxM2DRWu"}],"key":"HCQ0Bpn5Uv"},{"type":"heading","depth":3,"position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Prerequisites from Project 1","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"IbyfFW6Nb3"}],"identifier":"prerequisites-from-project-1","label":"Prerequisites from Project 1","html_id":"prerequisites-from-project-1","implicit":true,"key":"Dg71YvuEUv"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":23,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Numerical integration techniques (trapezoid, Simpson’s, Gaussian quadrature)","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"ijAROpcolU"}],"key":"FotNsKCa2O"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Root-finding methods (Newton-Raphson for energy balance)","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"QGiWOVFmj7"}],"key":"Kq5ITA1tBK"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Object-oriented programming (Star class design)","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"ytvJRcss5R"}],"key":"sQrGv6mIVp"},{"type":"listItem","spread":true,"position":{"start":{"line":26,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Blackbody physics and stellar luminosity calculations","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"yNvzootw5K"}],"key":"boPbHVnKHs"}],"key":"jjgY217Plx"},{"type":"thematicBreak","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"BF1JvMjyNm"},{"type":"heading","depth":2,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Week 1: ODE Solvers and Energy Conservation","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"KsB4oMBrDO"}],"identifier":"week-1-ode-solvers-and-energy-conservation","label":"Week 1: ODE Solvers and Energy Conservation","html_id":"week-1-ode-solvers-and-energy-conservation","implicit":true,"key":"F8nXJkeyv3"},{"type":"heading","depth":3,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Conceptual Introduction (25 min)","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"eRGq74nZDY"}],"identifier":"conceptual-introduction-25-min","label":"Conceptual Introduction (25 min)","html_id":"conceptual-introduction-25-min","implicit":true,"key":"I0TndtTjtb"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Newton’s laws and gravitational force in astrophysical contexts","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Zmwyf6YgO3"}],"key":"AoP1sLlPXz"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Converting 2nd order ODEs to 1st order systems","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"QJkbeHsEVZ"}],"key":"ZunIdLYFwO"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Integration methods: explicit vs implicit, stability vs accuracy","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"d8NlR2ksPF"}],"key":"RCiu9ADjCe"},{"type":"listItem","spread":true,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Symplectic integrators for Hamiltonian systems","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"icglbTFvb2"}],"key":"mu6VRDk5EN"},{"type":"listItem","spread":true,"position":{"start":{"line":37,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Energy and angular momentum conservation in gravitational systems","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"e7lRvFlZi7"}],"key":"IiMy5Xscyi"}],"key":"JtR6R5qz8v"},{"type":"heading","depth":3,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Lab Session Objectives","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"rRYC5McJP7"}],"identifier":"lab-session-objectives","label":"Lab Session Objectives","html_id":"lab-session-objectives","implicit":true,"key":"xcgVpGMRjb"},{"type":"paragraph","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"Build comprehensive ODE solver library and validate on two-body dynamics.","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"fLkgp99xCw"}],"key":"yCpeysWjMr"},{"type":"heading","depth":4,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Task 1: ODE Solver Framework (45 min)","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"WK831fQ7Ku"}],"identifier":"task-1-ode-solver-framework-45-min","label":"Task 1: ODE Solver Framework (45 min)","html_id":"task-1-ode-solver-framework-45-min","implicit":true,"key":"neDb8Nb1NS"},{"type":"paragraph","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"strong","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"vcLGY8NVX8"}],"key":"kCHAP4xIjF"},{"type":"text","value":": Create abstract base class and implement multiple integration methods","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"kcAEJpFFZb"}],"key":"QJtX2Ie44a"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"strong","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"Framework Design","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"Ig5O5GekrR"}],"key":"xWW4xOMzE7"},{"type":"text","value":":","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"YYMnntakrZ"}],"key":"GmnsR3TSXu"},{"type":"code","lang":"python","value":"from abc import ABC, abstractmethod\nimport numpy as np\n\nclass ODESolver(ABC):\n    \"\"\"\n    Abstract base class for ODE integration methods.\n    \n    Solves system: dy/dt = f(t, y) where y can be vector-valued\n    \"\"\"\n    \n    def __init__(self, derivatives_func, initial_conditions, initial_time=0.0):\n        \"\"\"\n        Parameters:\n        -----------\n        derivatives_func : callable\n            Function f(t, y) returning dy/dt\n        initial_conditions : array_like\n            Initial values y(t0)\n        initial_time : float\n            Initial time t0\n        \"\"\"\n        self.f = derivatives_func\n        self.y = np.array(initial_conditions, dtype=float)\n        self.t = initial_time\n        self.history = {'t': [initial_time], 'y': [self.y.copy()]}\n    \n    @abstractmethod\n    def step(self, dt):\n        \"\"\"Take single integration step of size dt.\"\"\"\n        pass\n    \n    def evolve(self, t_final, dt):\n        \"\"\"Evolve system from current time to t_final.\"\"\"\n        while self.t < t_final:\n            step_size = min(dt, t_final - self.t)\n            self.step(step_size)\n            self.history['t'].append(self.t)\n            self.history['y'].append(self.y.copy())\n        return np.array(self.history['t']), np.array(self.history['y'])\n\nclass EulerSolver(ODESolver):\n    \"\"\"First-order Euler method: y_{n+1} = y_n + dt * f(t_n, y_n)\"\"\"\n    \n    def step(self, dt):\n        \"\"\"Implement Euler step.\"\"\"\n        dydt = self.f(self.t, self.y)\n        self.y += dt * dydt\n        self.t += dt\n\nclass RungeKutta4Solver(ODESolver):\n    \"\"\"Fourth-order Runge-Kutta method.\"\"\"\n    \n    def step(self, dt):\n        \"\"\"Implement RK4 step with four evaluations.\"\"\"\n        k1 = self.f(self.t, self.y)\n        k2 = self.f(self.t + dt/2, self.y + dt*k1/2)\n        k3 = self.f(self.t + dt/2, self.y + dt*k2/2)\n        k4 = self.f(self.t + dt, self.y + dt*k3)\n        \n        self.y += dt * (k1 + 2*k2 + 2*k3 + k4) / 6\n        self.t += dt\n\nclass LeapfrogSolver(ODESolver):\n    \"\"\"\n    Leapfrog integrator for Hamiltonian systems.\n    Particularly good for gravitational dynamics.\n    \"\"\"\n    \n    def __init__(self, force_func, positions, velocities, masses, initial_time=0.0):\n        \"\"\"\n        Specialized for N-body problems.\n        \n        Parameters:\n        -----------\n        force_func : callable\n            Function returning accelerations given (positions, masses)\n        positions : array\n            Initial positions [N, 3]\n        velocities : array  \n            Initial velocities [N, 3]\n        masses : array\n            Particle masses [N]\n        \"\"\"\n        self.force_func = force_func\n        self.positions = np.array(positions)\n        self.velocities = np.array(velocities)\n        self.masses = np.array(masses)\n        self.t = initial_time\n        self.history = {\n            't': [initial_time],\n            'positions': [self.positions.copy()],\n            'velocities': [self.velocities.copy()]\n        }\n    \n    def step(self, dt):\n        \"\"\"Leapfrog integration step.\"\"\"\n        # Kick: v_{1/2} = v_0 + (dt/2) * a_0\n        accelerations = self.force_func(self.positions, self.masses)\n        self.velocities += 0.5 * dt * accelerations\n        \n        # Drift: x_1 = x_0 + dt * v_{1/2}\n        self.positions += dt * self.velocities\n        \n        # Kick: v_1 = v_{1/2} + (dt/2) * a_1\n        accelerations = self.force_func(self.positions, self.masses)\n        self.velocities += 0.5 * dt * accelerations\n        \n        self.t += dt\n        self.history['t'].append(self.t)\n        self.history['positions'].append(self.positions.copy())\n        self.history['velocities'].append(self.velocities.copy())","position":{"start":{"line":46,"column":1},"end":{"line":158,"column":1}},"key":"EO0WoPGCBt"},{"type":"heading","depth":4,"position":{"start":{"line":160,"column":1},"end":{"line":160,"column":1}},"children":[{"type":"text","value":"Task 2: Two-Body Gravitational Dynamics (60 min)","position":{"start":{"line":160,"column":1},"end":{"line":160,"column":1}},"key":"y1sXYk8Xlc"}],"identifier":"task-2-two-body-gravitational-dynamics-60-min","label":"Task 2: Two-Body Gravitational Dynamics (60 min)","html_id":"task-2-two-body-gravitational-dynamics-60-min","implicit":true,"key":"DXQCDpA6E3"},{"type":"paragraph","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"strong","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"YmoEPymq3b"}],"key":"p4CjggZnZp"},{"type":"text","value":": Validate integrators on Kepler problem with known analytical solution","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"cQPCoPFoHi"}],"key":"FcXcZSBCVR"},{"type":"paragraph","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"strong","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"Implementation Requirements","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"hloja4BWjJ"}],"key":"BX4d7jUp83"},{"type":"text","value":":","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"epFlcXB5vb"}],"key":"GUI2O5kMi0"},{"type":"code","lang":"python","value":"def gravitational_derivatives(t, state):\n    \"\"\"\n    Derivatives for two-body problem.\n    \n    state = [x1, y1, z1, vx1, vy1, vz1, x2, y2, z2, vx2, vy2, vz2]\n    \"\"\"\n    # Extract positions and velocities\n    pos1 = state[0:3]\n    vel1 = state[3:6]\n    pos2 = state[6:9]\n    vel2 = state[9:12]\n    \n    # Calculate separation and force\n    r_vec = pos2 - pos1\n    r_mag = np.linalg.norm(r_vec)\n    \n    # Gravitational acceleration\n    G = 6.674e-11  # m³/kg/s²\n    m1, m2 = 1.0, 1.0  # masses\n    \n    acc_magnitude = G * (m1 + m2) / r_mag**3\n    acc1 = acc_magnitude * r_vec\n    acc2 = -acc_magnitude * r_vec\n    \n    # Return derivatives: [vel1, acc1, vel2, acc2]\n    return np.concatenate([vel1, acc1, vel2, acc2])\n\ndef kepler_orbit_validation():\n    \"\"\"\n    Test integrators on Earth-Sun system.\n    Compare with analytical solution for energy and angular momentum.\n    \"\"\"\n    # Earth-Sun system (simplified units)\n    AU = 1.496e11  # m\n    year = 365.25 * 24 * 3600  # s\n    \n    # Initial conditions: Earth at aphelion\n    initial_state = [\n        1.017*AU, 0, 0,      # Earth position\n        0, 29.29e3, 0,       # Earth velocity\n        0, 0, 0,             # Sun position (at origin)\n        0, 0, 0              # Sun velocity\n    ]\n    \n    # Test each integrator\n    methods = {\n        'Euler': EulerSolver,\n        'RK4': RungeKutta4Solver\n    }\n    \n    results = {}\n    for name, SolverClass in methods.items():\n        solver = SolverClass(gravitational_derivatives, initial_state)\n        t_vals, y_vals = solver.evolve(t_final=year, dt=year/1000)\n        results[name] = {'t': t_vals, 'y': y_vals}\n    \n    return results\n\ndef calculate_orbital_energy(positions, velocities, masses):\n    \"\"\"Calculate total energy: kinetic + potential.\"\"\"\n    # Kinetic energy: (1/2) * m * v²\n    ke = 0.5 * np.sum(masses * np.sum(velocities**2, axis=1))\n    \n    # Potential energy: -G * m1 * m2 / r\n    G = 6.674e-11\n    pe = 0\n    for i in range(len(masses)):\n        for j in range(i+1, len(masses)):\n            r_ij = np.linalg.norm(positions[i] - positions[j])\n            pe -= G * masses[i] * masses[j] / r_ij\n    \n    return ke + pe\n\ndef orbital_validation_analysis(results):\n    \"\"\"\n    Analyze energy conservation and orbital accuracy.\n    Plot energy drift and orbital trajectories.\n    \"\"\"\n    # Calculate energy conservation for each method\n    # Plot trajectories and energy vs time\n    # Compare with analytical orbital period","position":{"start":{"line":164,"column":1},"end":{"line":246,"column":1}},"key":"ULcGrKdv1V"},{"type":"heading","depth":4,"position":{"start":{"line":248,"column":1},"end":{"line":248,"column":1}},"children":[{"type":"text","value":"Task 3: Error Analysis and Method Comparison (30 min)","position":{"start":{"line":248,"column":1},"end":{"line":248,"column":1}},"key":"AKe97iOO6z"}],"identifier":"task-3-error-analysis-and-method-comparison-30-min","label":"Task 3: Error Analysis and Method Comparison (30 min)","html_id":"task-3-error-analysis-and-method-comparison-30-min","implicit":true,"key":"ABMIaVX6hV"},{"type":"paragraph","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"children":[{"type":"strong","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"QpZbZJbH9u"}],"key":"TluJs44lae"},{"type":"text","value":": Understand trade-offs between accuracy, stability, and computational cost","position":{"start":{"line":249,"column":1},"end":{"line":249,"column":1}},"key":"l1MPhrFRmM"}],"key":"LIFrikQyNY"},{"type":"paragraph","position":{"start":{"line":251,"column":1},"end":{"line":251,"column":1}},"children":[{"type":"strong","position":{"start":{"line":251,"column":1},"end":{"line":251,"column":1}},"children":[{"type":"text","value":"Analysis Requirements","position":{"start":{"line":251,"column":1},"end":{"line":251,"column":1}},"key":"onVXcIO8h1"}],"key":"Ajxxeo57E9"},{"type":"text","value":":","position":{"start":{"line":251,"column":1},"end":{"line":251,"column":1}},"key":"brwUND5tA2"}],"key":"pzvKPAVKWW"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":252,"column":1},"end":{"line":256,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":252,"column":1},"end":{"line":252,"column":1}},"children":[{"type":"strong","position":{"start":{"line":252,"column":1},"end":{"line":252,"column":1}},"children":[{"type":"text","value":"Convergence Study","position":{"start":{"line":252,"column":1},"end":{"line":252,"column":1}},"key":"JPkQpus3SP"}],"key":"w5J2kdIb7L"},{"type":"text","value":": Plot error vs timestep for each method","position":{"start":{"line":252,"column":1},"end":{"line":252,"column":1}},"key":"WM5Wcy5bnb"}],"key":"W9ZjtuJuMA"},{"type":"listItem","spread":true,"position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"strong","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"Energy Conservation","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"Pfv1vAHqbG"}],"key":"AO1yT1fOZh"},{"type":"text","value":": Track relative energy drift over multiple orbits","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"IpolcnE82C"}],"key":"NbmXrmoBpv"},{"type":"listItem","spread":true,"position":{"start":{"line":254,"column":1},"end":{"line":254,"column":1}},"children":[{"type":"strong","position":{"start":{"line":254,"column":1},"end":{"line":254,"column":1}},"children":[{"type":"text","value":"Computational Cost","position":{"start":{"line":254,"column":1},"end":{"line":254,"column":1}},"key":"zktUFNDVwO"}],"key":"VPQc1BBtVI"},{"type":"text","value":": Time each method for various timestep sizes","position":{"start":{"line":254,"column":1},"end":{"line":254,"column":1}},"key":"WgnJ0FQRxK"}],"key":"LvRn1uXUcT"},{"type":"listItem","spread":true,"position":{"start":{"line":255,"column":1},"end":{"line":256,"column":1}},"children":[{"type":"strong","position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"children":[{"type":"text","value":"Long-term Stability","position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"key":"cBiGFAiVpW"}],"key":"FKzDLa6tW7"},{"type":"text","value":": Run for 10+ orbital periods","position":{"start":{"line":255,"column":1},"end":{"line":255,"column":1}},"key":"Z1yF2ZMFqK"}],"key":"Rz7buHEnDC"}],"key":"tYkTSXH64C"},{"type":"paragraph","position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"children":[{"type":"strong","position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"children":[{"type":"text","value":"Week 1 Deliverable","position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"key":"ejcaqS7qNG"}],"key":"MGnx5QcAx6"},{"type":"text","value":": ODE solver library with comprehensive validation on Kepler orbits","position":{"start":{"line":257,"column":1},"end":{"line":257,"column":1}},"key":"XZeV0xCAxM"}],"key":"iJus80kaNC"},{"type":"thematicBreak","position":{"start":{"line":259,"column":1},"end":{"line":259,"column":1}},"key":"pb73KzHQXa"},{"type":"heading","depth":2,"position":{"start":{"line":261,"column":1},"end":{"line":261,"column":1}},"children":[{"type":"text","value":"Week 2: Statistical Sampling and Multi-Body Systems","position":{"start":{"line":261,"column":1},"end":{"line":261,"column":1}},"key":"nNux0BZyNR"}],"identifier":"week-2-statistical-sampling-and-multi-body-systems","label":"Week 2: Statistical Sampling and Multi-Body Systems","html_id":"week-2-statistical-sampling-and-multi-body-systems","implicit":true,"key":"VFv3k4zlev"},{"type":"heading","depth":3,"position":{"start":{"line":263,"column":1},"end":{"line":263,"column":1}},"children":[{"type":"text","value":"Conceptual Introduction (25 min)","position":{"start":{"line":263,"column":1},"end":{"line":263,"column":1}},"key":"efQuWq1C1E"}],"identifier":"conceptual-introduction-25-min","label":"Conceptual Introduction (25 min)","html_id":"conceptual-introduction-25-min-1","implicit":true,"key":"UJHp88q3Sw"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":264,"column":1},"end":{"line":268,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"children":[{"type":"text","value":"Stellar Initial Mass Function: Salpeter, Kroupa, Chabrier prescriptions","position":{"start":{"line":264,"column":1},"end":{"line":264,"column":1}},"key":"l3kmG3KW3Y"}],"key":"toDy51sQGk"},{"type":"listItem","spread":true,"position":{"start":{"line":265,"column":1},"end":{"line":265,"column":1}},"children":[{"type":"text","value":"Spatial distributions in star clusters: Plummer sphere, King profiles","position":{"start":{"line":265,"column":1},"end":{"line":265,"column":1}},"key":"RGaVfwhR4w"}],"key":"jKVW4DbirA"},{"type":"listItem","spread":true,"position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"children":[{"type":"text","value":"Statistical sampling techniques: inverse transform, rejection sampling","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"key":"Ty7GWwfY1r"}],"key":"FFn2mvBTRy"},{"type":"listItem","spread":true,"position":{"start":{"line":267,"column":1},"end":{"line":268,"column":1}},"children":[{"type":"text","value":"Virial equilibrium and cluster dynamics","position":{"start":{"line":267,"column":1},"end":{"line":267,"column":1}},"key":"YxIoOhndMM"}],"key":"OlnPnkk2sn"}],"key":"TArug3A3WO"},{"type":"heading","depth":3,"position":{"start":{"line":269,"column":1},"end":{"line":269,"column":1}},"children":[{"type":"text","value":"Lab Session Objectives","position":{"start":{"line":269,"column":1},"end":{"line":269,"column":1}},"key":"tqDKKW7mh4"}],"identifier":"lab-session-objectives","label":"Lab Session Objectives","html_id":"lab-session-objectives-1","implicit":true,"key":"oFSu6gL1ms"},{"type":"paragraph","position":{"start":{"line":270,"column":1},"end":{"line":270,"column":1}},"children":[{"type":"text","value":"Implement realistic stellar cluster initialization and scale to many-body systems.","position":{"start":{"line":270,"column":1},"end":{"line":270,"column":1}},"key":"xeth7j6JVh"}],"key":"XVkt0Qq10S"},{"type":"heading","depth":4,"position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"children":[{"type":"text","value":"Task 1: Initial Mass Function Implementation (50 min)","position":{"start":{"line":272,"column":1},"end":{"line":272,"column":1}},"key":"LKfM5w038Q"}],"identifier":"task-1-initial-mass-function-implementation-50-min","label":"Task 1: Initial Mass Function Implementation (50 min)","html_id":"task-1-initial-mass-function-implementation-50-min","implicit":true,"key":"ybw4DaEefl"},{"type":"paragraph","position":{"start":{"line":273,"column":1},"end":{"line":273,"column":1}},"children":[{"type":"strong","position":{"start":{"line":273,"column":1},"end":{"line":273,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":273,"column":1},"end":{"line":273,"column":1}},"key":"nvvEBexOvc"}],"key":"pSFAzSKU1k"},{"type":"text","value":": Sample realistic stellar mass distributions","position":{"start":{"line":273,"column":1},"end":{"line":273,"column":1}},"key":"xt6idbjNk5"}],"key":"pihPozQ7A9"},{"type":"paragraph","position":{"start":{"line":275,"column":1},"end":{"line":275,"column":1}},"children":[{"type":"strong","position":{"start":{"line":275,"column":1},"end":{"line":275,"column":1}},"children":[{"type":"text","value":"IMF Theory and Implementation","position":{"start":{"line":275,"column":1},"end":{"line":275,"column":1}},"key":"sLaCROgCxM"}],"key":"l5ahTqa3jX"},{"type":"text","value":":","position":{"start":{"line":275,"column":1},"end":{"line":275,"column":1}},"key":"Yh2pkNkWLq"}],"key":"yBbecqxNe5"},{"type":"code","lang":"python","value":"class StellarIMF:\n    \"\"\"\n    Stellar Initial Mass Function implementation.\n    \n    Supports multiple functional forms used in astrophysics.\n    \"\"\"\n    \n    def __init__(self, imf_type='kroupa', mass_range=(0.08, 120)):\n        \"\"\"\n        Parameters:\n        -----------\n        imf_type : str\n            'salpeter', 'kroupa', or 'chabrier'\n        mass_range : tuple\n            (minimum_mass, maximum_mass) in solar masses\n        \"\"\"\n        self.imf_type = imf_type\n        self.m_min, self.m_max = mass_range\n        self.normalization = self._calculate_normalization()\n    \n    def pdf(self, mass):\n        \"\"\"\n        Probability density function dN/dM.\n        \n        Salpeter (1955): dN/dM ∝ M^(-2.35)\n        Kroupa (2001): dN/dM ∝ M^(-1.3) for M < 0.5 M☉\n                               M^(-2.3) for M > 0.5 M☉\n        \"\"\"\n        mass = np.asarray(mass)\n        \n        if self.imf_type == 'salpeter':\n            return mass**(-2.35)\n        \n        elif self.imf_type == 'kroupa':\n            # Broken power law\n            result = np.zeros_like(mass)\n            low_mass = mass < 0.5\n            high_mass = mass >= 0.5\n            \n            result[low_mass] = mass[low_mass]**(-1.3)\n            # Ensure continuity at M = 0.5\n            normalization = 0.5**(-1.3 + 2.3)\n            result[high_mass] = normalization * mass[high_mass]**(-2.3)\n            \n            return result\n        \n        elif self.imf_type == 'chabrier':\n            # Log-normal for low masses + power law for high masses\n            # Implementation left as advanced exercise\n            pass\n    \n    def cdf(self, mass):\n        \"\"\"Cumulative distribution function.\"\"\"\n        # Analytical when possible, numerical integration otherwise\n        if self.imf_type == 'salpeter':\n            # CDF ∝ M^(-1.35)\n            return (mass**(-1.35) - self.m_min**(-1.35)) / \\\n                   (self.m_max**(-1.35) - self.m_min**(-1.35))\n    \n    def sample_rejection(self, n_stars):\n        \"\"\"Sample using rejection method.\"\"\"\n        masses = []\n        max_pdf = self.pdf(self.m_min)  # Maximum of PDF\n        \n        while len(masses) < n_stars:\n            # Propose random mass in range\n            m_proposal = self.m_min + (self.m_max - self.m_min) * np.random.random()\n            \n            # Accept with probability proportional to PDF\n            if np.random.random() < self.pdf(m_proposal) / max_pdf:\n                masses.append(m_proposal)\n        \n        return np.array(masses)\n    \n    def sample_inverse_transform(self, n_stars):\n        \"\"\"Sample using inverse CDF (when available).\"\"\"\n        if self.imf_type == 'salpeter':\n            u = np.random.random(n_stars)\n            # Invert CDF analytically\n            return (self.m_min**(-1.35) + u * (self.m_max**(-1.35) - self.m_min**(-1.35)))**(-1/1.35)\n        else:\n            # Fall back to rejection sampling\n            return self.sample_rejection(n_stars)\n    \n    def validate_distribution(self, masses, n_bins=50):\n        \"\"\"Compare sampled masses with theoretical IMF.\"\"\"\n        # Create histogram and compare with PDF\n        # Plot and calculate goodness-of-fit statistics\n        pass\n\ndef mass_to_stellar_properties(masses):\n    \"\"\"\n    Convert stellar masses to observable properties.\n    Uses Project 1 stellar physics relationships.\n    \"\"\"\n    # Mass-luminosity relation\n    luminosities = np.where(masses > 1.0, \n                           masses**3.5,  # High mass: L ∝ M^3.5\n                           masses**4.0)  # Low mass: L ∝ M^4.0\n    \n    # Mass-temperature relation (main sequence)\n    temperatures = 5778 * (masses)**0.5  # Rough approximation\n    \n    # Mass-radius relation\n    radii = np.where(masses > 1.0,\n                    masses**0.8,   # High mass\n                    masses**0.9)   # Low mass\n    \n    return {\n        'luminosities': luminosities,\n        'temperatures': temperatures,\n        'radii': radii\n    }","position":{"start":{"line":276,"column":1},"end":{"line":390,"column":1}},"key":"LDcGn3vu3z"},{"type":"heading","depth":4,"position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"children":[{"type":"text","value":"Task 2: Plummer Sphere Spatial Distribution (45 min)","position":{"start":{"line":392,"column":1},"end":{"line":392,"column":1}},"key":"hJq2Gr8j5R"}],"identifier":"task-2-plummer-sphere-spatial-distribution-45-min","label":"Task 2: Plummer Sphere Spatial Distribution (45 min)","html_id":"task-2-plummer-sphere-spatial-distribution-45-min","implicit":true,"key":"PeyBgAUHLQ"},{"type":"paragraph","position":{"start":{"line":393,"column":1},"end":{"line":393,"column":1}},"children":[{"type":"strong","position":{"start":{"line":393,"column":1},"end":{"line":393,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":393,"column":1},"end":{"line":393,"column":1}},"key":"wG3Ss9K6cg"}],"key":"er5vY2555K"},{"type":"text","value":": Sample realistic 3D stellar cluster geometry","position":{"start":{"line":393,"column":1},"end":{"line":393,"column":1}},"key":"zVcW8i2gNV"}],"key":"mwc9I1HGia"},{"type":"paragraph","position":{"start":{"line":395,"column":1},"end":{"line":395,"column":1}},"children":[{"type":"strong","position":{"start":{"line":395,"column":1},"end":{"line":395,"column":1}},"children":[{"type":"text","value":"Plummer Model Implementation","position":{"start":{"line":395,"column":1},"end":{"line":395,"column":1}},"key":"hTxctBNw5e"}],"key":"Id5xb01aha"},{"type":"text","value":":","position":{"start":{"line":395,"column":1},"end":{"line":395,"column":1}},"key":"QOkP9ZqImO"}],"key":"Ob9XSmB5K8"},{"type":"code","lang":"python","value":"class PlummerSphere:\n    \"\"\"\n    Plummer sphere model for stellar cluster spatial distribution.\n    \n    Density profile: ρ(r) = (3M/4πa³) * (1 + r²/a²)^(-5/2)\n    where a is the scale radius.\n    \"\"\"\n    \n    def __init__(self, total_mass=1000, scale_radius=1.0):\n        \"\"\"\n        Parameters:\n        -----------\n        total_mass : float\n            Total cluster mass [M☉]\n        scale_radius : float\n            Plummer scale radius [pc]\n        \"\"\"\n        self.M = total_mass\n        self.a = scale_radius\n    \n    def density(self, r):\n        \"\"\"Density at radius r.\"\"\"\n        return (3*self.M/(4*np.pi*self.a**3)) * (1 + (r/self.a)**2)**(-5/2)\n    \n    def mass_enclosed(self, r):\n        \"\"\"Mass within radius r.\"\"\"\n        return self.M * (r/self.a)**3 / (1 + (r/self.a)**2)**(3/2)\n    \n    def sample_radial_positions(self, n_stars):\n        \"\"\"\n        Sample radial distances using inverse CDF method.\n        \n        CDF: M(r)/M_total = (r/a)³ / (1 + (r/a)²)^(3/2)\n        Inverse: r = a / sqrt(u^(-2/3) - 1)\n        \"\"\"\n        u = np.random.random(n_stars)\n        # Prevent u=0 which gives infinite radius\n        u = np.clip(u, 1e-10, 1-1e-10)\n        \n        radii = self.a / np.sqrt(u**(-2/3) - 1)\n        return radii\n    \n    def sample_positions(self, n_stars):\n        \"\"\"Sample 3D positions from Plummer distribution.\"\"\"\n        radii = self.sample_radial_positions(n_stars)\n        \n        # Sample isotropic directions\n        cos_theta = 2*np.random.random(n_stars) - 1  # cos(θ) uniform in [-1,1]\n        phi = 2*np.pi*np.random.random(n_stars)      # φ uniform in [0,2π]\n        \n        sin_theta = np.sqrt(1 - cos_theta**2)\n        \n        # Convert to Cartesian coordinates\n        x = radii * sin_theta * np.cos(phi)\n        y = radii * sin_theta * np.sin(phi)\n        z = radii * cos_theta\n        \n        return np.column_stack([x, y, z])\n    \n    def calculate_virial_velocities(self, positions, masses):\n        \"\"\"\n        Calculate velocities for virial equilibrium.\n        \n        Uses virial theorem: 2T + U = 0 for bound system\n        where T = kinetic energy, U = potential energy\n        \"\"\"\n        n_stars = len(masses)\n        velocities = np.zeros_like(positions)\n        \n        # Calculate potential energy\n        U = 0\n        for i in range(n_stars):\n            for j in range(i+1, n_stars):\n                r_ij = np.linalg.norm(positions[i] - positions[j])\n                U -= G * masses[i] * masses[j] / r_ij\n        \n        # Virial theorem: total kinetic energy = -U/2\n        T_total = -U / 2\n        \n        # Distribute kinetic energy among particles\n        # Simple approach: assume isotropic velocity dispersion\n        for i in range(n_stars):\n            # Individual kinetic energy proportional to mass\n            T_i = T_total * masses[i] / np.sum(masses)\n            v_mag = np.sqrt(2 * T_i / masses[i])\n            \n            # Random direction\n            cos_theta = 2*np.random.random() - 1\n            phi = 2*np.pi*np.random.random()\n            sin_theta = np.sqrt(1 - cos_theta**2)\n            \n            velocities[i] = v_mag * np.array([\n                sin_theta * np.cos(phi),\n                sin_theta * np.sin(phi),\n                cos_theta\n            ])\n        \n        return velocities","position":{"start":{"line":396,"column":1},"end":{"line":495,"column":1}},"key":"L8z5ScvjOZ"},{"type":"heading","depth":4,"position":{"start":{"line":497,"column":1},"end":{"line":497,"column":1}},"children":[{"type":"text","value":"Task 3: Vectorized N-Body Force Calculation (40 min)","position":{"start":{"line":497,"column":1},"end":{"line":497,"column":1}},"key":"OghCsfDUZh"}],"identifier":"task-3-vectorized-n-body-force-calculation-40-min","label":"Task 3: Vectorized N-Body Force Calculation (40 min)","html_id":"task-3-vectorized-n-body-force-calculation-40-min","implicit":true,"key":"QPGX6jSXJT"},{"type":"paragraph","position":{"start":{"line":498,"column":1},"end":{"line":498,"column":1}},"children":[{"type":"strong","position":{"start":{"line":498,"column":1},"end":{"line":498,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":498,"column":1},"end":{"line":498,"column":1}},"key":"MwrqmWCBMY"}],"key":"K8hCtV2O6f"},{"type":"text","value":": Implement efficient O(N²) force computation","position":{"start":{"line":498,"column":1},"end":{"line":498,"column":1}},"key":"j23finhE6b"}],"key":"HsOMokI2tM"},{"type":"paragraph","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"children":[{"type":"strong","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"children":[{"type":"text","value":"Vectorized Implementation","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"key":"KqxthNnioD"}],"key":"Oy62o0OpRM"},{"type":"text","value":":","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"key":"VYJ2fFsw8F"}],"key":"mzis7L1IyE"},{"type":"code","lang":"python","value":"def gravitational_forces_vectorized(positions, masses, softening=0.01):\n    \"\"\"\n    Calculate gravitational forces between all particle pairs.\n    \n    Parameters:\n    -----------\n    positions : array [N, 3]\n        Particle positions\n    masses : array [N]\n        Particle masses\n    softening : float\n        Softening parameter to avoid singularities\n        \n    Returns:\n    --------\n    forces : array [N, 3]\n        Gravitational forces on each particle\n    \"\"\"\n    N = len(masses)\n    G = 4.3e-3  # pc³/M☉/Myr² (convenient units)\n    \n    # Calculate all pairwise separations using broadcasting\n    # positions[i,j] - positions[k,j] for all i,k pairs\n    r_vectors = positions[:, np.newaxis, :] - positions[np.newaxis, :, :]  # [N, N, 3]\n    \n    # Distance magnitudes with softening\n    r_magnitudes = np.sqrt(np.sum(r_vectors**2, axis=2) + softening**2)  # [N, N]\n    \n    # Avoid self-interaction\n    np.fill_diagonal(r_magnitudes, np.inf)\n    \n    # Force magnitudes: F = G*m1*m2/r²\n    mass_products = masses[:, np.newaxis] * masses[np.newaxis, :]  # [N, N]\n    force_magnitudes = G * mass_products / r_magnitudes**2  # [N, N]\n    \n    # Force directions: unit vectors\n    r_unit = r_vectors / r_magnitudes[:, :, np.newaxis]  # [N, N, 3]\n    \n    # Total forces: sum over all other particles\n    forces = np.sum(force_magnitudes[:, :, np.newaxis] * r_unit, axis=1)  # [N, 3]\n    \n    return forces\n\ndef performance_comparison():\n    \"\"\"Compare vectorized vs nested loop implementations.\"\"\"\n    import time\n    \n    # Test different cluster sizes\n    N_values = [10, 50, 100, 200, 500]\n    \n    for N in N_values:\n        # Generate test data\n        positions = np.random.randn(N, 3)\n        masses = np.random.uniform(0.1, 10, N)\n        \n        # Time vectorized version\n        start = time.time()\n        forces_vec = gravitational_forces_vectorized(positions, masses)\n        time_vec = time.time() - start\n        \n        # Time nested loop version (for comparison)\n        start = time.time()\n        forces_loop = gravitational_forces_nested_loops(positions, masses)\n        time_loop = time.time() - start\n        \n        print(f\"N={N}: Vectorized={time_vec:.4f}s, Loops={time_loop:.4f}s, \"\n              f\"Speedup={time_loop/time_vec:.1f}x\")","position":{"start":{"line":501,"column":1},"end":{"line":569,"column":1}},"key":"yliR367tGZ"},{"type":"paragraph","position":{"start":{"line":571,"column":1},"end":{"line":571,"column":1}},"children":[{"type":"strong","position":{"start":{"line":571,"column":1},"end":{"line":571,"column":1}},"children":[{"type":"text","value":"Week 2 Deliverable","position":{"start":{"line":571,"column":1},"end":{"line":571,"column":1}},"key":"h7hipopjsr"}],"key":"QhcyEww1Rl"},{"type":"text","value":": Realistic stellar cluster initialization with IMF masses and Plummer positions, plus efficient force calculations","position":{"start":{"line":571,"column":1},"end":{"line":571,"column":1}},"key":"FUSVIHYHaa"}],"key":"eRm4j2oROd"},{"type":"thematicBreak","position":{"start":{"line":573,"column":1},"end":{"line":573,"column":1}},"key":"JNsrEI49qW"},{"type":"heading","depth":2,"position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"children":[{"type":"text","value":"Week 3: Adaptive Timestepping and Cluster Evolution","position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"key":"nfKJgP4idf"}],"identifier":"week-3-adaptive-timestepping-and-cluster-evolution","label":"Week 3: Adaptive Timestepping and Cluster Evolution","html_id":"week-3-adaptive-timestepping-and-cluster-evolution","implicit":true,"key":"GbbVthmyHb"},{"type":"heading","depth":3,"position":{"start":{"line":577,"column":1},"end":{"line":577,"column":1}},"children":[{"type":"text","value":"Conceptual Introduction (25 min)","position":{"start":{"line":577,"column":1},"end":{"line":577,"column":1}},"key":"IGdE5T6uGz"}],"identifier":"conceptual-introduction-25-min","label":"Conceptual Introduction (25 min)","html_id":"conceptual-introduction-25-min-2","implicit":true,"key":"Rq6m9XkYM4"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":578,"column":1},"end":{"line":583,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":578,"column":1},"end":{"line":578,"column":1}},"children":[{"type":"text","value":"Energy conservation as accuracy criterion","position":{"start":{"line":578,"column":1},"end":{"line":578,"column":1}},"key":"SWkCM1F963"}],"key":"RFeDub6LRg"},{"type":"listItem","spread":true,"position":{"start":{"line":579,"column":1},"end":{"line":579,"column":1}},"children":[{"type":"text","value":"Adaptive timestep algorithms","position":{"start":{"line":579,"column":1},"end":{"line":579,"column":1}},"key":"YdJRTqRvjl"}],"key":"lXbcRlZz7D"},{"type":"listItem","spread":true,"position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"children":[{"type":"text","value":"Multi-mass cluster dynamics: mass segregation, two-body relaxation","position":{"start":{"line":580,"column":1},"end":{"line":580,"column":1}},"key":"rMWgAe8vUC"}],"key":"bU8xPW9I24"},{"type":"listItem","spread":true,"position":{"start":{"line":581,"column":1},"end":{"line":581,"column":1}},"children":[{"type":"text","value":"Stellar escape and cluster dissolution","position":{"start":{"line":581,"column":1},"end":{"line":581,"column":1}},"key":"Vbrw7mRipF"}],"key":"rVRNE2dzj7"},{"type":"listItem","spread":true,"position":{"start":{"line":582,"column":1},"end":{"line":583,"column":1}},"children":[{"type":"text","value":"Computational complexity and optimization strategies","position":{"start":{"line":582,"column":1},"end":{"line":582,"column":1}},"key":"EHuAZtSJYk"}],"key":"DAhtgqVy7a"}],"key":"ra1QwNLYtm"},{"type":"heading","depth":3,"position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"children":[{"type":"text","value":"Lab Session Objectives","position":{"start":{"line":584,"column":1},"end":{"line":584,"column":1}},"key":"TGPNYkEhSd"}],"identifier":"lab-session-objectives","label":"Lab Session Objectives","html_id":"lab-session-objectives-2","implicit":true,"key":"aVl9zb7fKz"},{"type":"paragraph","position":{"start":{"line":585,"column":1},"end":{"line":585,"column":1}},"children":[{"type":"text","value":"Implement energy-controlled adaptive integration and study realistic cluster evolution.","position":{"start":{"line":585,"column":1},"end":{"line":585,"column":1}},"key":"hwMofAHKZu"}],"key":"U26I0EHXZp"},{"type":"heading","depth":4,"position":{"start":{"line":587,"column":1},"end":{"line":587,"column":1}},"children":[{"type":"text","value":"Task 1: Adaptive Timestep Control (50 min)","position":{"start":{"line":587,"column":1},"end":{"line":587,"column":1}},"key":"x8HjCWNIVS"}],"identifier":"task-1-adaptive-timestep-control-50-min","label":"Task 1: Adaptive Timestep Control (50 min)","html_id":"task-1-adaptive-timestep-control-50-min","implicit":true,"key":"ghvWkwdseN"},{"type":"paragraph","position":{"start":{"line":588,"column":1},"end":{"line":588,"column":1}},"children":[{"type":"strong","position":{"start":{"line":588,"column":1},"end":{"line":588,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":588,"column":1},"end":{"line":588,"column":1}},"key":"RbUrfUkHv9"}],"key":"O2EUCp1Bu0"},{"type":"text","value":": Implement robust adaptive timestep algorithm based on energy conservation","position":{"start":{"line":588,"column":1},"end":{"line":588,"column":1}},"key":"pCmbsoQeGR"}],"key":"wQV4SWbW5d"},{"type":"paragraph","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"children":[{"type":"strong","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"children":[{"type":"text","value":"Adaptive Integration Framework","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"key":"GXJao0VPQl"}],"key":"lWhtxzzm5N"},{"type":"text","value":":","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"key":"VXQ3OZhSZp"}],"key":"ASRBI0bey5"},{"type":"code","lang":"python","value":"class AdaptiveNBodySimulator:\n    \"\"\"\n    N-body simulator with adaptive timestep control.\n    \n    Uses energy conservation to monitor accuracy and adjust timestep.\n    \"\"\"\n    \n    def __init__(self, positions, velocities, masses, initial_dt=0.01, \n                 energy_tolerance=1e-6):\n        \"\"\"\n        Parameters:\n        -----------\n        positions : array [N, 3]\n            Initial positions [pc]\n        velocities : array [N, 3] \n            Initial velocities [km/s]\n        masses : array [N]\n            Particle masses [M☉]\n        initial_dt : float\n            Initial timestep [Myr]\n        energy_tolerance : float\n            Relative energy error tolerance\n        \"\"\"\n        self.positions = np.array(positions)\n        self.velocities = np.array(velocities) \n        self.masses = np.array(masses)\n        self.dt = initial_dt\n        self.tolerance = energy_tolerance\n        \n        # Calculate initial energy\n        self.initial_energy = self.total_energy()\n        \n        # Statistics tracking\n        self.n_accepted = 0\n        self.n_rejected = 0\n        self.energy_errors = []\n        self.timesteps = []\n        \n        # History storage\n        self.time = 0.0\n        self.history = {\n            'time': [0.0],\n            'positions': [self.positions.copy()],\n            'velocities': [self.velocities.copy()],\n            'energy': [self.initial_energy],\n            'timestep': [self.dt]\n        }\n    \n    def total_energy(self):\n        \"\"\"Calculate total energy: kinetic + potential.\"\"\"\n        # Kinetic energy\n        ke = 0.5 * np.sum(self.masses * np.sum(self.velocities**2, axis=1))\n        \n        # Potential energy\n        pe = 0\n        for i in range(len(self.masses)):\n            for j in range(i+1, len(self.masses)):\n                r_ij = np.linalg.norm(self.positions[i] - self.positions[j])\n                pe -= G * self.masses[i] * self.masses[j] / r_ij\n        \n        return ke + pe\n    \n    def energy_error(self):\n        \"\"\"Calculate relative energy error from initial value.\"\"\"\n        current_energy = self.total_energy()\n        return abs((current_energy - self.initial_energy) / self.initial_energy)\n    \n    def leapfrog_step(self, dt):\n        \"\"\"Take single leapfrog integration step.\"\"\"\n        # Store initial state for potential rollback\n        old_positions = self.positions.copy()\n        old_velocities = self.velocities.copy()\n        \n        # Leapfrog integration\n        forces = gravitational_forces_vectorized(self.positions, self.masses)\n        accelerations = forces / self.masses[:, np.newaxis]\n        \n        # Kick-drift-kick\n        self.velocities += 0.5 * dt * accelerations\n        self.positions += dt * self.velocities\n        \n        forces = gravitational_forces_vectorized(self.positions, self.masses)\n        accelerations = forces / self.masses[:, np.newaxis]\n        self.velocities += 0.5 * dt * accelerations\n        \n        return old_positions, old_velocities\n    \n    def adaptive_step(self):\n        \"\"\"\n        Take adaptive timestep with error control.\n        \n        Algorithm:\n        1. Attempt step with current timestep\n        2. Check energy conservation\n        3. If error too large: reduce timestep and retry\n        4. If error acceptable: possibly increase timestep for next step\n        \"\"\"\n        max_attempts = 5\n        \n        for attempt in range(max_attempts):\n            # Store state before step\n            old_positions, old_velocities = self.leapfrog_step(self.dt)\n            \n            # Check energy conservation\n            error = self.energy_error()\n            \n            if error <= self.tolerance:\n                # Step accepted\n                self.time += self.dt\n                self.n_accepted += 1\n                \n                # Store results\n                self.history['time'].append(self.time)\n                self.history['positions'].append(self.positions.copy())\n                self.history['velocities'].append(self.velocities.copy())\n                self.history['energy'].append(self.total_energy())\n                self.history['timestep'].append(self.dt)\n                \n                self.energy_errors.append(error)\n                self.timesteps.append(self.dt)\n                \n                # Possibly increase timestep for next step\n                if error < self.tolerance / 10:\n                    self.dt = min(self.dt * 1.1, 0.1)  # Don't let it grow too large\n                \n                return True\n            \n            else:\n                # Step rejected - restore state and reduce timestep\n                self.positions = old_positions\n                self.velocities = old_velocities\n                self.dt *= 0.5\n                self.n_rejected += 1\n                \n                if attempt == max_attempts - 1:\n                    print(f\"Warning: Max attempts reached at t={self.time:.3f}\")\n                    return False\n        \n        return False\n    \n    def evolve(self, t_final, max_steps=10000):\n        \"\"\"Evolve system to final time using adaptive timesteps.\"\"\"\n        step_count = 0\n        \n        while self.time < t_final and step_count < max_steps:\n            success = self.adaptive_step()\n            if not success:\n                print(\"Simulation failed - energy errors too large\")\n                break\n            \n            step_count += 1\n            \n            # Progress reporting\n            if step_count % 100 == 0:\n                acceptance_rate = self.n_accepted / (self.n_accepted + self.n_rejected)\n                print(f\"t={self.time:.2f}, dt={self.dt:.4f}, \"\n                      f\"E_error={self.energy_errors[-1]:.2e}, \"\n                      f\"acceptance={acceptance_rate:.2f}\")\n        \n        return self.get_results()\n    \n    def get_results(self):\n        \"\"\"Return simulation results as arrays.\"\"\"\n        return {\n            'time': np.array(self.history['time']),\n            'positions': np.array(self.history['positions']),\n            'velocities': np.array(self.history['velocities']),\n            'energy': np.array(self.history['energy']),\n            'timesteps': np.array(self.history['timestep'])\n        }","position":{"start":{"line":591,"column":1},"end":{"line":762,"column":1}},"key":"YQ1uDyXxvV"},{"type":"heading","depth":4,"position":{"start":{"line":764,"column":1},"end":{"line":764,"column":1}},"children":[{"type":"text","value":"Task 2: Cluster Physics and Evolution (55 min)","position":{"start":{"line":764,"column":1},"end":{"line":764,"column":1}},"key":"S4lo9Zlrxu"}],"identifier":"task-2-cluster-physics-and-evolution-55-min","label":"Task 2: Cluster Physics and Evolution (55 min)","html_id":"task-2-cluster-physics-and-evolution-55-min","implicit":true,"key":"YsjtHIRblD"},{"type":"paragraph","position":{"start":{"line":765,"column":1},"end":{"line":765,"column":1}},"children":[{"type":"strong","position":{"start":{"line":765,"column":1},"end":{"line":765,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":765,"column":1},"end":{"line":765,"column":1}},"key":"bWHmlHUDCI"}],"key":"wTRkUK3aM3"},{"type":"text","value":": Study realistic stellar cluster evolution phenomena","position":{"start":{"line":765,"column":1},"end":{"line":765,"column":1}},"key":"r0wKPji0wL"}],"key":"kYpfrxfLAk"},{"type":"paragraph","position":{"start":{"line":767,"column":1},"end":{"line":767,"column":1}},"children":[{"type":"strong","position":{"start":{"line":767,"column":1},"end":{"line":767,"column":1}},"children":[{"type":"text","value":"Mass Segregation Analysis","position":{"start":{"line":767,"column":1},"end":{"line":767,"column":1}},"key":"Z5PFgO1UyD"}],"key":"zV5JmdTMHN"},{"type":"text","value":":","position":{"start":{"line":767,"column":1},"end":{"line":767,"column":1}},"key":"RK9yQSYiF8"}],"key":"KaGf412R7S"},{"type":"code","lang":"python","value":"def analyze_mass_segregation(positions, masses, times):\n    \"\"\"\n    Track mass segregation: massive stars sink to cluster center.\n    \n    Quantify using mass-weighted radial distribution.\n    \"\"\"\n    segregation_ratios = []\n    \n    for i, pos in enumerate(positions):\n        # Calculate distance from cluster center\n        center = np.average(pos, weights=masses, axis=0)\n        distances = np.linalg.norm(pos - center, axis=1)\n        \n        # Sort by mass\n        mass_order = np.argsort(masses)[::-1]  # Heaviest first\n        \n        # Compare radial distribution of most vs least massive stars\n        n_heavy = len(masses) // 10  # Top 10%\n        n_light = len(masses) // 10  # Bottom 10%\n        \n        r_heavy = np.mean(distances[mass_order[:n_heavy]])\n        r_light = np.mean(distances[mass_order[-n_light:]])\n        \n        segregation_ratios.append(r_light / r_heavy)\n    \n    return segregation_ratios\n\ndef calculate_virial_ratio(positions, velocities, masses):\n    \"\"\"\n    Calculate virial ratio: 2T/|U|\n    \n    For bound system in equilibrium, should equal 1.\n    \"\"\"\n    # Kinetic energy\n    T = 0.5 * np.sum(masses * np.sum(velocities**2, axis=1))\n    \n    # Potential energy\n    U = 0\n    for i in range(len(masses)):\n        for j in range(i+1, len(masses)):\n            r_ij = np.linalg.norm(positions[i] - positions[j])\n            U -= G * masses[i] * masses[j] / r_ij\n    \n    return 2 * T / abs(U)\n\ndef identify_escaping_stars(positions, velocities, masses, escape_criterion=2.0):\n    \"\"\"\n    Identify stars with velocities exceeding escape velocity.\n    \n    v_escape = sqrt(2 * |U| / m) at each star's location\n    \"\"\"\n    escaping_stars = []\n    \n    for i in range(len(masses)):\n        # Calculate potential at star i due to all other stars\n        phi_i = 0\n        for j in range(len(masses)):\n            if i != j:\n                r_ij = np.linalg.norm(positions[i] - positions[j])\n                phi_i -= G * masses[j] / r_ij\n        \n        # Escape velocity at this location\n        v_escape = np.sqrt(-2 * phi_i)\n        v_star = np.linalg.norm(velocities[i])\n        \n        if v_star > escape_criterion * v_escape:\n            escaping_stars.append(i)\n    \n    return escaping_stars","position":{"start":{"line":768,"column":1},"end":{"line":838,"column":1}},"key":"zeE07mQyjI"},{"type":"paragraph","position":{"start":{"line":840,"column":1},"end":{"line":840,"column":1}},"children":[{"type":"strong","position":{"start":{"line":840,"column":1},"end":{"line":840,"column":1}},"children":[{"type":"text","value":"Cluster Snapshot Generation for Project 3","position":{"start":{"line":840,"column":1},"end":{"line":840,"column":1}},"key":"HMGxn1cO2G"}],"key":"iEI1uMM59D"},{"type":"text","value":":","position":{"start":{"line":840,"column":1},"end":{"line":840,"column":1}},"key":"McqpVJUy4x"}],"key":"OT3RlmZTDP"},{"type":"code","lang":"python","value":"def generate_cluster_snapshots(cluster_mass=1000, n_stars=200, \n                              evolution_times=[0, 5, 20, 50]):\n    \"\"\"\n    Generate stellar cluster at multiple evolutionary phases.\n    These snapshots will be used in Project 3 for radiation calculations.\n    \n    Parameters:\n    -----------\n    cluster_mass : float\n        Total cluster mass [M☉]\n    n_stars : int\n        Number of stars in cluster\n    evolution_times : list\n        Times to save snapshots [Myr]\n        \n    Returns:\n    --------\n    snapshots : list of dict\n        Each dict contains stellar properties at one time\n    \"\"\"\n    # Initialize cluster\n    imf = StellarIMF(imf_type='kroupa')\n    masses = imf.sample_inverse_transform(n_stars)\n    masses = masses * (cluster_mass / np.sum(masses))  # Normalize total mass\n    \n    plummer = PlummerSphere(total_mass=cluster_mass, scale_radius=1.0)\n    positions = plummer.sample_positions(n_stars)\n    velocities = plummer.calculate_virial_velocities(positions, masses)\n    \n    # Calculate stellar properties for radiation (from Project 1)\n    stellar_props = mass_to_stellar_properties(masses)\n    \n    # Set up adaptive simulator\n    simulator = AdaptiveNBodySimulator(\n        positions, velocities, masses,\n        initial_dt=0.01, energy_tolerance=1e-6\n    )\n    \n    snapshots = []\n    \n    for t_target in evolution_times:\n        if t_target == 0:\n            # Initial conditions\n            snapshot = create_snapshot(\n                time=0, \n                positions=simulator.positions,\n                velocities=simulator.velocities,\n                masses=masses,\n                stellar_props=stellar_props\n            )\n        else:\n            # Evolve to target time\n            results = simulator.evolve(t_target)\n            \n            # Extract final state\n            final_positions = results['positions'][-1]\n            final_velocities = results['velocities'][-1]\n            \n            snapshot = create_snapshot(\n                time=t_target,\n                positions=final_positions,\n                velocities=final_velocities,\n                masses=masses,\n                stellar_props=stellar_props\n            )\n        \n        snapshots.append(snapshot)\n        print(f\"Snapshot created at t = {t_target} Myr\")\n    \n    return snapshots\n\ndef create_snapshot(time, positions, velocities, masses, stellar_props):\n    \"\"\"Create comprehensive cluster snapshot.\"\"\"\n    # Calculate cluster center and properties\n    center = np.average(positions, weights=masses, axis=0)\n    centered_positions = positions - center\n    \n    # Structural parameters\n    distances = np.linalg.norm(centered_positions, axis=1)\n    half_mass_radius = np.median(distances)\n    \n    # Core radius (radius containing 10% of mass)\n    mass_order = np.argsort(distances)\n    core_mass_index = int(0.1 * len(masses))\n    core_radius = distances[mass_order[core_mass_index]]\n    \n    snapshot = {\n        'time': time,\n        'n_stars': len(masses),\n        'total_mass': np.sum(masses),\n        \n        # Stellar properties\n        'positions': centered_positions,  # Centered on cluster\n        'velocities': velocities,\n        'masses': masses,\n        'luminosities': stellar_props['luminosities'],\n        'temperatures': stellar_props['temperatures'],\n        'radii': stellar_props['radii'],\n        \n        # Cluster structure\n        'center': center,\n        'half_mass_radius': half_mass_radius,\n        'core_radius': core_radius,\n        'virial_ratio': calculate_virial_ratio(positions, velocities, masses),\n        \n        # Evolution diagnostics\n        'mass_segregation_ratio': analyze_mass_segregation([positions], masses, [time])[0],\n        'escaping_stars': identify_escaping_stars(positions, velocities, masses)\n    }\n    \n    return snapshot\n\ndef save_snapshots_for_project3(snapshots, filename='cluster_evolution.pkl'):\n    \"\"\"Save snapshots in format suitable for Project 3.\"\"\"\n    import pickle\n    \n    with open(filename, 'wb') as f:\n        pickle.dump(snapshots, f)\n    \n    print(f\"Saved {len(snapshots)} cluster snapshots to {filename}\")\n    print(\"These will be used as radiation sources in Project 3\")","position":{"start":{"line":841,"column":1},"end":{"line":963,"column":1}},"key":"czx1u8UN5S"},{"type":"heading","depth":4,"position":{"start":{"line":965,"column":1},"end":{"line":965,"column":1}},"children":[{"type":"text","value":"Task 3: Performance Analysis and Optimization (30 min)","position":{"start":{"line":965,"column":1},"end":{"line":965,"column":1}},"key":"stGnta292w"}],"identifier":"task-3-performance-analysis-and-optimization-30-min","label":"Task 3: Performance Analysis and Optimization (30 min)","html_id":"task-3-performance-analysis-and-optimization-30-min","implicit":true,"key":"Y8RcWrq3oA"},{"type":"paragraph","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"strong","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"children":[{"type":"text","value":"Goal","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"hu4LsNMT8H"}],"key":"Bko0oZWffX"},{"type":"text","value":": Analyze computational efficiency and identify optimization opportunities","position":{"start":{"line":966,"column":1},"end":{"line":966,"column":1}},"key":"a4KTponlg7"}],"key":"XTRK4tW8Cj"},{"type":"paragraph","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"strong","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"children":[{"type":"text","value":"Performance Studies","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"FskhhgOMZJ"}],"key":"HXGJZzmhbm"},{"type":"text","value":":","position":{"start":{"line":968,"column":1},"end":{"line":968,"column":1}},"key":"JHAUfk2Mhq"}],"key":"ezLmOau3k7"},{"type":"code","lang":"python","value":"def scaling_analysis():\n    \"\"\"Study how computational cost scales with cluster size.\"\"\"\n    import time\n    \n    N_values = [50, 100, 200, 400]\n    times_force = []\n    times_integration = []\n    \n    for N in N_values:\n        # Generate test cluster\n        masses = np.random.uniform(0.1, 10, N)\n        positions = np.random.randn(N, 3)\n        velocities = np.random.randn(N, 3)\n        \n        # Time force calculation\n        start = time.time()\n        for _ in range(10):  # Multiple iterations for averaging\n            forces = gravitational_forces_vectorized(positions, masses)\n        times_force.append((time.time() - start) / 10)\n        \n        # Time full integration step\n        simulator = AdaptiveNBodySimulator(positions, velocities, masses)\n        start = time.time()\n        for _ in range(10):\n            simulator.adaptive_step()\n        times_integration.append((time.time() - start) / 10)\n    \n    # Analyze scaling: should be O(N²) for force calculation\n    print(\"Scaling Analysis:\")\n    for i, N in enumerate(N_values):\n        print(f\"N={N}: Force={times_force[i]:.4f}s, Integration={times_integration[i]:.4f}s\")\n\ndef memory_optimization_analysis():\n    \"\"\"Analyze memory usage and suggest optimizations.\"\"\"\n    # Profile memory usage during simulation\n    # Identify opportunities for optimization\n    pass","position":{"start":{"line":969,"column":1},"end":{"line":1007,"column":1}},"key":"NSPOrOBw9Z"},{"type":"paragraph","position":{"start":{"line":1009,"column":1},"end":{"line":1009,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1009,"column":1},"end":{"line":1009,"column":1}},"children":[{"type":"text","value":"Week 3 Deliverable","position":{"start":{"line":1009,"column":1},"end":{"line":1009,"column":1}},"key":"MQQyyDIKaN"}],"key":"peexiR7DMd"},{"type":"text","value":": Complete adaptive N-body simulator with realistic cluster evolution and snapshots for Project 3","position":{"start":{"line":1009,"column":1},"end":{"line":1009,"column":1}},"key":"cr84r8dswQ"}],"key":"azQ3BXkv14"},{"type":"thematicBreak","position":{"start":{"line":1011,"column":1},"end":{"line":1011,"column":1}},"key":"CQlj3pNr8G"},{"type":"heading","depth":2,"position":{"start":{"line":1013,"column":1},"end":{"line":1013,"column":1}},"children":[{"type":"text","value":"Assessment and Grading","position":{"start":{"line":1013,"column":1},"end":{"line":1013,"column":1}},"key":"MvrbdVZ8s6"}],"identifier":"assessment-and-grading","label":"Assessment and Grading","html_id":"assessment-and-grading","implicit":true,"key":"oTft7Mcahe"},{"type":"heading","depth":3,"position":{"start":{"line":1015,"column":1},"end":{"line":1015,"column":1}},"children":[{"type":"text","value":"Grading Breakdown","position":{"start":{"line":1015,"column":1},"end":{"line":1015,"column":1}},"key":"sqmctK1suJ"}],"identifier":"grading-breakdown","label":"Grading Breakdown","html_id":"grading-breakdown","implicit":true,"key":"oy9bgQ6Xcp"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1016,"column":1},"end":{"line":1019,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"children":[{"type":"text","value":"Week 1","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"key":"NMBDRmKJoC"}],"key":"m8gUl4vpRK"},{"type":"text","value":": ODE solvers and validation (30%)","position":{"start":{"line":1016,"column":1},"end":{"line":1016,"column":1}},"key":"s1F1wTX9QC"}],"key":"Q9dfBbJH3a"},{"type":"listItem","spread":true,"position":{"start":{"line":1017,"column":1},"end":{"line":1017,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1017,"column":1},"end":{"line":1017,"column":1}},"children":[{"type":"text","value":"Week 2","position":{"start":{"line":1017,"column":1},"end":{"line":1017,"column":1}},"key":"qWjQyLYRha"}],"key":"X7oodikASc"},{"type":"text","value":": Statistical sampling and vectorization (35%)","position":{"start":{"line":1017,"column":1},"end":{"line":1017,"column":1}},"key":"K8QV9No8JS"}],"key":"L46elaLAaO"},{"type":"listItem","spread":true,"position":{"start":{"line":1018,"column":1},"end":{"line":1019,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1018,"column":1},"end":{"line":1018,"column":1}},"children":[{"type":"text","value":"Week 3","position":{"start":{"line":1018,"column":1},"end":{"line":1018,"column":1}},"key":"bqeLYAieDt"}],"key":"J0Zt7iYUpz"},{"type":"text","value":": Adaptive methods and cluster evolution (35%)","position":{"start":{"line":1018,"column":1},"end":{"line":1018,"column":1}},"key":"lFvBdG0jS5"}],"key":"s1e4Ntsu6r"}],"key":"k3cctVoU3C"},{"type":"heading","depth":3,"position":{"start":{"line":1020,"column":1},"end":{"line":1020,"column":1}},"children":[{"type":"text","value":"Evaluation Criteria","position":{"start":{"line":1020,"column":1},"end":{"line":1020,"column":1}},"key":"SisS3F4I0g"}],"identifier":"evaluation-criteria","label":"Evaluation Criteria","html_id":"evaluation-criteria","implicit":true,"key":"LbaJZp8TzD"},{"type":"heading","depth":4,"position":{"start":{"line":1022,"column":1},"end":{"line":1022,"column":1}},"children":[{"type":"text","value":"Technical Implementation (60%)","position":{"start":{"line":1022,"column":1},"end":{"line":1022,"column":1}},"key":"m0HXVDWwb3"}],"identifier":"technical-implementation-60","label":"Technical Implementation (60%)","html_id":"technical-implementation-60","implicit":true,"key":"sGwPvBobun"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1023,"column":1},"end":{"line":1027,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1023,"column":1},"end":{"line":1023,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1023,"column":1},"end":{"line":1023,"column":1}},"children":[{"type":"text","value":"Algorithm Correctness","position":{"start":{"line":1023,"column":1},"end":{"line":1023,"column":1}},"key":"JhPXDWNLh0"}],"key":"Z5MdGx1JrF"},{"type":"text","value":": Do integrators conserve energy appropriately?","position":{"start":{"line":1023,"column":1},"end":{"line":1023,"column":1}},"key":"rOfi9nC0ux"}],"key":"fpikhFKX4Z"},{"type":"listItem","spread":true,"position":{"start":{"line":1024,"column":1},"end":{"line":1024,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1024,"column":1},"end":{"line":1024,"column":1}},"children":[{"type":"text","value":"Sampling Accuracy","position":{"start":{"line":1024,"column":1},"end":{"line":1024,"column":1}},"key":"OtqO4onCVl"}],"key":"oEKf1WaplL"},{"type":"text","value":": Do distributions match theoretical expectations?","position":{"start":{"line":1024,"column":1},"end":{"line":1024,"column":1}},"key":"gXMcME9zJn"}],"key":"fAGFn33dSD"},{"type":"listItem","spread":true,"position":{"start":{"line":1025,"column":1},"end":{"line":1025,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1025,"column":1},"end":{"line":1025,"column":1}},"children":[{"type":"text","value":"Vectorization Efficiency","position":{"start":{"line":1025,"column":1},"end":{"line":1025,"column":1}},"key":"fNju7EUeJB"}],"key":"zE8Zz79bvh"},{"type":"text","value":": Significant speedup over naive implementations","position":{"start":{"line":1025,"column":1},"end":{"line":1025,"column":1}},"key":"gJqltsg4Gb"}],"key":"Lmm623dtmK"},{"type":"listItem","spread":true,"position":{"start":{"line":1026,"column":1},"end":{"line":1027,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1026,"column":1},"end":{"line":1026,"column":1}},"children":[{"type":"text","value":"Adaptive Control","position":{"start":{"line":1026,"column":1},"end":{"line":1026,"column":1}},"key":"yQlD0ABlOY"}],"key":"w5fJtkiyRF"},{"type":"text","value":": Proper timestep adjustment based on energy errors","position":{"start":{"line":1026,"column":1},"end":{"line":1026,"column":1}},"key":"OfGS5pndSQ"}],"key":"EZ3gyjNwiB"}],"key":"crMtftBe6I"},{"type":"heading","depth":4,"position":{"start":{"line":1028,"column":1},"end":{"line":1028,"column":1}},"children":[{"type":"text","value":"Scientific Understanding (25%)","position":{"start":{"line":1028,"column":1},"end":{"line":1028,"column":1}},"key":"amlKQt40pH"}],"identifier":"scientific-understanding-25","label":"Scientific Understanding (25%)","html_id":"scientific-understanding-25","implicit":true,"key":"OftONObcoz"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1029,"column":1},"end":{"line":1032,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1029,"column":1},"end":{"line":1029,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1029,"column":1},"end":{"line":1029,"column":1}},"children":[{"type":"text","value":"Physics Validation","position":{"start":{"line":1029,"column":1},"end":{"line":1029,"column":1}},"key":"UjE5sUwaVT"}],"key":"b0x9wsvYiN"},{"type":"text","value":": Energy conservation, virial equilibrium, orbital mechanics","position":{"start":{"line":1029,"column":1},"end":{"line":1029,"column":1}},"key":"MZ36mDp8H0"}],"key":"pIZrf8tCOZ"},{"type":"listItem","spread":true,"position":{"start":{"line":1030,"column":1},"end":{"line":1030,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1030,"column":1},"end":{"line":1030,"column":1}},"children":[{"type":"text","value":"Statistical Analysis","position":{"start":{"line":1030,"column":1},"end":{"line":1030,"column":1}},"key":"XdgEUQKuzq"}],"key":"Zlj9t3UvhJ"},{"type":"text","value":": IMF and spatial distribution validation","position":{"start":{"line":1030,"column":1},"end":{"line":1030,"column":1}},"key":"m4fp7GGkDP"}],"key":"a5ndrJxU0x"},{"type":"listItem","spread":true,"position":{"start":{"line":1031,"column":1},"end":{"line":1032,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1031,"column":1},"end":{"line":1031,"column":1}},"children":[{"type":"text","value":"Cluster Evolution","position":{"start":{"line":1031,"column":1},"end":{"line":1031,"column":1}},"key":"O0MjWj2F0u"}],"key":"Cjbe1xesG6"},{"type":"text","value":": Understanding of mass segregation and stellar escape","position":{"start":{"line":1031,"column":1},"end":{"line":1031,"column":1}},"key":"l6kT3SCIaJ"}],"key":"fdfRBgYQtv"}],"key":"DnkoYrx1Ij"},{"type":"heading","depth":4,"position":{"start":{"line":1033,"column":1},"end":{"line":1033,"column":1}},"children":[{"type":"text","value":"Code Quality and Performance (15%)","position":{"start":{"line":1033,"column":1},"end":{"line":1033,"column":1}},"key":"qsTFVfhGvf"}],"identifier":"code-quality-and-performance-15","label":"Code Quality and Performance (15%)","html_id":"code-quality-and-performance-15","implicit":true,"key":"wrgnx0qy0S"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1034,"column":1},"end":{"line":1038,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1034,"column":1},"end":{"line":1034,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1034,"column":1},"end":{"line":1034,"column":1}},"children":[{"type":"text","value":"Documentation","position":{"start":{"line":1034,"column":1},"end":{"line":1034,"column":1}},"key":"W3Hb7p3ugv"}],"key":"xpM8TZvUwX"},{"type":"text","value":": Clear docstrings and code organization","position":{"start":{"line":1034,"column":1},"end":{"line":1034,"column":1}},"key":"io3PvcRkYZ"}],"key":"vBscVm0EXb"},{"type":"listItem","spread":true,"position":{"start":{"line":1035,"column":1},"end":{"line":1035,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1035,"column":1},"end":{"line":1035,"column":1}},"children":[{"type":"text","value":"Testing","position":{"start":{"line":1035,"column":1},"end":{"line":1035,"column":1}},"key":"VlcUnQJnYR"}],"key":"Q8dzf4jfOM"},{"type":"text","value":": Validation against analytical solutions","position":{"start":{"line":1035,"column":1},"end":{"line":1035,"column":1}},"key":"b5BFXZYG7T"}],"key":"eHfFb7CbrM"},{"type":"listItem","spread":true,"position":{"start":{"line":1036,"column":1},"end":{"line":1036,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1036,"column":1},"end":{"line":1036,"column":1}},"children":[{"type":"text","value":"Optimization","position":{"start":{"line":1036,"column":1},"end":{"line":1036,"column":1}},"key":"w1yZDcgOdN"}],"key":"SFPujPlxXM"},{"type":"text","value":": Efficient use of NumPy vectorization","position":{"start":{"line":1036,"column":1},"end":{"line":1036,"column":1}},"key":"EDP5lwhOgD"}],"key":"wteA1hVLoj"},{"type":"listItem","spread":true,"position":{"start":{"line":1037,"column":1},"end":{"line":1038,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1037,"column":1},"end":{"line":1037,"column":1}},"children":[{"type":"text","value":"Reproducibility","position":{"start":{"line":1037,"column":1},"end":{"line":1037,"column":1}},"key":"WVU5rzWWyY"}],"key":"kEpilvxQnZ"},{"type":"text","value":": Proper random seed handling","position":{"start":{"line":1037,"column":1},"end":{"line":1037,"column":1}},"key":"AKJjyd9eE9"}],"key":"QSVvM5qZtd"}],"key":"Lx0O9Y7EGr"},{"type":"heading","depth":3,"position":{"start":{"line":1039,"column":1},"end":{"line":1039,"column":1}},"children":[{"type":"text","value":"Connection to Project 3","position":{"start":{"line":1039,"column":1},"end":{"line":1039,"column":1}},"key":"NXASOY7S1N"}],"identifier":"connection-to-project-3","label":"Connection to Project 3","html_id":"connection-to-project-3","implicit":true,"key":"WNgeJWN7TG"},{"type":"paragraph","position":{"start":{"line":1041,"column":1},"end":{"line":1041,"column":1}},"children":[{"type":"text","value":"The stellar cluster snapshots generated in this project become the radiation sources for Project 3:","position":{"start":{"line":1041,"column":1},"end":{"line":1041,"column":1}},"key":"V28UOx8NcH"}],"key":"z3BDXqWRPr"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1042,"column":1},"end":{"line":1046,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1042,"column":1},"end":{"line":1042,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1042,"column":1},"end":{"line":1042,"column":1}},"children":[{"type":"text","value":"Stellar positions","position":{"start":{"line":1042,"column":1},"end":{"line":1042,"column":1}},"key":"y3A0f6V6gT"}],"key":"iqfJdkKpXB"},{"type":"text","value":": Spatial distribution for radiation field calculations","position":{"start":{"line":1042,"column":1},"end":{"line":1042,"column":1}},"key":"mSu184Aeyt"}],"key":"oFmhMkDFsU"},{"type":"listItem","spread":true,"position":{"start":{"line":1043,"column":1},"end":{"line":1043,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1043,"column":1},"end":{"line":1043,"column":1}},"children":[{"type":"text","value":"Stellar masses and luminosities","position":{"start":{"line":1043,"column":1},"end":{"line":1043,"column":1}},"key":"wnk2W74QDw"}],"key":"fqQEBdJpmx"},{"type":"text","value":": Heating source strengths","position":{"start":{"line":1043,"column":1},"end":{"line":1043,"column":1}},"key":"FcIgO4TX33"}],"key":"vRtis1Byvd"},{"type":"listItem","spread":true,"position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"children":[{"type":"text","value":"Cluster evolution","position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"key":"s4HXyHohy2"}],"key":"wmh14M2OtG"},{"type":"text","value":": How radiation field changes with time","position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"key":"N4skhOcwlu"}],"key":"LCYHMPYVZo"},{"type":"listItem","spread":true,"position":{"start":{"line":1045,"column":1},"end":{"line":1046,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1045,"column":1},"end":{"line":1045,"column":1}},"children":[{"type":"text","value":"Realistic populations","position":{"start":{"line":1045,"column":1},"end":{"line":1045,"column":1}},"key":"YPkHWlQRUx"}],"key":"eC8TijlQeh"},{"type":"text","value":": IMF-sampled masses give proper luminosity functions","position":{"start":{"line":1045,"column":1},"end":{"line":1045,"column":1}},"key":"rqSJeYXWGX"}],"key":"MClKQeTCug"}],"key":"WxeX25Nknj"},{"type":"heading","depth":3,"position":{"start":{"line":1047,"column":1},"end":{"line":1047,"column":1}},"children":[{"type":"text","value":"Deliverables","position":{"start":{"line":1047,"column":1},"end":{"line":1047,"column":1}},"key":"p2JhG1MIDQ"}],"identifier":"deliverables","label":"Deliverables","html_id":"deliverables","implicit":true,"key":"ZvmEN89nko"},{"type":"heading","depth":4,"position":{"start":{"line":1049,"column":1},"end":{"line":1049,"column":1}},"children":[{"type":"text","value":"Final Submission","position":{"start":{"line":1049,"column":1},"end":{"line":1049,"column":1}},"key":"v3TCsVCBv1"}],"identifier":"final-submission","label":"Final Submission","html_id":"final-submission","implicit":true,"key":"ujQBTa4gLT"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":1050,"column":1},"end":{"line":1064,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1050,"column":1},"end":{"line":1055,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1050,"column":1},"end":{"line":1050,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1050,"column":1},"end":{"line":1050,"column":1}},"children":[{"type":"text","value":"N-Body Simulation Library","position":{"start":{"line":1050,"column":1},"end":{"line":1050,"column":1}},"key":"ttbtzTvkjm"}],"key":"lbbqrHHc6B"},{"type":"text","value":":","position":{"start":{"line":1050,"column":1},"end":{"line":1050,"column":1}},"key":"nuAyaUh0TX"}],"key":"kNT1g5Vxh4"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1051,"column":1},"end":{"line":1055,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"children":[{"type":"inlineCode","value":"ode_solvers.py","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"VwIYA6mS9D"},{"type":"text","value":": Integration method implementations","position":{"start":{"line":1051,"column":1},"end":{"line":1051,"column":1}},"key":"cZ997zqbjq"}],"key":"oI0JRHOxSH"},{"type":"listItem","spread":true,"position":{"start":{"line":1052,"column":1},"end":{"line":1052,"column":1}},"children":[{"type":"inlineCode","value":"stellar_sampling.py","position":{"start":{"line":1052,"column":1},"end":{"line":1052,"column":1}},"key":"rug13y5KSw"},{"type":"text","value":": IMF and Plummer sphere classes","position":{"start":{"line":1052,"column":1},"end":{"line":1052,"column":1}},"key":"FRlKVU0Kg5"}],"key":"nuihqZXz7I"},{"type":"listItem","spread":true,"position":{"start":{"line":1053,"column":1},"end":{"line":1053,"column":1}},"children":[{"type":"inlineCode","value":"nbody_simulator.py","position":{"start":{"line":1053,"column":1},"end":{"line":1053,"column":1}},"key":"Q7K07z5VFq"},{"type":"text","value":": Complete adaptive N-body framework","position":{"start":{"line":1053,"column":1},"end":{"line":1053,"column":1}},"key":"ljZdTQYsna"}],"key":"xI3DikpcH8"},{"type":"listItem","spread":true,"position":{"start":{"line":1054,"column":1},"end":{"line":1055,"column":1}},"children":[{"type":"inlineCode","value":"cluster_analysis.py","position":{"start":{"line":1054,"column":1},"end":{"line":1054,"column":1}},"key":"CPDQzK4MlG"},{"type":"text","value":": Evolution analysis tools","position":{"start":{"line":1054,"column":1},"end":{"line":1054,"column":1}},"key":"a5DWqenWhJ"}],"key":"QFUinow3UQ"}],"key":"Ddd0eKueqL"}],"key":"d9HjERPvCl"},{"type":"listItem","spread":true,"position":{"start":{"line":1056,"column":1},"end":{"line":1060,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1056,"column":1},"end":{"line":1056,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1056,"column":1},"end":{"line":1056,"column":1}},"children":[{"type":"text","value":"Validation Notebooks","position":{"start":{"line":1056,"column":1},"end":{"line":1056,"column":1}},"key":"Z4kEGiSCBm"}],"key":"q0FrvXIVEt"},{"type":"text","value":":","position":{"start":{"line":1056,"column":1},"end":{"line":1056,"column":1}},"key":"ulEhm4vu74"}],"key":"O0TF3avDhT"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1057,"column":1},"end":{"line":1060,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1057,"column":1},"end":{"line":1057,"column":1}},"children":[{"type":"inlineCode","value":"orbital_mechanics_validation.ipynb","position":{"start":{"line":1057,"column":1},"end":{"line":1057,"column":1}},"key":"JouJYLQdw9"},{"type":"text","value":": Two-body problem tests","position":{"start":{"line":1057,"column":1},"end":{"line":1057,"column":1}},"key":"OVP2APt3bS"}],"key":"YVvqaIfBs9"},{"type":"listItem","spread":true,"position":{"start":{"line":1058,"column":1},"end":{"line":1058,"column":1}},"children":[{"type":"inlineCode","value":"sampling_validation.ipynb","position":{"start":{"line":1058,"column":1},"end":{"line":1058,"column":1}},"key":"FJoSveDwEN"},{"type":"text","value":": IMF and spatial distribution verification","position":{"start":{"line":1058,"column":1},"end":{"line":1058,"column":1}},"key":"CmHdXWzyyP"}],"key":"jl4D0JGd8u"},{"type":"listItem","spread":true,"position":{"start":{"line":1059,"column":1},"end":{"line":1060,"column":1}},"children":[{"type":"inlineCode","value":"cluster_evolution_analysis.ipynb","position":{"start":{"line":1059,"column":1},"end":{"line":1059,"column":1}},"key":"akMNmvpD4r"},{"type":"text","value":": Mass segregation and dynamics","position":{"start":{"line":1059,"column":1},"end":{"line":1059,"column":1}},"key":"JUypbHAIHV"}],"key":"fjODZgvOJz"}],"key":"mwMWwzUWNm"}],"key":"uhN4PeXcEp"},{"type":"listItem","spread":true,"position":{"start":{"line":1061,"column":1},"end":{"line":1064,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1061,"column":1},"end":{"line":1061,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1061,"column":1},"end":{"line":1061,"column":1}},"children":[{"type":"text","value":"Project 3 Interface","position":{"start":{"line":1061,"column":1},"end":{"line":1061,"column":1}},"key":"sGqHmsQ41H"}],"key":"EsXMzmVP1W"},{"type":"text","value":":","position":{"start":{"line":1061,"column":1},"end":{"line":1061,"column":1}},"key":"xHP2INxsVv"}],"key":"iyRyA3yPdR"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1062,"column":1},"end":{"line":1064,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1062,"column":1},"end":{"line":1062,"column":1}},"children":[{"type":"inlineCode","value":"cluster_snapshots.pkl","position":{"start":{"line":1062,"column":1},"end":{"line":1062,"column":1}},"key":"Tyt8xcWV0S"},{"type":"text","value":": Saved stellar cluster evolution data","position":{"start":{"line":1062,"column":1},"end":{"line":1062,"column":1}},"key":"mgOf3YsMbX"}],"key":"HVYD2XK6iO"},{"type":"listItem","spread":true,"position":{"start":{"line":1063,"column":1},"end":{"line":1064,"column":1}},"children":[{"type":"inlineCode","value":"snapshot_format.md","position":{"start":{"line":1063,"column":1},"end":{"line":1063,"column":1}},"key":"L67fFJ1xbr"},{"type":"text","value":": Documentation of data structure","position":{"start":{"line":1063,"column":1},"end":{"line":1063,"column":1}},"key":"qwU0OK2oQs"}],"key":"eaBgpoNdgx"}],"key":"AhM3WVIUsj"}],"key":"Ml6UHQUpnD"}],"key":"wKJhlZcitr"},{"type":"paragraph","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"children":[{"type":"text","value":"This project establishes the realistic stellar systems needed for sophisticated radiation calculations while teaching essential computational physics skills: numerical integration, statistical sampling, vectorization, and adaptive methods.","position":{"start":{"line":1065,"column":1},"end":{"line":1065,"column":1}},"key":"KhnFR8b3ON"}],"key":"c3YfkWPoHN"}],"key":"Kkoevg4vhU"}],"key":"OjDJgAL1rg"},"references":{"cite":{"order":[],"data":{}}}}