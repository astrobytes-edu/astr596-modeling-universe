{"version":2,"kind":"Article","sha256":"800b06f2875f7f498f1924f39b65dbb16ea7f484a3611c2ae1c78def53b542e6","slug":"python-control-flow-orig","location":"/03-scientific-computing-with-python/01-python-fundamentals/03-python-control-flow-ORIG.md","dependencies":[],"frontmatter":{"title":"Chapter 3: Control Flow & Logic","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/01-python-fundamentals/03-python-control-flow-ORIG.md","exports":[{"format":"md","filename":"03-python-control-flow-ORIG.md","url":"/03-python-control-fl-ccb3da847ff31fa635a25359902ce20d.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aMfHHen8vl"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"A21U1JF9NO"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"n0g0SSiyLD"}],"key":"RfCRKbaCBq"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Design algorithms using structured pseudocode before writing any Python code","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"qNKHVGe8IC"}],"key":"laCVod9nnR"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Implement conditional statements (if/elif/else) with proper handling of edge cases","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ZKe4O8Qnbf"}],"key":"ax05tvZ9Rd"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Choose appropriate loop structures (for vs while) based on problem requirements","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"LSYEsi0D5j"}],"key":"JXJr77kv08"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Handle floating-point comparisons safely in conditional statements","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"PO6FUlUOmO"}],"key":"BfhazhndMw"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Debug logic errors systematically using IPython’s debugger and logging","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Aa2S6oMNXv"}],"key":"VCgdxItNlr"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Write efficient list comprehensions while knowing when to avoid them","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"U0d35a7gnl"}],"key":"SrHe8x0Z8T"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Recognize and apply universal algorithmic patterns across different problems","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"woFhZEiata"}],"key":"mX6lnbpHE2"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Build defensive code that validates assumptions and catches errors early","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"Amlp0E5zc6"}],"key":"TbQx3sEJF4"}],"key":"XhYq7DaCk1"},{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Di7Qjeyiqh"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check","implicit":true,"key":"LR2wfFw50X"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ayqceUcR2J"}],"key":"czc8dAoicS"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"✓ Use IPython effectively with magic commands like %timeit (Chapter 1)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"lBUjhUDHbM"}],"key":"HUFJk1rQLu"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"✓ Understand floating-point precision and comparison issues (Chapter 2)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"kh2nTlJm6C"}],"key":"NjlUC4mRDD"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"✓ Write and run Python scripts from the terminal (Chapter 1)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"aGsI34WddR"}],"key":"icEW99opmx"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"✓ Use f-strings for formatted output (Chapter 2)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"lf01SACBnR"}],"key":"JU6k6LHFsF"}],"key":"da6405FEey"},{"type":"heading","depth":2,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"p2FRg4IWds"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview","implicit":true,"key":"pAw7UBeAON"},{"type":"paragraph","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Programming is fundamentally about teaching computers to make decisions and repeat tasks. When you write an if-statement or a loop, you’re translating human logic into instructions a machine can follow. But here’s the critical insight that separates computational thinkers from mere coders: the logic must be designed before it’s implemented.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"P9LSdvGl62"}],"key":"fRVycjHLTD"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"This chapter transforms you from someone who writes code to someone who designs algorithms. We’ll start with the lost art of pseudocode — not as a bureaucratic exercise, but as the difference between code that works by accident and code that works by design. You’ll learn to recognize universal patterns that appear across all of computational physics: iteration, accumulation, filtering, mapping, and reduction. These patterns will appear in every project you build, from N-body simulations to neural networks.","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"L3lmYx4fVY"}],"key":"SAMS3MvYl3"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"The control flow structures we explore here are where your numerical calculations from Chapter 2 become dynamic algorithms. Every convergence test, every adaptive timestep, every Monte Carlo acceptance criterion depends on mastering these concepts deeply, not just syntactically.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"FJseAKeUBp"}],"key":"X59gpslajr"},{"type":"heading","depth":2,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"3.1 Algorithmic Thinking: The Lost Art of Pseudocode","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"VmfVHTm3Bj"}],"identifier":"id-3-1-algorithmic-thinking-the-lost-art-of-pseudocode","label":"3.1 Algorithmic Thinking: The Lost Art of Pseudocode","html_id":"id-3-1-algorithmic-thinking-the-lost-art-of-pseudocode","implicit":true,"key":"yDE7X514d6"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Most students jump straight from problem to code, then wonder why they spend hours debugging. Professional computational scientists spend more time thinking than typing. Pseudocode is how we think precisely about algorithms without getting distracted by syntax.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Lkv8TzXFzQ"}],"key":"HO2wgvHdkd"},{"type":"heading","depth":3,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Why Pseudocode Matters in Scientific Computing","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"DlPnKdUyfx"}],"identifier":"why-pseudocode-matters-in-scientific-computing","label":"Why Pseudocode Matters in Scientific Computing","html_id":"why-pseudocode-matters-in-scientific-computing","implicit":true,"key":"y31n68Q1DX"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Consider this scenario: You need to implement adaptive timestepping for an orbital integrator. Without pseudocode, you’ll likely write code, run it, watch orbits spiral incorrectly, debug for hours, and maybe get it working through trial and error. With pseudocode, you’ll identify edge cases, boundary conditions, and logical flaws before writing a single line of Python.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"zyCQVAlc4l"}],"key":"FuMDgfBMzq"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Let’s see the difference:","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"cUpprcmvjq"}],"key":"MC1Fj9vtql"},{"type":"code","lang":"python","value":"# WITHOUT PSEUDOCODE (typical student approach):\n# \"I'll figure it out as I code...\"\ndef integrate(state, t_end):\n    dt = 0.01\n    while state.time < t_end:\n        new_state = step(state, dt)\n        error = estimate_error(state, new_state)\n        if error > tolerance:\n            dt = dt * 0.5  # Seems reasonable?\n        state = new_state\n    return state\n# Wait, this doesn't work... infinite loop when error is bad!\n# Also, dt never increases... hours of debugging ahead","position":{"start":{"line":41,"column":1},"end":{"line":55,"column":1}},"key":"sApW4VULED"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"Now with proper pseudocode design:","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"vJY658YBtt"}],"key":"pnfsXRe48S"},{"type":"code","lang":"","value":"ALGORITHM: Adaptive Timestep Integration\nINPUT: initial_state, t_end, tolerance\nOUTPUT: final_state\n\nINITIALIZE:\n    current_state ← initial_state\n    dt ← initial_guess_timestep\n    min_dt ← machine_epsilon * timescale\n    max_dt ← 0.1 * total_time\n\nWHILE current_state.time < t_end:\n    attempted_step ← False\n    \n    WHILE NOT attempted_step:\n        trial_state ← integrate_step(current_state, dt)\n        error ← estimate_error(current_state, trial_state)\n        \n        IF error > tolerance:\n            dt ← max(dt * 0.5, min_dt)  # Prevent infinite shrinking\n            IF dt == min_dt:\n                WARN \"Minimum timestep reached\"\n                attempted_step ← True  # Accept with warning\n        ELSE:\n            attempted_step ← True\n            \n    current_state ← trial_state\n    \n    # Adjust dt for next step\n    IF error < 0.1 * tolerance:\n        dt ← min(dt * 2, max_dt)  # Grow if very accurate\n\nRETURN current_state","position":{"start":{"line":59,"column":1},"end":{"line":92,"column":1}},"key":"ENVSPXHd5t"},{"type":"paragraph","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"children":[{"type":"text","value":"The pseudocode reveals issues immediately: What if error never gets small enough? What if dt grows too large? How do we handle the final step that might overshoot t_end? These questions are easier to answer in pseudocode than in Python.","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"thyXkltE3Z"}],"key":"zaKOrNSskr"},{"type":"heading","depth":3,"position":{"start":{"line":96,"column":1},"end":{"line":96,"column":1}},"children":[{"type":"text","value":"The Three Levels of Pseudocode Refinement","position":{"start":{"line":96,"column":1},"end":{"line":96,"column":1}},"key":"QUBFzZV4ON"}],"identifier":"the-three-levels-of-pseudocode-refinement","label":"The Three Levels of Pseudocode Refinement","html_id":"the-three-levels-of-pseudocode-refinement","implicit":true,"key":"CboWxT5Xs6"},{"type":"paragraph","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"children":[{"type":"text","value":"Professional algorithm development happens in stages, each revealing different issues:","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"vrDyde3jeQ"}],"key":"PY6rJNQhVj"},{"type":"paragraph","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"strong","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"text","value":"Level 1: Conceptual Overview","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"q8lMwdsrDS"}],"key":"IQ19DKfoSO"}],"key":"ptf2U7oOgQ"},{"type":"code","lang":"","value":"WHILE simulation not done:\n    Take a step\n    Check if step was good\n    Adjust timestep","position":{"start":{"line":101,"column":1},"end":{"line":106,"column":1}},"key":"Tif79AalLx"},{"type":"paragraph","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"strong","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"text","value":"Level 2: Structural Detail","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"key":"WHO5dv3aQI"}],"key":"XNYXag8g5q"}],"key":"kG21ThQePu"},{"type":"code","lang":"","value":"WHILE time < end_time:\n    DO:\n        trial_step = integrate(state, dt)\n        error = compute_error(trial_step)\n    UNTIL error < tolerance OR dt < dt_min\n    \n    state = trial_step\n    dt = adjust_timestep(error, dt)","position":{"start":{"line":109,"column":1},"end":{"line":118,"column":1}},"key":"h5I9QrGVu9"},{"type":"paragraph","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"children":[{"type":"strong","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"children":[{"type":"text","value":"Level 3: Implementation-Ready","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"key":"MTNKXF0oZM"}],"key":"A337P0cYLP"}],"key":"IrfAd61jjd"},{"type":"code","lang":"","value":"FUNCTION adaptive_integrate(initial_state, end_time, tolerance):\n    state ← initial_state\n    dt ← estimate_initial_timestep(state)\n    dt_min ← 1e-10 * (end_time - initial_state.time)\n    dt_max ← 0.1 * (end_time - initial_state.time)\n    \n    WHILE state.time < end_time:\n        step_accepted ← False\n        attempts ← 0\n        \n        WHILE NOT step_accepted AND attempts < MAX_ATTEMPTS:\n            dt_actual ← min(dt, end_time - state.time)  # Don't overshoot\n            \n            trial_state ← rk4_step(state, dt_actual)\n            error_estimate ← || trial_state - rk2_step(state, dt_actual) ||\n            \n            IF error_estimate < tolerance:\n                step_accepted ← True\n                state ← trial_state\n                \n                # Adjust dt for next step\n                IF error_estimate < 0.1 * tolerance:\n                    dt ← min(dt * 1.5, dt_max)\n            ELSE:\n                dt ← max(dt * 0.5, dt_min)\n                attempts ← attempts + 1\n        \n        IF NOT step_accepted:\n            RAISE \"Cannot achieve tolerance at minimum timestep\"\n    \n    RETURN state","position":{"start":{"line":121,"column":1},"end":{"line":153,"column":1}},"key":"p2FFv3fPrz"},{"type":"paragraph","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"children":[{"type":"text","value":"Each level of refinement reveals new issues and solutions. This is computational thinking in action.","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"GMgZKCsDkT"}],"key":"eg6d7WPdap"},{"type":"heading","depth":3,"position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"uqbz1ILc9f"},{"type":"strong","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Universal Pattern of Adaptive Algorithms","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"Cysttd0OjO"}],"key":"jSCaws4OeM"}],"identifier":"id-computational-thinking-box-the-universal-pattern-of-adaptive-algorithms","label":"📦 Computational Thinking Box: The Universal Pattern of Adaptive Algorithms","html_id":"id-computational-thinking-box-the-universal-pattern-of-adaptive-algorithms","implicit":true,"key":"o84lfGzYQ6"},{"type":"paragraph","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"children":[{"type":"text","value":"Adaptive timestepping is an instance of a universal pattern that appears throughout computational physics:","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"key":"nLtXQucGbz"}],"key":"qJNhfCG3Ju"},{"type":"code","lang":"","value":"PATTERN: Adaptive Refinement\n1. Attempt action with current parameters\n2. Evaluate quality of result  \n3. If quality insufficient: refine parameters and retry\n4. If quality acceptable: proceed and possibly coarsen parameters\n5. Include safeguards against infinite refinement\n\nThis pattern appears in:\n- Adaptive mesh refinement (AMR) in hydrodynamics\n- Step size control in ODE solvers\n- Learning rate scheduling in neural networks  \n- Convergence acceleration in iterative solvers\n- Monte Carlo importance sampling","position":{"start":{"line":161,"column":1},"end":{"line":175,"column":1}},"key":"arm2Wdtn4k"},{"type":"heading","depth":3,"position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"key":"vidyBXSDbg"},{"type":"strong","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"children":[{"type":"text","value":"Check Your Understanding","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"key":"gg4WbqjjjS"}],"key":"aaogJsLBTc"}],"identifier":"id-check-your-understanding","label":"🔍 Check Your Understanding","html_id":"id-check-your-understanding","implicit":true,"key":"kFWCUrOCBf"},{"type":"paragraph","position":{"start":{"line":179,"column":1},"end":{"line":179,"column":1}},"children":[{"type":"text","value":"Before continuing, write pseudocode for this problem: Given a list of stellar magnitudes, find all stars visible to the naked eye (magnitude ≤ 6), but exclude any that are within 0.1 magnitudes of the threshold (to account for measurement uncertainty).","position":{"start":{"line":179,"column":1},"end":{"line":179,"column":1}},"key":"Re3naov1CU"}],"key":"YRBWirNqu7"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Sample Solution","key":"mQBWBoofyg"}],"key":"f1S4ffAf3l"},{"type":"code","lang":null,"meta":null,"value":"ALGORITHM: Find Reliably Visible Stars\nINPUT: magnitude_list, visibility_threshold = 6.0, uncertainty = 0.1\nOUTPUT: visible_stars\n\nvisible_stars ← empty list\n\nFOR EACH magnitude IN magnitude_list:\n    IF magnitude < (visibility_threshold - uncertainty):\n        ADD magnitude TO visible_stars\n    # Note: We exclude stars in the uncertainty zone\n    # magnitude ∈ [5.9, 6.0] are excluded for safety\n\nRETURN visible_stars","key":"BZON9C7HQj"}],"key":"Y6kKx2XoD7"},{"type":"heading","depth":2,"position":{"start":{"line":202,"column":1},"end":{"line":202,"column":1}},"children":[{"type":"text","value":"3.2 Boolean Logic in Scientific Computing","position":{"start":{"line":202,"column":1},"end":{"line":202,"column":1}},"key":"aUbfKQOyX0"}],"identifier":"id-3-2-boolean-logic-in-scientific-computing","label":"3.2 Boolean Logic in Scientific Computing","html_id":"id-3-2-boolean-logic-in-scientific-computing","implicit":true,"key":"NgabZ3brAB"},{"type":"paragraph","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"children":[{"type":"text","value":"Every decision in your code ultimately reduces to true or false. But in scientific computing, these decisions often involve floating-point numbers, where equality is treacherous and precision is limited.","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"key":"TC5pUN4WCB"}],"key":"gf9cxb0wkt"},{"type":"heading","depth":3,"position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"children":[{"type":"text","value":"The Fundamental Comparisons","position":{"start":{"line":206,"column":1},"end":{"line":206,"column":1}},"key":"vRjbL7Bpih"}],"identifier":"the-fundamental-comparisons","label":"The Fundamental Comparisons","html_id":"the-fundamental-comparisons","implicit":true,"key":"EmJNwUICQw"},{"type":"code","lang":"python","value":"In [1]: # Basic comparisons\nIn [2]: temperature = 5778  # Kelvin (Sun's surface)\n\nIn [3]: temperature > 5000   # Hot enough for certain reactions\nOut[3]: True\n\nIn [4]: temperature == 5778  # Exact equality (dangerous with floats!)\nOut[4]: True  # Only because we used integers\n\nIn [5]: # The floating-point trap\nIn [6]: calculated_temp = 5778.0000000001\nIn [7]: calculated_temp == 5778.0\nOut[7]: False  # Tiny difference breaks equality!","position":{"start":{"line":208,"column":1},"end":{"line":222,"column":1}},"key":"Rx4MN23osK"},{"type":"heading","depth":3,"position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"children":[{"type":"text","value":"Defensive Comparisons for Numerical Work","position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"key":"cdoUQ7KBPc"}],"identifier":"defensive-comparisons-for-numerical-work","label":"Defensive Comparisons for Numerical Work","html_id":"defensive-comparisons-for-numerical-work","implicit":true,"key":"m9gqToGTOM"},{"type":"code","lang":"python","value":"In [8]: import math\n\nIn [9]: def safe_equal(a, b, rel_tol=1e-9, abs_tol=1e-12):\n   ...:     \"\"\"Safe floating-point comparison.\"\"\"\n   ...:     # Check for exact equality first (handles infinities)\n   ...:     if a == b:\n   ...:         return True\n   ...:     \n   ...:     # Check for NaN (NaN != NaN by definition)\n   ...:     if math.isnan(a) or math.isnan(b):\n   ...:         return False\n   ...:     \n   ...:     # Check for infinity\n   ...:     if math.isinf(a) or math.isinf(b):\n   ...:         return a == b\n   ...:     \n   ...:     # Normal comparison with tolerance\n   ...:     return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)","position":{"start":{"line":226,"column":1},"end":{"line":245,"column":1}},"key":"tnTXwo8Q1N"},{"type":"heading","depth":3,"position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"HH7OqGEL3g"},{"type":"strong","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: Floating-Point Equality in Loops","position":{"start":{"line":247,"column":1},"end":{"line":247,"column":1}},"key":"hxDiyvMFuK"}],"key":"F2YOSchJFl"}],"identifier":"id-common-bug-alert-floating-point-equality-in-loops","label":"⚠️ Common Bug Alert: Floating-Point Equality in Loops","html_id":"id-common-bug-alert-floating-point-equality-in-loops","implicit":true,"key":"l1dAjtQUJN"},{"type":"code","lang":"python","value":"# DANGEROUS - might never terminate!\nstep = 0.1\nposition = 0.0\ntarget = 1.0\n\nwhile position != target:  # BAD!\n    position += step\n    print(f\"Position: {position}\")\n\n# After 10 steps, position = 0.9999999999999999, not 1.0!\n# This loop runs forever!\n\n# SAFE VERSION\nwhile position < target - 1e-10:  # Good!\n    position += step","position":{"start":{"line":249,"column":1},"end":{"line":265,"column":1}},"key":"Iswubr9dpb"},{"type":"heading","depth":3,"position":{"start":{"line":267,"column":1},"end":{"line":267,"column":1}},"children":[{"type":"text","value":"Combining Conditions: Order Matters","position":{"start":{"line":267,"column":1},"end":{"line":267,"column":1}},"key":"bC8QqhOMlq"}],"identifier":"combining-conditions-order-matters","label":"Combining Conditions: Order Matters","html_id":"combining-conditions-order-matters","implicit":true,"key":"FQkCFpVDUU"},{"type":"code","lang":"python","value":"In [10]: # Short-circuit evaluation can prevent errors\nIn [11]: data = []\n\nIn [12]: # WRONG - might crash\nIn [13]: if data[0] > 0 and len(data) > 0:  # IndexError if empty!\n   ...:     print(\"First element is positive\")\n\nIn [14]: # CORRECT - safe order\nIn [15]: if len(data) > 0 and data[0] > 0:  # Checks length first\n   ...:     print(\"First element is positive\")\n\nIn [16]: # Or more Pythonic\nIn [17]: if data and data[0] > 0:  # Empty list is False\n   ...:     print(\"First element is positive\")","position":{"start":{"line":269,"column":1},"end":{"line":284,"column":1}},"key":"JhNHQ4FNu7"},{"type":"heading","depth":3,"position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"children":[{"type":"text","value":"📊 ","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"P91HdZ6cln"},{"type":"strong","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"children":[{"type":"text","value":"Performance Profile: Short-Circuit Evaluation","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"EW7aDmDFWE"}],"key":"NgO7upybCj"}],"identifier":"id-performance-profile-short-circuit-evaluation","label":"📊 Performance Profile: Short-Circuit Evaluation","html_id":"id-performance-profile-short-circuit-evaluation","implicit":true,"key":"LFHNDy0Wwi"},{"type":"code","lang":"python","value":"In [18]: def expensive_check():\n   ...:     \"\"\"Simulates costly validation.\"\"\"\n   ...:     import time\n   ...:     time.sleep(0.1)\n   ...:     return True\n\nIn [19]: # Short-circuit saves time\nIn [20]: %timeit False and expensive_check()\n154 ns ± 2.3 ns per loop  # Doesn't call expensive_check!\n\nIn [21]: %timeit True and expensive_check()  \n100 ms ± 523 µs per loop  # Calls expensive_check\n\n# Use this pattern in convergence checks:\nif iteration > max_iterations or has_converged(state):\n    break  # Checks iteration count FIRST","position":{"start":{"line":288,"column":1},"end":{"line":305,"column":1}},"key":"kuLwh6UTIA"},{"type":"heading","depth":2,"position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"children":[{"type":"text","value":"3.3 Conditional Statements: Teaching Computers to Decide","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"key":"oA1IHpmCvp"}],"identifier":"id-3-3-conditional-statements-teaching-computers-to-decide","label":"3.3 Conditional Statements: Teaching Computers to Decide","html_id":"id-3-3-conditional-statements-teaching-computers-to-decide","implicit":true,"key":"E9hZJZnsHT"},{"type":"paragraph","position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"children":[{"type":"text","value":"Conditional statements are where your code makes decisions. In scientific computing, these decisions often involve numerical thresholds, convergence criteria, and boundary conditions.","position":{"start":{"line":309,"column":1},"end":{"line":309,"column":1}},"key":"tca0c4OJPT"}],"key":"OBDsCjVZdQ"},{"type":"heading","depth":3,"position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"children":[{"type":"text","value":"The Pattern of Scientific Conditionals","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"oXpMPRYMF6"}],"identifier":"the-pattern-of-scientific-conditionals","label":"The Pattern of Scientific Conditionals","html_id":"the-pattern-of-scientific-conditionals","implicit":true,"key":"I7HX8Bjowy"},{"type":"code","lang":"python","value":"def classify_stellar_remnant(mass_solar):\n    \"\"\"\n    Determine stellar remnant type based on initial mass.\n    Demonstrates guard clauses and defensive programming.\n    \"\"\"\n    # Guard clause - validate input first\n    if mass_solar <= 0:\n        raise ValueError(f\"Stellar mass must be positive: {mass_solar}\")\n    \n    if not math.isfinite(mass_solar):\n        raise ValueError(f\"Stellar mass must be finite: {mass_solar}\")\n    \n    # Main classification logic\n    if mass_solar < 0.08:\n        remnant = \"brown dwarf (failed star)\"\n    elif mass_solar < 8:\n        remnant = \"white dwarf\"\n    elif mass_solar < 25:\n        remnant = \"neutron star\"\n    else:\n        remnant = \"black hole\"\n    \n    # Add uncertainty near boundaries\n    boundary_distances = [\n        abs(mass_solar - 0.08),\n        abs(mass_solar - 8),\n        abs(mass_solar - 25)\n    ]\n    min_distance = min(boundary_distances)\n    \n    if min_distance < 0.5:\n        remnant += \" (near classification boundary)\"\n    \n    return remnant","position":{"start":{"line":313,"column":1},"end":{"line":348,"column":1}},"key":"bPpnQpUodR"},{"type":"heading","depth":3,"position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"children":[{"type":"text","value":"Guard Clauses: Fail Fast, Fail Clear","position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"key":"yhS3IGalu2"}],"identifier":"guard-clauses-fail-fast-fail-clear","label":"Guard Clauses: Fail Fast, Fail Clear","html_id":"guard-clauses-fail-fast-fail-clear","implicit":true,"key":"BCJ10zyBoZ"},{"type":"paragraph","position":{"start":{"line":352,"column":1},"end":{"line":352,"column":1}},"children":[{"type":"text","value":"Guard clauses handle special cases immediately, preventing deep nesting and making code clearer:","position":{"start":{"line":352,"column":1},"end":{"line":352,"column":1}},"key":"JyGxlKNSXR"}],"key":"KUz8LXvowg"},{"type":"code","lang":"python","value":"def calculate_orbital_period(a, M, validate=True):\n    \"\"\"\n    Kepler's third law with comprehensive validation.\n    \n    Shows the pattern of guard clauses for scientific code.\n    \"\"\"\n    # Guard clauses handle problems immediately\n    if validate:\n        if a <= 0:\n            raise ValueError(f\"Semi-major axis must be positive: {a}\")\n        if M <= 0:\n            raise ValueError(f\"Mass must be positive: {M}\")\n        if a < 2.95e-4 * M:  # Inside Schwarzschild radius!\n            raise ValueError(f\"Orbit inside black hole: a={a}, Rs={2.95e-4*M}\")\n    \n    # Main calculation - only runs if all guards pass\n    import math\n    G = 6.67e-8  # CGS\n    period = 2 * math.pi * math.sqrt(a**3 / (G * M))\n    \n    # Sanity check on result\n    if validate and period > 13.8e9 * 365.25 * 86400:  # Age of universe\n        import warnings\n        warnings.warn(f\"Orbital period exceeds age of universe: {period} s\")\n    \n    return period","position":{"start":{"line":354,"column":1},"end":{"line":381,"column":1}},"key":"eTgQ9WQ0Qj"},{"type":"heading","depth":3,"position":{"start":{"line":383,"column":1},"end":{"line":383,"column":1}},"children":[{"type":"text","value":"🐛 ","position":{"start":{"line":383,"column":1},"end":{"line":383,"column":1}},"key":"n6xAtJmfj1"},{"type":"strong","position":{"start":{"line":383,"column":1},"end":{"line":383,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":383,"column":1},"end":{"line":383,"column":1}},"key":"IRYAbdsTeL"}],"key":"Nip2QjqGsB"}],"identifier":"id-debug-this","label":"🐛 Debug This!","html_id":"id-debug-this","implicit":true,"key":"j1698DEagW"},{"type":"paragraph","position":{"start":{"line":385,"column":1},"end":{"line":385,"column":1}},"children":[{"type":"text","value":"The following code has a subtle logic error. Can you find it?","position":{"start":{"line":385,"column":1},"end":{"line":385,"column":1}},"key":"gzsPpVCffV"}],"key":"gJ2LPsFiCD"},{"type":"code","lang":"python","value":"def check_convergence(old_value, new_value, tolerance):\n    \"\"\"Check if iterative calculation has converged.\"\"\"\n    \n    if new_value == 0:\n        return old_value == 0\n    \n    relative_change = abs(new_value - old_value) / new_value\n    \n    if relative_change < tolerance:\n        return True\n    else:\n        return False","position":{"start":{"line":387,"column":1},"end":{"line":400,"column":1}},"key":"HfRbzDQDnM"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Bug and Solution","key":"nyjWCMuMjz"}],"key":"GGEngWGu0A"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bug","key":"BfijbzYvCe"}],"key":"NLfcMnlPLq"},{"type":"text","value":": Division by new_value fails when new_value is very small but non-zero, and gives wrong results when old_value is much larger than new_value.","key":"ROxHbrrcn4"}],"key":"Fivx87mCoJ"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Fixed Version","key":"TkVw7ISCbT"}],"key":"fHJounjc6T"},{"type":"text","value":":","key":"gGmE40ngO3"}],"key":"OxmIj2hva4"},{"type":"code","lang":"python","meta":null,"value":"def check_convergence(old_value, new_value, tolerance):\n    \"\"\"Check if iterative calculation has converged.\"\"\"\n    \n    # Handle exact convergence\n    if old_value == new_value:\n        return True\n    \n    # Use the larger magnitude for relative comparison\n    scale = max(abs(old_value), abs(new_value))\n    \n    if scale == 0:\n        return True  # Both are zero\n    \n    relative_change = abs(new_value - old_value) / scale\n    return relative_change < tolerance","key":"sNbxn4Bnlr"}],"key":"DFMauS4R5U"},{"type":"heading","depth":2,"position":{"start":{"line":428,"column":1},"end":{"line":428,"column":1}},"children":[{"type":"text","value":"3.4 Loops: The Heart of Scientific Computation","position":{"start":{"line":428,"column":1},"end":{"line":428,"column":1}},"key":"NTGWs6PDY1"}],"identifier":"id-3-4-loops-the-heart-of-scientific-computation","label":"3.4 Loops: The Heart of Scientific Computation","html_id":"id-3-4-loops-the-heart-of-scientific-computation","implicit":true,"key":"kJIp75feGa"},{"type":"paragraph","position":{"start":{"line":430,"column":1},"end":{"line":430,"column":1}},"children":[{"type":"text","value":"Loops are how we process data, iterate until convergence, and simulate time evolution. Choosing the right loop structure and implementing it correctly determines whether your simulation finishes in minutes or days.","position":{"start":{"line":430,"column":1},"end":{"line":430,"column":1}},"key":"Ba9n4z5Esq"}],"key":"ENmQHdxhlo"},{"type":"heading","depth":3,"position":{"start":{"line":432,"column":1},"end":{"line":432,"column":1}},"children":[{"type":"text","value":"For Loops: When You Know What to Iterate Over","position":{"start":{"line":432,"column":1},"end":{"line":432,"column":1}},"key":"uBbVLqNu5Y"}],"identifier":"for-loops-when-you-know-what-to-iterate-over","label":"For Loops: When You Know What to Iterate Over","html_id":"for-loops-when-you-know-what-to-iterate-over","implicit":true,"key":"luSnsBCQVN"},{"type":"code","lang":"python","value":"# Basic iteration pattern\nmeasurements = [10.2, 10.5, 10.3, 10.6, 10.4]\n\n# Accumulation pattern - fundamental to all reductions\ntotal = 0\nsum_of_squares = 0\nfor value in measurements:\n    total += value\n    sum_of_squares += value**2\n\nmean = total / len(measurements)\nvariance = sum_of_squares / len(measurements) - mean**2","position":{"start":{"line":434,"column":1},"end":{"line":447,"column":1}},"key":"OqblI0OIdq"},{"type":"paragraph","position":{"start":{"line":449,"column":1},"end":{"line":449,"column":1}},"children":[{"type":"text","value":"Let’s trace through the execution to build intuition:","position":{"start":{"line":449,"column":1},"end":{"line":449,"column":1}},"key":"XW7sdTPsEE"}],"key":"U2nkvkU5He"},{"type":"code","lang":"","value":"Execution Trace: Accumulation Pattern\n\nInitial: total = 0, sum_of_squares = 0\n\nIteration 1: value = 10.2\n  total = 0 + 10.2 = 10.2\n  sum_of_squares = 0 + 104.04 = 104.04\n\nIteration 2: value = 10.5\n  total = 10.2 + 10.5 = 20.7\n  sum_of_squares = 104.04 + 110.25 = 214.29\n\n[... continues for all values ...]\n\nFinal: total = 51.5, sum_of_squares = 530.39\nmean = 51.5 / 5 = 10.3\nvariance = 530.39 / 5 - 10.3² = 0.0178","position":{"start":{"line":451,"column":1},"end":{"line":469,"column":1}},"key":"E2k2fLsbp6"},{"type":"heading","depth":3,"position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"children":[{"type":"text","value":"Common For Loop Patterns in Scientific Computing","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"key":"iYbRr7E2Sl"}],"identifier":"common-for-loop-patterns-in-scientific-computing","label":"Common For Loop Patterns in Scientific Computing","html_id":"common-for-loop-patterns-in-scientific-computing","implicit":true,"key":"xx5WhuQBaJ"},{"type":"code","lang":"python","value":"# Pattern 1: Parallel iteration with zip\ntimes = [0, 1, 2, 3, 4]  # seconds\npositions = [0, 4.9, 19.6, 44.1, 78.4]  # meters\n\nfor t, x in zip(times, positions):\n    velocity = x / (t + 1e-10)  # Avoid division by zero\n    print(f\"t={t}s: x={x}m, v={velocity:.1f}m/s\")\n\n# Pattern 2: Enumeration for indexing\ndata = [1.2, 2.3, 3.4, 4.5]\nfiltered = []\nindices = []\n\nfor i, value in enumerate(data):\n    if value > 2.0:\n        filtered.append(value)\n        indices.append(i)\nprint(f\"Values > 2.0 at indices: {indices}\")\n\n# Pattern 3: Sliding window (for smoothing, derivatives)\nwindow_size = 3\nsmoothed = []\n\nfor i in range(len(data) - window_size + 1):\n    window = data[i:i + window_size]\n    smoothed.append(sum(window) / window_size)","position":{"start":{"line":473,"column":1},"end":{"line":500,"column":1}},"key":"a4mV3ytbBZ"},{"type":"heading","depth":3,"position":{"start":{"line":502,"column":1},"end":{"line":502,"column":1}},"children":[{"type":"text","value":"While Loops: Iterating Until a Condition","position":{"start":{"line":502,"column":1},"end":{"line":502,"column":1}},"key":"T1oEdofZCy"}],"identifier":"while-loops-iterating-until-a-condition","label":"While Loops: Iterating Until a Condition","html_id":"while-loops-iterating-until-a-condition","implicit":true,"key":"xO1JGIh63e"},{"type":"paragraph","position":{"start":{"line":504,"column":1},"end":{"line":504,"column":1}},"children":[{"type":"text","value":"While loops are essential for iterative algorithms where the number of iterations isn’t known in advance:","position":{"start":{"line":504,"column":1},"end":{"line":504,"column":1}},"key":"sopZJVtKgy"}],"key":"nuOgOeazrC"},{"type":"code","lang":"python","value":"def find_root_bisection(func, a, b, tolerance=1e-10, max_iter=100):\n    \"\"\"\n    Find root using bisection method.\n    Demonstrates proper while loop with safety checks.\n    \"\"\"\n    # Validate inputs\n    fa, fb = func(a), func(b)\n    if fa * fb > 0:\n        raise ValueError(\"Function must have opposite signs at endpoints\")\n    \n    iteration = 0\n    \n    # Main bisection loop\n    while abs(b - a) > tolerance and iteration < max_iter:\n        c = (a + b) / 2\n        fc = func(c)\n        \n        # Check if we found exact root\n        if fc == 0:\n            return c\n        \n        # Update interval\n        if fa * fc < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n        \n        iteration += 1\n        \n        # Optional: track convergence\n        if iteration % 10 == 0:\n            print(f\"Iteration {iteration}: interval=[{a}, {b}], width={b-a}\")\n    \n    # Check why we stopped\n    if iteration >= max_iter:\n        import warnings\n        warnings.warn(f\"Maximum iterations reached. Precision: {b-a}\")\n    \n    return (a + b) / 2","position":{"start":{"line":506,"column":1},"end":{"line":548,"column":1}},"key":"j0UJ14qHrC"},{"type":"heading","depth":3,"position":{"start":{"line":550,"column":1},"end":{"line":550,"column":1}},"children":[{"type":"text","value":"📦 ","position":{"start":{"line":550,"column":1},"end":{"line":550,"column":1}},"key":"xLwkkU6GVk"},{"type":"strong","position":{"start":{"line":550,"column":1},"end":{"line":550,"column":1}},"children":[{"type":"text","value":"Computational Thinking Box: The Convergence Pattern","position":{"start":{"line":550,"column":1},"end":{"line":550,"column":1}},"key":"pDVnOTj6DX"}],"key":"KO9iwBnFTv"}],"identifier":"id-computational-thinking-box-the-convergence-pattern","label":"📦 Computational Thinking Box: The Convergence Pattern","html_id":"id-computational-thinking-box-the-convergence-pattern","implicit":true,"key":"vQUsiCJVks"},{"type":"code","lang":"","value":"PATTERN: Iterative Convergence\n\ninitialize state\ninitialize iteration_count = 0\n\nWHILE NOT converged AND iteration_count < max_iterations:\n    new_state = update(state)\n    converged = check_convergence(state, new_state, tolerance)\n    state = new_state\n    iteration_count += 1\n\nIF NOT converged:\n    handle_failure()\n\nThis pattern appears in:\n- Root finding (Newton-Raphson, bisection)\n- Fixed-point iteration\n- Iterative linear solvers (Jacobi, Gauss-Seidel)\n- Optimization algorithms (gradient descent)\n- Self-consistent field calculations\n- Monte Carlo equilibration","position":{"start":{"line":552,"column":1},"end":{"line":574,"column":1}},"key":"OeftIlqNRj"},{"type":"heading","depth":3,"position":{"start":{"line":576,"column":1},"end":{"line":576,"column":1}},"children":[{"type":"text","value":"⏸️ ","position":{"start":{"line":576,"column":1},"end":{"line":576,"column":1}},"key":"ZnVyhhHBeK"},{"type":"strong","position":{"start":{"line":576,"column":1},"end":{"line":576,"column":1}},"children":[{"type":"text","value":"Pause and Predict","position":{"start":{"line":576,"column":1},"end":{"line":576,"column":1}},"key":"JvF9CNjQx5"}],"key":"g3MZhqeiak"}],"identifier":"id-pause-and-predict","label":"⏸️ Pause and Predict","html_id":"id-pause-and-predict","implicit":true,"key":"nIoohFLMJs"},{"type":"paragraph","position":{"start":{"line":578,"column":1},"end":{"line":578,"column":1}},"children":[{"type":"text","value":"What will this code print?","position":{"start":{"line":578,"column":1},"end":{"line":578,"column":1}},"key":"WCop6HXd5G"}],"key":"I8IiPpjhTf"},{"type":"code","lang":"python","value":"x = 0.0\nwhile x != 1.0:\n    x += 0.1\n    print(f\"{x:.17f}\")\n    if x > 2:  # Safety check\n        break","position":{"start":{"line":580,"column":1},"end":{"line":587,"column":1}},"key":"vKHJpK5Lq0"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"CWpxHmuS7g"}],"key":"jwNmCmOudn"},{"type":"paragraph","children":[{"type":"text","value":"It prints 20+ lines and hits the safety check! After 10 additions:","key":"RXVfP78M1X"}],"key":"UFRMVE87fH"},{"type":"code","lang":null,"meta":null,"value":"0.10000000000000001\n0.20000000000000001\n0.30000000000000004\n...\n0.99999999999999989  # Not 1.0!\n1.09999999999999987\n...\n2.09999999999999964","key":"F7oAVyFU8q"},{"type":"paragraph","children":[{"type":"text","value":"The accumulated rounding errors prevent x from ever exactly equaling 1.0.","key":"vVOVKpTz6R"}],"key":"XIJkFWW8Hp"}],"key":"nEl6xgTXuy"},{"type":"heading","depth":2,"position":{"start":{"line":608,"column":1},"end":{"line":608,"column":1}},"children":[{"type":"text","value":"3.5 List Comprehensions: Elegant and Efficient","position":{"start":{"line":608,"column":1},"end":{"line":608,"column":1}},"key":"N3sqxO8d8B"}],"identifier":"id-3-5-list-comprehensions-elegant-and-efficient","label":"3.5 List Comprehensions: Elegant and Efficient","html_id":"id-3-5-list-comprehensions-elegant-and-efficient","implicit":true,"key":"MLvkWcU4JX"},{"type":"paragraph","position":{"start":{"line":610,"column":1},"end":{"line":610,"column":1}},"children":[{"type":"text","value":"List comprehensions provide a concise way to create lists, but they’re more than syntactic sugar — they can be significantly faster than equivalent loops.","position":{"start":{"line":610,"column":1},"end":{"line":610,"column":1}},"key":"zgoBhU5lU6"}],"key":"MdDO2DHzyM"},{"type":"heading","depth":3,"position":{"start":{"line":612,"column":1},"end":{"line":612,"column":1}},"children":[{"type":"text","value":"From Loop to Comprehension","position":{"start":{"line":612,"column":1},"end":{"line":612,"column":1}},"key":"cqYga0DjQL"}],"identifier":"from-loop-to-comprehension","label":"From Loop to Comprehension","html_id":"from-loop-to-comprehension","implicit":true,"key":"aVjmjcOLOT"},{"type":"code","lang":"python","value":"# Traditional loop approach\nsquares = []\nfor x in range(10):\n    if x % 2 == 0:  # Even numbers only\n        squares.append(x**2)\n\n# List comprehension - same result, clearer intent\nsquares = [x**2 for x in range(10) if x % 2 == 0]\n\n# Performance comparison\nIn [50]: %timeit [x**2 for x in range(1000) if x % 2 == 0]\n47.3 µs ± 312 ns per loop\n\nIn [51]: %%timeit\n   ...: squares = []\n   ...: for x in range(1000):\n   ...:     if x % 2 == 0:\n   ...:         squares.append(x**2)\n73.2 µs ± 1.02 µs per loop\n\n# Comprehension is ~35% faster!","position":{"start":{"line":614,"column":1},"end":{"line":636,"column":1}},"key":"WaR3LT5cxP"},{"type":"heading","depth":3,"position":{"start":{"line":638,"column":1},"end":{"line":638,"column":1}},"children":[{"type":"text","value":"When to Use (and Not Use) Comprehensions","position":{"start":{"line":638,"column":1},"end":{"line":638,"column":1}},"key":"iMONKU8QzA"}],"identifier":"when-to-use-and-not-use-comprehensions","label":"When to Use (and Not Use) Comprehensions","html_id":"when-to-use-and-not-use-comprehensions","implicit":true,"key":"CttVqAaVLd"},{"type":"code","lang":"python","value":"# GOOD: Simple transformation\nmagnitudes = [2.3, 5.1, 3.7, 6.2, 4.5]\nfluxes = [10**(-0.4 * mag) for mag in magnitudes]\n\n# GOOD: Filtering with condition\nvisible = [mag for mag in magnitudes if mag < 6.0]\n\n# BAD: Too complex, hard to read\n# result = [process(x) if condition(x) else \n#           alternative(y) for x, y in zip(list1, list2) \n#           if validate(x) and check(y)]\n\n# BETTER: Use a loop for complex logic\nresult = []\nfor x, y in zip(list1, list2):\n    if validate(x) and check(y):\n        if condition(x):\n            result.append(process(x))\n        else:\n            result.append(alternative(y))","position":{"start":{"line":640,"column":1},"end":{"line":661,"column":1}},"key":"kLahE4gsWo"},{"type":"heading","depth":3,"position":{"start":{"line":663,"column":1},"end":{"line":663,"column":1}},"children":[{"type":"text","value":"Nested Comprehensions: Handle with Care","position":{"start":{"line":663,"column":1},"end":{"line":663,"column":1}},"key":"J7hU4UJaFP"}],"identifier":"nested-comprehensions-handle-with-care","label":"Nested Comprehensions: Handle with Care","html_id":"nested-comprehensions-handle-with-care","implicit":true,"key":"Kf6XnEtDJ6"},{"type":"code","lang":"python","value":"# Creating a distance matrix\npositions = [(0, 0), (1, 0), (0, 1), (1, 1)]\n\n# Readable nested comprehension\ndistances = [[math.sqrt((x1-x2)**2 + (y1-y2)**2) \n              for x2, y2 in positions]\n             for x1, y1 in positions]\n\n# When nesting gets deep, use loops for clarity","position":{"start":{"line":665,"column":1},"end":{"line":675,"column":1}},"key":"D4IUcmUZGp"},{"type":"heading","depth":2,"position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"children":[{"type":"text","value":"3.6 Advanced Control Flow Patterns","position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"key":"NodyJqq3oe"}],"identifier":"id-3-6-advanced-control-flow-patterns","label":"3.6 Advanced Control Flow Patterns","html_id":"id-3-6-advanced-control-flow-patterns","implicit":true,"key":"p4eW6psEEJ"},{"type":"heading","depth":3,"position":{"start":{"line":679,"column":1},"end":{"line":679,"column":1}},"children":[{"type":"text","value":"The Accumulator Pattern","position":{"start":{"line":679,"column":1},"end":{"line":679,"column":1}},"key":"m6c897PVnF"}],"identifier":"the-accumulator-pattern","label":"The Accumulator Pattern","html_id":"the-accumulator-pattern","implicit":true,"key":"J4KATm4SJY"},{"type":"paragraph","position":{"start":{"line":681,"column":1},"end":{"line":681,"column":1}},"children":[{"type":"text","value":"The accumulator pattern is fundamental to scientific computing:","position":{"start":{"line":681,"column":1},"end":{"line":681,"column":1}},"key":"bQ7qM1YQjf"}],"key":"daUFBdZejL"},{"type":"code","lang":"python","value":"def running_statistics(data_stream):\n    \"\"\"\n    Calculate mean and variance in a single pass.\n    Demonstrates Welford's algorithm for numerical stability.\n    \"\"\"\n    n = 0\n    mean = 0.0\n    M2 = 0.0\n    \n    for value in data_stream:\n        n += 1\n        delta = value - mean\n        mean += delta / n\n        delta2 = value - mean\n        M2 += delta * delta2\n    \n    if n < 2:\n        return mean, float('nan')\n    \n    variance = M2 / (n - 1)\n    return mean, variance\n\n# This is numerically stable even for large datasets!","position":{"start":{"line":683,"column":1},"end":{"line":707,"column":1}},"key":"DKezr5mN8X"},{"type":"heading","depth":3,"position":{"start":{"line":709,"column":1},"end":{"line":709,"column":1}},"children":[{"type":"text","value":"The Filter-Map-Reduce Pattern","position":{"start":{"line":709,"column":1},"end":{"line":709,"column":1}},"key":"i3Gh5goqQU"}],"identifier":"the-filter-map-reduce-pattern","label":"The Filter-Map-Reduce Pattern","html_id":"the-filter-map-reduce-pattern","implicit":true,"key":"ny2URLWNnw"},{"type":"code","lang":"python","value":"# Scientific data processing pipeline\nraw_measurements = [10.2, -999, 10.5, 10.3, -999, 10.6]  # -999 = bad data\n\n# Filter: Remove bad data\nvalid_data = [x for x in raw_measurements if x != -999]\n\n# Map: Convert to different unit\nconverted = [x * 1.5 for x in valid_data]  # Some conversion\n\n# Reduce: Aggregate to single value\nresult = sum(converted) / len(converted)\n\n# Or as a single expression (less readable):\nresult = sum(x * 1.5 for x in raw_measurements if x != -999) / \\\n         sum(1 for x in raw_measurements if x != -999)","position":{"start":{"line":711,"column":1},"end":{"line":727,"column":1}},"key":"hYBUxJ9inB"},{"type":"heading","depth":3,"position":{"start":{"line":729,"column":1},"end":{"line":729,"column":1}},"children":[{"type":"text","value":"📈 ","position":{"start":{"line":729,"column":1},"end":{"line":729,"column":1}},"key":"zZqMuRaGuQ"},{"type":"strong","position":{"start":{"line":729,"column":1},"end":{"line":729,"column":1}},"children":[{"type":"text","value":"Algorithm Archaeology: Why Welford’s Algorithm?","position":{"start":{"line":729,"column":1},"end":{"line":729,"column":1}},"key":"TblPaGPX9F"}],"key":"WNlAAbymrf"}],"identifier":"id-algorithm-archaeology-why-welfords-algorithm","label":"📈 Algorithm Archaeology: Why Welford’s Algorithm?","html_id":"id-algorithm-archaeology-why-welfords-algorithm","implicit":true,"key":"JXpiPcISnX"},{"type":"paragraph","position":{"start":{"line":731,"column":1},"end":{"line":731,"column":1}},"children":[{"type":"text","value":"The naive variance calculation ","position":{"start":{"line":731,"column":1},"end":{"line":731,"column":1}},"key":"q3XvUicWwI"},{"type":"inlineCode","value":"variance = sum_of_squares/n - mean²","position":{"start":{"line":731,"column":1},"end":{"line":731,"column":1}},"key":"GbPB085rFk"},{"type":"text","value":" suffers from catastrophic cancellation when the mean is large relative to the variance.","position":{"start":{"line":731,"column":1},"end":{"line":731,"column":1}},"key":"jwRjMMbEVg"}],"key":"BwDuKXazW6"},{"type":"paragraph","position":{"start":{"line":733,"column":1},"end":{"line":733,"column":1}},"children":[{"type":"text","value":"In 1962, B.P. Welford published a single-pass algorithm that maintains numerical stability by computing differences from the running mean. This was revolutionary for computers with limited memory that couldn’t store all data for a second pass.","position":{"start":{"line":733,"column":1},"end":{"line":733,"column":1}},"key":"KTO27GVbbI"}],"key":"EiG2H1xfwg"},{"type":"paragraph","position":{"start":{"line":735,"column":1},"end":{"line":735,"column":1}},"children":[{"type":"text","value":"Today, this pattern appears in:","position":{"start":{"line":735,"column":1},"end":{"line":735,"column":1}},"key":"NLU4Yk3GK6"}],"key":"mdvZQ1gDCt"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":736,"column":1},"end":{"line":740,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":736,"column":1},"end":{"line":736,"column":1}},"children":[{"type":"text","value":"Online learning algorithms","position":{"start":{"line":736,"column":1},"end":{"line":736,"column":1}},"key":"Zln9qPWpf6"}],"key":"ous1QH59ej"},{"type":"listItem","spread":true,"position":{"start":{"line":737,"column":1},"end":{"line":737,"column":1}},"children":[{"type":"text","value":"Streaming data analysis","position":{"start":{"line":737,"column":1},"end":{"line":737,"column":1}},"key":"wjY7PGfmW2"}],"key":"ORlyXmmXW2"},{"type":"listItem","spread":true,"position":{"start":{"line":738,"column":1},"end":{"line":738,"column":1}},"children":[{"type":"text","value":"Embedded systems with memory constraints","position":{"start":{"line":738,"column":1},"end":{"line":738,"column":1}},"key":"n0wCPENFRX"}],"key":"dBlxcjeweq"},{"type":"listItem","spread":true,"position":{"start":{"line":739,"column":1},"end":{"line":740,"column":1}},"children":[{"type":"text","value":"Real-time telescope data processing","position":{"start":{"line":739,"column":1},"end":{"line":739,"column":1}},"key":"zn4kUNBU6c"}],"key":"DusZla9PEt"}],"key":"VXXwh0Grnu"},{"type":"heading","depth":2,"position":{"start":{"line":741,"column":1},"end":{"line":741,"column":1}},"children":[{"type":"text","value":"3.7 Debugging Control Flow","position":{"start":{"line":741,"column":1},"end":{"line":741,"column":1}},"key":"laNSqpQ6cW"}],"identifier":"id-3-7-debugging-control-flow","label":"3.7 Debugging Control Flow","html_id":"id-3-7-debugging-control-flow","implicit":true,"key":"GTNCGOdEc4"},{"type":"paragraph","position":{"start":{"line":743,"column":1},"end":{"line":743,"column":1}},"children":[{"type":"text","value":"Logic errors are the hardest bugs because the code runs without errors but produces wrong results.","position":{"start":{"line":743,"column":1},"end":{"line":743,"column":1}},"key":"oubXvThItm"}],"key":"PBjdtMr6d5"},{"type":"heading","depth":3,"position":{"start":{"line":745,"column":1},"end":{"line":745,"column":1}},"children":[{"type":"text","value":"Strategic Print Debugging","position":{"start":{"line":745,"column":1},"end":{"line":745,"column":1}},"key":"AGVEsUszmd"}],"identifier":"strategic-print-debugging","label":"Strategic Print Debugging","html_id":"strategic-print-debugging","implicit":true,"key":"kKRD4ZQpvC"},{"type":"code","lang":"python","value":"def debug_convergence(initial, target, rate, max_iter=100):\n    \"\"\"Example of strategic debug output.\"\"\"\n    \n    current = initial\n    \n    for iteration in range(max_iter):\n        # Debug output at key decision points\n        print(f\"Iter {iteration:3d}: current={current:.6f}\", end=\"\")\n        \n        if abs(current - target) < 1e-6:\n            print(\" → CONVERGED\")\n            return current\n        \n        # Update\n        old = current\n        current = current * (1 - rate) + target * rate\n        \n        # Debug: show change\n        change = current - old\n        print(f\" → new={current:.6f} (Δ={change:+.6f})\")\n        \n        # Safety check with informative message\n        if iteration > 50 and abs(change) < 1e-10:\n            print(f\"WARNING: Change too small at iteration {iteration}\")\n            break\n    \n    print(f\"FAILED: No convergence after {max_iter} iterations\")\n    return current","position":{"start":{"line":747,"column":1},"end":{"line":776,"column":1}},"key":"MvBgJns2vB"},{"type":"heading","depth":3,"position":{"start":{"line":778,"column":1},"end":{"line":778,"column":1}},"children":[{"type":"text","value":"Using IPython Debugger","position":{"start":{"line":778,"column":1},"end":{"line":778,"column":1}},"key":"nqn6azlWDE"}],"identifier":"using-ipython-debugger","label":"Using IPython Debugger","html_id":"using-ipython-debugger","implicit":true,"key":"PUYRKpCDY4"},{"type":"code","lang":"python","value":"In [60]: def buggy_function(data):\n   ...:     result = []\n   ...:     for i in range(len(data)):\n   ...:         if data[i] > data[i+1]:  # Bug: goes past end!\n   ...:             result.append(data[i])\n   ...:     return result\n\nIn [61]: buggy_function([3, 1, 4, 1, 5])\n# IndexError!\n\nIn [62]: %debug\n> buggy_function()\n      3     for i in range(len(data)):\n----> 4         if data[i] > data[i+1]:\n      5             result.append(data[i])\n\nipdb> i\n4\nipdb> len(data)\n5\nipdb> # Aha! When i=4, i+1=5 is out of bounds!","position":{"start":{"line":780,"column":1},"end":{"line":802,"column":1}},"key":"zPW37C8Lve"},{"type":"heading","depth":2,"position":{"start":{"line":804,"column":1},"end":{"line":804,"column":1}},"children":[{"type":"text","value":"3.8 Optional: Bitwise Operations in Scientific Computing","position":{"start":{"line":804,"column":1},"end":{"line":804,"column":1}},"key":"wNHHQb7LJg"}],"identifier":"id-3-8-optional-bitwise-operations-in-scientific-computing","label":"3.8 Optional: Bitwise Operations in Scientific Computing","html_id":"id-3-8-optional-bitwise-operations-in-scientific-computing","implicit":true,"key":"lEbQJRNI3b"},{"type":"paragraph","position":{"start":{"line":806,"column":1},"end":{"line":806,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":806,"column":1},"end":{"line":806,"column":1}},"children":[{"type":"text","value":"This section is optional but included for completeness, as bitwise operations appear in instrument control, data compression, and FITS file handling.","position":{"start":{"line":806,"column":1},"end":{"line":806,"column":1}},"key":"a1jIe7UGQR"}],"key":"mUSSVNNgYt"}],"key":"vEXjxA5NOU"},{"type":"heading","depth":3,"position":{"start":{"line":808,"column":1},"end":{"line":808,"column":1}},"children":[{"type":"text","value":"When You Encounter Bitwise Operations","position":{"start":{"line":808,"column":1},"end":{"line":808,"column":1}},"key":"DqloqIVecN"}],"identifier":"when-you-encounter-bitwise-operations","label":"When You Encounter Bitwise Operations","html_id":"when-you-encounter-bitwise-operations","implicit":true,"key":"vWS1hZzz4f"},{"type":"code","lang":"python","value":"# Reading telescope status flags\nTRACKING = 0b0001  # Binary: 0001\nGUIDING  = 0b0010  # Binary: 0010  \nCOOLING  = 0b0100  # Binary: 0100\nEXPOSING = 0b1000  # Binary: 1000\n\nstatus = 0b0101  # Binary representation of status\n\n# Check specific flags\nis_tracking = bool(status & TRACKING)  # AND operation\nis_cooling = bool(status & COOLING)\n\n# Set a flag\nstatus |= EXPOSING  # OR operation to set bit\n\n# Clear a flag  \nstatus &= ~COOLING  # AND with NOT to clear bit\n\nprint(f\"Status: {status:04b}\")  # Binary formatting","position":{"start":{"line":810,"column":1},"end":{"line":830,"column":1}},"key":"Nwcozdfsap"},{"type":"heading","depth":3,"position":{"start":{"line":832,"column":1},"end":{"line":832,"column":1}},"children":[{"type":"text","value":"Practical Example: Packed Data","position":{"start":{"line":832,"column":1},"end":{"line":832,"column":1}},"key":"MlRDc6V2w1"}],"identifier":"practical-example-packed-data","label":"Practical Example: Packed Data","html_id":"practical-example-packed-data","implicit":true,"key":"dwLBZLMjnE"},{"type":"code","lang":"python","value":"def unpack_compressed_coords(packed):\n    \"\"\"\n    Some instruments pack x,y coordinates into single 32-bit integer.\n    Upper 16 bits = x, Lower 16 bits = y\n    \"\"\"\n    x = (packed >> 16) & 0xFFFF  # Shift right and mask\n    y = packed & 0xFFFF          # Mask lower bits\n    return x, y\n\npacked = 0x00640032  # x=100, y=50\nx, y = unpack_compressed_coords(packed)\nprint(f\"Unpacked: x={x}, y={y}\")","position":{"start":{"line":834,"column":1},"end":{"line":847,"column":1}},"key":"gpRRi2YUNd"},{"type":"heading","depth":2,"position":{"start":{"line":849,"column":1},"end":{"line":849,"column":1}},"children":[{"type":"text","value":"Practice Exercises","position":{"start":{"line":849,"column":1},"end":{"line":849,"column":1}},"key":"q9StqBonyN"}],"identifier":"practice-exercises","label":"Practice Exercises","html_id":"practice-exercises","implicit":true,"key":"U7aJGAEXWN"},{"type":"heading","depth":3,"position":{"start":{"line":851,"column":1},"end":{"line":851,"column":1}},"children":[{"type":"text","value":"Exercise 3.1: Robust Convergence Checker","position":{"start":{"line":851,"column":1},"end":{"line":851,"column":1}},"key":"W9GjJ4up2I"}],"identifier":"exercise-3-1-robust-convergence-checker","label":"Exercise 3.1: Robust Convergence Checker","html_id":"exercise-3-1-robust-convergence-checker","implicit":true,"key":"GHEy1OkYPO"},{"type":"code","lang":"python","value":"def robust_convergence_checker(history, tolerance, window=3):\n    \"\"\"\n    Check convergence using recent history, not just last two values.\n    \n    Args:\n        history: List of values from iterations\n        tolerance: Convergence threshold\n        window: Number of recent values to check\n        \n    Returns:\n        (converged, reason)\n    \n    Your implementation should:\n    1. Handle empty or short histories\n    2. Check if values are oscillating\n    3. Check if values are converging monotonically\n    4. Return informative reason string\n    \"\"\"\n    # Your code here\n    pass","position":{"start":{"line":853,"column":1},"end":{"line":874,"column":1}},"key":"xzhW09xQie"},{"type":"heading","depth":3,"position":{"start":{"line":876,"column":1},"end":{"line":876,"column":1}},"children":[{"type":"text","value":"Exercise 3.2: Adaptive Algorithm Design","position":{"start":{"line":876,"column":1},"end":{"line":876,"column":1}},"key":"qgVYG1hKjn"}],"identifier":"exercise-3-2-adaptive-algorithm-design","label":"Exercise 3.2: Adaptive Algorithm Design","html_id":"exercise-3-2-adaptive-algorithm-design","implicit":true,"key":"aRMMdaTQiB"},{"type":"code","lang":"python","value":"\"\"\"\nDesign pseudocode for an adaptive Monte Carlo sampler that:\n1. Starts with uniform sampling\n2. Identifies regions of high \"importance\" \n3. Focuses sampling in important regions\n4. Maintains some exploration of full space\n5. Stops when variance is below threshold\n\nWrite three levels of pseudocode refinement.\nThen implement in Python.\n\"\"\"","position":{"start":{"line":878,"column":1},"end":{"line":890,"column":1}},"key":"xs2g9PaGr5"},{"type":"heading","depth":3,"position":{"start":{"line":892,"column":1},"end":{"line":892,"column":1}},"children":[{"type":"text","value":"Exercise 3.3: Debug the Logic","position":{"start":{"line":892,"column":1},"end":{"line":892,"column":1}},"key":"qub917J2l3"}],"identifier":"exercise-3-3-debug-the-logic","label":"Exercise 3.3: Debug the Logic","html_id":"exercise-3-3-debug-the-logic","implicit":true,"key":"Dz1DnZQfJF"},{"type":"code","lang":"python","value":"def find_peak(data, threshold):\n    \"\"\"\n    This function should find peaks above threshold,\n    but it has multiple logic errors. Find and fix them.\n    \"\"\"\n    peaks = []\n    for i in range(len(data)):\n        # Check if current point is a peak\n        if data[i] > threshold:\n            if data[i] > data[i-1] and data[i] > data[i+1]:\n                peaks.append(i)\n    return peaks\n\n# Test: find_peak([1, 3, 2, 5, 1], 2)\n# Should return [1, 3] but crashes. Why?","position":{"start":{"line":894,"column":1},"end":{"line":910,"column":1}},"key":"GJ3u79DUc7"},{"type":"heading","depth":2,"position":{"start":{"line":912,"column":1},"end":{"line":912,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":912,"column":1},"end":{"line":912,"column":1}},"key":"TJMPAfaCrV"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"nX7bjkdSKr"},{"type":"paragraph","position":{"start":{"line":914,"column":1},"end":{"line":914,"column":1}},"children":[{"type":"text","value":"Pseudocode is not optional bureaucracy but essential algorithm design. Every hour spent on pseudocode saves many hours of debugging. The three-level refinement process reveals issues before they become bugs.","position":{"start":{"line":914,"column":1},"end":{"line":914,"column":1}},"key":"yw09wy47Fr"}],"key":"VNBeMtkq72"},{"type":"paragraph","position":{"start":{"line":916,"column":1},"end":{"line":916,"column":1}},"children":[{"type":"text","value":"Floating-point comparisons require defensive programming. Never use ","position":{"start":{"line":916,"column":1},"end":{"line":916,"column":1}},"key":"U2MGAuu4hi"},{"type":"inlineCode","value":"==","position":{"start":{"line":916,"column":1},"end":{"line":916,"column":1}},"key":"rhVnCwaL6c"},{"type":"text","value":" with floats. Always include tolerances and handle special values (inf, nan) explicitly.","position":{"start":{"line":916,"column":1},"end":{"line":916,"column":1}},"key":"BGYf0IOnx9"}],"key":"UVHRSTZDml"},{"type":"paragraph","position":{"start":{"line":918,"column":1},"end":{"line":918,"column":1}},"children":[{"type":"text","value":"Universal patterns appear throughout computational physics. The accumulator pattern, convergence pattern, and adaptive refinement pattern you learned here will appear in every project.","position":{"start":{"line":918,"column":1},"end":{"line":918,"column":1}},"key":"u2n7fMrdZk"}],"key":"nKxI377YQA"},{"type":"paragraph","position":{"start":{"line":920,"column":1},"end":{"line":920,"column":1}},"children":[{"type":"text","value":"Guard clauses and early returns prevent deep nesting and make code clearer. Handle special cases first, then focus on the main algorithm.","position":{"start":{"line":920,"column":1},"end":{"line":920,"column":1}},"key":"hdLay2h76H"}],"key":"zrOFHGSmEw"},{"type":"paragraph","position":{"start":{"line":922,"column":1},"end":{"line":922,"column":1}},"children":[{"type":"text","value":"List comprehensions are powerful but not always appropriate. Use them for simple transformations and filtering. Use explicit loops when logic is complex.","position":{"start":{"line":922,"column":1},"end":{"line":922,"column":1}},"key":"e3v0dsNA5l"}],"key":"cUDJeRlTp3"},{"type":"paragraph","position":{"start":{"line":924,"column":1},"end":{"line":924,"column":1}},"children":[{"type":"text","value":"Debugging logic errors requires systematic approaches. Strategic printing at decision points, using the debugger effectively, and testing edge cases are essential skills.","position":{"start":{"line":924,"column":1},"end":{"line":924,"column":1}},"key":"yNIf6OsOcE"}],"key":"FdurtbxE9f"},{"type":"heading","depth":2,"position":{"start":{"line":926,"column":1},"end":{"line":926,"column":1}},"children":[{"type":"text","value":"Quick Reference: Control Flow Functions and Patterns","position":{"start":{"line":926,"column":1},"end":{"line":926,"column":1}},"key":"qsArWG5go7"}],"identifier":"quick-reference-control-flow-functions-and-patterns","label":"Quick Reference: Control Flow Functions and Patterns","html_id":"quick-reference-control-flow-functions-and-patterns","implicit":true,"key":"khdOIO7OMZ"},{"type":"table","position":{"start":{"line":928,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"children":[{"type":"text","value":"Construct/Function","position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"key":"VPnPSukdQo"}],"key":"yr6CRvanzJ"},{"type":"tableCell","header":true,"position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"key":"Qls1ljC4kJ"}],"key":"GMPrwt4TVX"},{"type":"tableCell","header":true,"position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":928,"column":1},"end":{"line":928,"column":1}},"key":"iRCFdXDakL"}],"key":"kS8yZfN77d"}],"key":"g0oZfHeKGZ"},{"type":"tableRow","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"children":[{"type":"inlineCode","value":"if/elif/else","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"key":"biEY88GXmk"}],"key":"yFZdbfj6Ua"},{"type":"tableCell","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"children":[{"type":"text","value":"Conditional execution","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"key":"Bl3QRWCFDk"}],"key":"u9qGnPtkN5"},{"type":"tableCell","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"children":[{"type":"inlineCode","value":"if x > 0: ...","position":{"start":{"line":930,"column":1},"end":{"line":930,"column":1}},"key":"s04mSZFgjs"}],"key":"ebHY4dU1kv"}],"key":"BHmEeQWswD"},{"type":"tableRow","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"children":[{"type":"inlineCode","value":"for x in sequence","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"key":"i77M6OU0N4"}],"key":"Eot7j3qJQU"},{"type":"tableCell","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"children":[{"type":"text","value":"Iterate over items","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"key":"iQ7Rq7zc7J"}],"key":"eAh78UJDX1"},{"type":"tableCell","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"children":[{"type":"inlineCode","value":"for value in data:","position":{"start":{"line":931,"column":1},"end":{"line":931,"column":1}},"key":"hglZbYhOfS"}],"key":"TbgBCI0Uxa"}],"key":"GsvK9dlz99"},{"type":"tableRow","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"children":[{"type":"inlineCode","value":"for i in range(n)","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"key":"hechR7ktg1"}],"key":"ud18mUCuva"},{"type":"tableCell","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"children":[{"type":"text","value":"Count from 0 to n-1","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"key":"mwGPuf6mn1"}],"key":"Go8vmdCLsE"},{"type":"tableCell","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"children":[{"type":"inlineCode","value":"for i in range(10):","position":{"start":{"line":932,"column":1},"end":{"line":932,"column":1}},"key":"hFuk9DEwB4"}],"key":"PEBRZAxgMv"}],"key":"lXLv8pPBDa"},{"type":"tableRow","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"children":[{"type":"inlineCode","value":"while condition","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"key":"p9zzus69KR"}],"key":"jzU8MJixyW"},{"type":"tableCell","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"children":[{"type":"text","value":"Repeat while true","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"key":"rKJzRaV3UY"}],"key":"D13HcBFY0h"},{"type":"tableCell","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"children":[{"type":"inlineCode","value":"while error > tolerance:","position":{"start":{"line":933,"column":1},"end":{"line":933,"column":1}},"key":"HSxRspxP6b"}],"key":"DDNqsFB8dl"}],"key":"ihef0KiohO"},{"type":"tableRow","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"children":[{"type":"inlineCode","value":"break","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"key":"kPkdfD1QJL"}],"key":"oc1cMLrzbC"},{"type":"tableCell","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"children":[{"type":"text","value":"Exit loop early","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"key":"cITERUUhCH"}],"key":"MGeMWZob9w"},{"type":"tableCell","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"children":[{"type":"inlineCode","value":"if converged: break","position":{"start":{"line":934,"column":1},"end":{"line":934,"column":1}},"key":"OA5hPIxgrs"}],"key":"Ib0YMBMLhh"}],"key":"IT88uyV28O"},{"type":"tableRow","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"children":[{"type":"inlineCode","value":"continue","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"key":"zeIGTSbgUT"}],"key":"TXXx7BTfN8"},{"type":"tableCell","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"children":[{"type":"text","value":"Skip to next iteration","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"key":"tXSL9uTZI4"}],"key":"qj2XkAbcIS"},{"type":"tableCell","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"children":[{"type":"inlineCode","value":"if invalid: continue","position":{"start":{"line":935,"column":1},"end":{"line":935,"column":1}},"key":"I1rWOFRJ2d"}],"key":"UkGpeGBsiN"}],"key":"ZhaXtwNt6j"},{"type":"tableRow","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"children":[{"type":"inlineCode","value":"enumerate()","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"key":"QdoegRyA9r"}],"key":"CzTfX8IMjI"},{"type":"tableCell","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"children":[{"type":"text","value":"Get index and value","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"key":"gZ6b2AF1oL"}],"key":"lcwParnOnY"},{"type":"tableCell","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"children":[{"type":"inlineCode","value":"for i, x in enumerate(data):","position":{"start":{"line":936,"column":1},"end":{"line":936,"column":1}},"key":"qaqkYUPxCS"}],"key":"YKwhBrluFE"}],"key":"Z1MXAddyXX"},{"type":"tableRow","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"children":[{"type":"inlineCode","value":"zip()","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"key":"IDU8QrqGG8"}],"key":"hJtMdDXeDY"},{"type":"tableCell","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"children":[{"type":"text","value":"Parallel iteration","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"key":"EpPnw2eib9"}],"key":"GEux8NaUBh"},{"type":"tableCell","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"children":[{"type":"inlineCode","value":"for x, y in zip(xs, ys):","position":{"start":{"line":937,"column":1},"end":{"line":937,"column":1}},"key":"nzFu7FOy7a"}],"key":"dyTQITCgCm"}],"key":"r1K032hJPs"},{"type":"tableRow","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"children":[{"type":"inlineCode","value":"all()","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"key":"C2ng7fRTdb"}],"key":"ynhqCBxhe5"},{"type":"tableCell","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"children":[{"type":"text","value":"Check if all are true","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"key":"T0eyOeDnfo"}],"key":"lX0AJOH4YS"},{"type":"tableCell","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"children":[{"type":"inlineCode","value":"if all(x > 0 for x in data):","position":{"start":{"line":938,"column":1},"end":{"line":938,"column":1}},"key":"KsqyoUDtEh"}],"key":"Yg6eWdVVZy"}],"key":"zq8r08zpOV"},{"type":"tableRow","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"children":[{"type":"inlineCode","value":"any()","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"key":"LAgdk01dKZ"}],"key":"nmbVCkizmr"},{"type":"tableCell","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"children":[{"type":"text","value":"Check if any is true","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"key":"xMv0VccKQD"}],"key":"Q4o0NomJgv"},{"type":"tableCell","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"children":[{"type":"inlineCode","value":"if any(x < 0 for x in data):","position":{"start":{"line":939,"column":1},"end":{"line":939,"column":1}},"key":"OtvI7lCH9I"}],"key":"g405naYnKK"}],"key":"Qzy9BN3T5F"},{"type":"tableRow","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"children":[{"type":"inlineCode","value":"[expr for x in seq]","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"key":"j9bt6zEmXZ"}],"key":"XWlgcEjlgg"},{"type":"tableCell","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"children":[{"type":"text","value":"List comprehension","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"key":"oOdNm1uknw"}],"key":"KLkgJfFSWY"},{"type":"tableCell","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"children":[{"type":"inlineCode","value":"[x**2 for x in range(10)]","position":{"start":{"line":940,"column":1},"end":{"line":940,"column":1}},"key":"GMFwkwZjJN"}],"key":"jnmX5G9JOl"}],"key":"K63zafIrpH"},{"type":"tableRow","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"children":[{"type":"inlineCode","value":"[... if condition]","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"key":"kW3skPVOO1"}],"key":"V2kTEBaCVi"},{"type":"tableCell","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"children":[{"type":"text","value":"Filtered comprehension","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"key":"Cr8ubVmHCf"}],"key":"WSAOqS3eGD"},{"type":"tableCell","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"children":[{"type":"inlineCode","value":"[x for x in data if x > 0]","position":{"start":{"line":941,"column":1},"end":{"line":941,"column":1}},"key":"YcP9PhiGSJ"}],"key":"LnG62JNyLv"}],"key":"sVx4QlLtBl"},{"type":"tableRow","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"children":[{"type":"inlineCode","value":"range(start, stop, step)","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"key":"BAp5d2IhNZ"}],"key":"r9RlG2L8TX"},{"type":"tableCell","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"children":[{"type":"text","value":"Generate sequence","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"key":"UDxHXM1At5"}],"key":"tN92Ej0zjt"},{"type":"tableCell","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"children":[{"type":"inlineCode","value":"range(0, 10, 2)","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"key":"SmhqLGA7sF"},{"type":"text","value":" → 0,2,4,6,8","position":{"start":{"line":942,"column":1},"end":{"line":942,"column":1}},"key":"MLhzYpmzku"}],"key":"EuqFkWUF9P"}],"key":"PswQPhvFb5"},{"type":"tableRow","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"children":[{"type":"inlineCode","value":"math.isclose()","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"key":"eTBErK0Qgi"}],"key":"rtYef43Yz5"},{"type":"tableCell","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"children":[{"type":"text","value":"Safe float comparison","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"key":"PEoK3gZFtz"}],"key":"vRdcTchEeC"},{"type":"tableCell","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"children":[{"type":"inlineCode","value":"if math.isclose(a, b):","position":{"start":{"line":943,"column":1},"end":{"line":943,"column":1}},"key":"f1d4CNekWy"}],"key":"g7t4O9hSbH"}],"key":"Y7CxWmWCsM"},{"type":"tableRow","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"inlineCode","value":"math.isfinite()","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"key":"BisLCIDi0n"}],"key":"AFv7WwOHo0"},{"type":"tableCell","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"text","value":"Check not inf/nan","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"key":"dNFUjz1Qd9"}],"key":"XZPjiEBkIj"},{"type":"tableCell","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"children":[{"type":"inlineCode","value":"if math.isfinite(result):","position":{"start":{"line":944,"column":1},"end":{"line":944,"column":1}},"key":"bS2VylJKcY"}],"key":"DeaIYihJEL"}],"key":"zHxyYZ3GQy"}],"key":"b0QaYxfKK0"},{"type":"heading","depth":3,"position":{"start":{"line":946,"column":1},"end":{"line":946,"column":1}},"children":[{"type":"text","value":"Common Patterns Reference","position":{"start":{"line":946,"column":1},"end":{"line":946,"column":1}},"key":"VdXIMeIti1"}],"identifier":"common-patterns-reference","label":"Common Patterns Reference","html_id":"common-patterns-reference","implicit":true,"key":"xmdW0kM64V"},{"type":"table","position":{"start":{"line":948,"column":1},"end":{"line":956,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"children":[{"type":"text","value":"Pattern","position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"key":"T4aeS571xR"}],"key":"bBIjx9QGVV"},{"type":"tableCell","header":true,"position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"children":[{"type":"text","value":"Purpose","position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"key":"J45fn6ZrSp"}],"key":"OShNR6OKAS"},{"type":"tableCell","header":true,"position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"children":[{"type":"text","value":"Structure","position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"key":"qKZ9vrbs25"}],"key":"EtARhd8YOh"}],"key":"DSqUOAEkPY"},{"type":"tableRow","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"children":[{"type":"text","value":"Accumulator","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"key":"FvgQwkTnBI"}],"key":"ObE4hQXkUp"},{"type":"tableCell","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"children":[{"type":"text","value":"Aggregate values","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"key":"OJIU4KwQIs"}],"key":"t9jwnfoQQq"},{"type":"tableCell","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"children":[{"type":"inlineCode","value":"total = 0; for x in data: total += x","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"key":"C4ZPJOlVoQ"}],"key":"HxaqJCPE2N"}],"key":"LCdevdVHRK"},{"type":"tableRow","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"children":[{"type":"text","value":"Filter","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"key":"uAASaXbMq4"}],"key":"is3w5an5zR"},{"type":"tableCell","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"children":[{"type":"text","value":"Select subset","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"key":"kRwdpzsVcz"}],"key":"cahhZAy9vV"},{"type":"tableCell","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"children":[{"type":"inlineCode","value":"[x for x in data if condition(x)]","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"key":"bJ8o5DHUSa"}],"key":"uUn37YSfSB"}],"key":"mVTjlMYTqt"},{"type":"tableRow","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"text","value":"Map","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"nLTvvCJxrn"}],"key":"Y84mrrr9kh"},{"type":"tableCell","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"text","value":"Transform all","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"Crfvy3lCu5"}],"key":"QgFDB9BmY4"},{"type":"tableCell","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"inlineCode","value":"[f(x) for x in data]","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"mOM9RtzHTe"}],"key":"GKAkN3LZ33"}],"key":"Ttosfmj4y1"},{"type":"tableRow","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"children":[{"type":"text","value":"Search","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"key":"OIAXmDDICi"}],"key":"bqxXdb2XlV"},{"type":"tableCell","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"children":[{"type":"text","value":"Find first match","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"key":"HdZfSwc18D"}],"key":"jJg7atUYPL"},{"type":"tableCell","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"children":[{"type":"inlineCode","value":"for x in data: if condition(x): return x","position":{"start":{"line":953,"column":1},"end":{"line":953,"column":1}},"key":"Sgadp20N8y"}],"key":"HMunXpZtbh"}],"key":"WxHgTd34r1"},{"type":"tableRow","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"children":[{"type":"text","value":"Convergence","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"key":"hfawZhUybn"}],"key":"F4ze06blaX"},{"type":"tableCell","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"children":[{"type":"text","value":"Iterate to solution","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"key":"PcNh53Z6Ml"}],"key":"tOoolStkly"},{"type":"tableCell","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"children":[{"type":"inlineCode","value":"while not converged and iter < max: ...","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"key":"JxRNOKWR9j"}],"key":"pPi2bxofTF"}],"key":"Vl2P9dWyWF"},{"type":"tableRow","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"children":[{"type":"text","value":"Sliding window","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"key":"wDM8cvw1ic"}],"key":"LixnKPbRw9"},{"type":"tableCell","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"children":[{"type":"text","value":"Local operations","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"key":"wSHJ7zcFlN"}],"key":"Nr9EcoDBvG"},{"type":"tableCell","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"children":[{"type":"inlineCode","value":"for i in range(len(data)-window+1): ...","position":{"start":{"line":955,"column":1},"end":{"line":955,"column":1}},"key":"oAWu2sDymX"}],"key":"Qm6fRW2oya"}],"key":"zEHeie32y7"},{"type":"tableRow","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"children":[{"type":"text","value":"Guard clause","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"key":"l7ogfV3zAI"}],"key":"uEfzFArUGl"},{"type":"tableCell","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"children":[{"type":"text","value":"Handle special cases","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"key":"tmiRQl5dPi"}],"key":"qVOXChpj7S"},{"type":"tableCell","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"children":[{"type":"inlineCode","value":"if bad_input: return None","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"key":"vb7up7U5ql"}],"key":"MvAPwTNPrB"}],"key":"fJ1r74WQDC"}],"key":"zQFXzWlk1q"},{"type":"heading","depth":2,"position":{"start":{"line":958,"column":1},"end":{"line":958,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":958,"column":1},"end":{"line":958,"column":1}},"key":"T6B8AhW5Sx"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview","implicit":true,"key":"KwFjumcA2c"},{"type":"paragraph","position":{"start":{"line":960,"column":1},"end":{"line":960,"column":1}},"children":[{"type":"text","value":"Now that you can control program flow and implement algorithms systematically, Chapter 4 will explore how to organize data efficiently. You’ll learn when to use lists versus dictionaries versus sets, understand the performance implications of each choice, and see how data structure selection can make the difference between algorithms that finish in seconds versus hours. The control flow patterns you’ve mastered here will operate on the data structures you’ll learn next, combining to create efficient scientific algorithms.","position":{"start":{"line":960,"column":1},"end":{"line":960,"column":1}},"key":"MGf5u6dS6v"}],"key":"bWTaD6prBs"}],"key":"hmBA5GvRJi"}],"key":"dxsGEswZUj"},"references":{"cite":{"order":[],"data":{}}}}