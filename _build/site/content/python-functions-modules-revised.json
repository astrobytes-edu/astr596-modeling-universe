{"version":2,"kind":"Article","sha256":"ce59f56ac1f8c279f523bdaa76c1d07bec8db1d722069ef91b0ab62711eb96dc","slug":"python-functions-modules-revised","location":"/03-scientific-computing-with-python/01-python-fundamentals/05-python-functions-modules-REVISED.md","dependencies":[],"frontmatter":{"title":"Chapter 5: Functions & Modules - Building Reusable Scientific Code","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Anna Rosen","given":"Anna","family":"Rosen"},"name":"Anna Rosen","orcid":"0000-0003-4423-0660","email":"alrosen@sdsu.edu","affiliations":["San Diego State University"],"id":"contributors-myst-generated-uid-0","corresponding":true}],"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/astrobytes-edu/astr596-modeling-universe","subject":"Modeling the Universe","venue":{"title":"ASTR 596 - Fall 2025","url":"https://www.anna-rosen.com"},"keywords":["computational astrophysics","python","numerical methods","machine learning","monte carlo","neural networks","radiative transfer","bayesian inference","JAX"],"affiliations":[{"id":"San Diego State University","name":"San Diego State University"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/astrobytes-edu/astr596-modeling-universe/blob/main/03-scientific-computing-with-python/01-python-fundamentals/05-python-functions-modules-REVISED.md","exports":[{"format":"md","filename":"05-python-functions-modules-REVISED.md","url":"/05-python-functions--0543545fc16c0972c0b020fb858e20a7.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"u1NbDJhBP8"}],"identifier":"learning-objectives","label":"Learning Objectives","html_id":"learning-objectives","implicit":true,"key":"TwXNj5zLTx"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By the end of this chapter, you will be able to:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"EdDeteErOk"}],"key":"hTwQWtlmc4"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Design functions as clear contracts with well-defined inputs and outputs","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZPT1ojGkAJ"}],"key":"oE106IsuYZ"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Understand Python’s scope rules and how they affect variable access","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ttLWxPAK7C"}],"key":"t1QX4AgUdH"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Write functions with flexible parameter handling using *args and **kwargs","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"O1HDTjOM6s"}],"key":"rzu3EBfuRJ"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Apply functional programming patterns like map, filter, and lambda functions","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"MaucS9vVCY"}],"key":"uIlL0RHHZQ"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Create and import your own modules for code organization","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"NxjAeCI6n9"}],"key":"n4LH2EP9Mw"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Document functions properly using docstrings","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"qyNGQUi6fq"}],"key":"lS9WMZmCF6"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Recognize and avoid common function-related bugs","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"u6D64UKgqS"}],"key":"RtdpUacHy2"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Build modular, reusable code for scientific applications","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"wIh1eaGsKf"}],"key":"EjCUcilLhz"}],"key":"XIXgs8UhIi"},{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Prerequisites Check","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"DpSuaFLzCk"}],"identifier":"prerequisites-check","label":"Prerequisites Check","html_id":"prerequisites-check","implicit":true,"key":"TPysa88yyX"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Before starting this chapter, verify you can:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"qTIfFCYaPH"}],"key":"Ku1HWpKr0l"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"✓ Write loops and conditionals fluently (Chapter 3)","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"e5JzlIlbdf"}],"key":"fqRB4gasR9"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"✓ Choose appropriate data structures for different tasks (Chapter 4)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"lJzk2HuHE5"}],"key":"o0AgHSC0Rt"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"✓ Handle floating-point arithmetic safely (Chapter 2)","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"YiiPC2f6gY"}],"key":"YvzySCkJKI"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"✓ Use IPython for testing and timing code (Chapter 1)","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"P4zqfcSkh6"}],"key":"Q5c4Yjz6Jk"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"✓ Design algorithms with pseudocode (Chapter 3)","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"IHkFOCWEJj"}],"key":"u8YnPXsouo"}],"key":"GkK1RkoQ3F"}],"key":"htU5TN5Db3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Quick prerequisite check\ndata = [2.5, 3.7, 1.2, 4.8]\nresult = []\nfor value in data:\n    if value > 2.0:\n        result.append(value * 2)\nprint(f\"If you got {result}, you're ready!\")\n# Expected: [5.0, 7.4, 9.6]","key":"sVXS6g8cms"},{"type":"output","id":"ITMYnrDqFrLXTuxKcrCN5","data":[],"key":"bgzFlEEtzc"}],"key":"iyE4aiRK1D"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Chapter Overview","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"Z3eVKznS6c"}],"identifier":"chapter-overview","label":"Chapter Overview","html_id":"chapter-overview","implicit":true,"key":"gt5PLZS7b6"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Functions are the fundamental building blocks of organized code. Without functions, you’d be copying and pasting the same code repeatedly, making bugs harder to fix and improvements impossible to maintain. But functions are more than just a way to avoid repetition—they’re how we create abstractions, manage complexity, and build reliable software. In astronomy, every data reduction pipeline, every model fitting routine, and every simulation starts with well-designed functions.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"L7eoQobols"}],"key":"zSMyMnLOYc"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"This chapter teaches you to think about functions as contracts between different parts of your code. When you write a function that converts temperature units or calculates stellar magnitudes, you’re creating a promise: given valid input, the function will reliably return the correct output. This contract mindset helps you write functions that others (including future you) can trust and use effectively.","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"yX2B9MTPuj"}],"key":"kirK2WLGdJ"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"We’ll explore Python’s scope rules, which determine where variables can be accessed, and learn how seemingly simple concepts like default arguments can create subtle bugs that have plagued even major astronomical software packages. You’ll discover how Python’s flexible parameter system enables powerful interfaces, and how functional programming concepts prepare you for modern scientific computing frameworks like JAX. By the end, you’ll be organizing your code into modules that can be shared, tested, and maintained professionally—essential skills for collaborative astronomical research.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Q2CyU3FrAG"}],"key":"Ngiwb56BRq"},{"type":"heading","depth":2,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"5.1 Defining Functions: The Basics","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"PGc0j8FnmR"}],"identifier":"id-5-1-defining-functions-the-basics","label":"5.1 Defining Functions: The Basics","html_id":"id-5-1-defining-functions-the-basics","implicit":true,"key":"B45cRAzbSS"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"A function encapsulates a piece of logic that transforms inputs into outputs. Think of a function as a machine: you feed it raw materials (inputs), it performs some process (the function body), and it produces a product (output). In astronomical terms, a function might take raw CCD counts and return calibrated fluxes, or take orbital elements and return positions—just like the modular design of telescope control systems where each subsystem (tracking, focusing, guiding) operates as an independent function.","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"wqC9N3O0C5"}],"key":"PUDnZMZZ8f"},{"type":"paragraph","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Here’s something exciting: every function you write can potentially be used by astronomers worldwide. The same function that processes your data tonight could analyze observations from Keck, VLT, or even JWST tomorrow. Let’s see how this works!","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"QW0Z4T2JKD"}],"key":"d1o7xqIRKS"},{"type":"heading","depth":3,"position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"Your First Function","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"WXFZunE0lO"}],"identifier":"your-first-function","label":"Your First Function","html_id":"your-first-function","implicit":true,"key":"yCO9YCzT9t"},{"type":"paragraph","position":{"start":{"line":51,"column":1},"end":{"line":51,"column":1}},"children":[{"type":"text","value":"Let’s start with a function every astronomer needs—converting between magnitude and flux. This single function can process data from any telescope in the world!","position":{"start":{"line":51,"column":1},"end":{"line":51,"column":1}},"key":"g4sGRS1QW1"}],"key":"CTsCtNfYzm"}],"key":"bH1Fo85g6X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def magnitude_to_flux(magnitude, zero_point=0.0):\n    \"\"\"\n    Convert astronomical magnitude to flux.\n    \n    Uses the relation: m = -2.5 * log10(flux) + zero_point\n    Therefore: flux = 10^((zero_point - m) / 2.5)\n    \"\"\"\n    flux = 10 ** ((zero_point - magnitude) / 2.5)\n    return flux\n\n# Using the function\nvega_mag = 0.0  # Vega's magnitude in V band\nvega_flux = magnitude_to_flux(vega_mag)\nprint(f\"Vega flux (m=0): {vega_flux:.2e} [arbitrary units]\")\n\n# Fainter star\nstar_flux = magnitude_to_flux(5.0)  # 5th magnitude star\nprint(f\"5th mag star: {star_flux:.2e} [100x fainter than Vega]\")","key":"sTzO62xDbO"},{"type":"output","id":"EntiAOvufDqJgXvaEnu9f","data":[],"key":"QBtIgBQmfo"}],"key":"A3OIlrxaZX"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"strong","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Congratulations!","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"up739LvLKN"}],"key":"HzATlKvyqI"},{"type":"text","value":" You just wrote code that could process data from any telescope in the world! This same function works whether you’re analyzing Hubble observations or data from your backyard telescope. Let’s break down exactly how it works:","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"mPkFPUP07v"}],"key":"u0k9W5cNbi"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":76,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"strong","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"inlineCode","value":"def","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"QsA0ukgcqC"},{"type":"text","value":" keyword","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"V2aIVpMW6P"}],"key":"clqNMV0hWf"},{"type":"text","value":": Tells Python we’re defining a function","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"ZuIPoQO4CP"}],"key":"qzNpvEiU5k"},{"type":"listItem","spread":true,"position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"strong","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"Function name","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"WR1UwQuxAm"}],"key":"hkY0LyNKwF"},{"type":"text","value":" (","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"MzqufitvMn"},{"type":"inlineCode","value":"magnitude_to_flux","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"QNsJ2s6fyk"},{"type":"text","value":"): Follows snake_case convention, describes what it does","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"Qj6WjG4BeC"}],"key":"rPPkZvl4cE"},{"type":"listItem","spread":true,"position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"strong","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Parameters","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"oUNSD9ia7h"}],"key":"unbGdFe0h1"},{"type":"text","value":" (","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"dOZhvX5A9H"},{"type":"inlineCode","value":"magnitude, zero_point=0.0","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"hqCTGAzJst"},{"type":"text","value":"): Variables that receive values when function is called","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"FNuM1rx9kq"}],"key":"Z8ffOrm3qF"},{"type":"listItem","spread":true,"position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"children":[{"type":"strong","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"children":[{"type":"text","value":"Docstring","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"y0h5338Lod"}],"key":"mhUsmT89x1"},{"type":"text","value":": Brief description of what the function does (always include this!)","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"DPbEmTrDq8"}],"key":"xsovFt5GYt"},{"type":"listItem","spread":true,"position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"strong","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Function body","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"xKVpyLBj72"}],"key":"Hx0AKSI0vF"},{"type":"text","value":": Indented code that does the actual work","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"FOL4OqyUjh"}],"key":"eStKYGyAoU"},{"type":"listItem","spread":true,"position":{"start":{"line":81,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"strong","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"inlineCode","value":"return","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"YKC3MWoa9O"},{"type":"text","value":" statement","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"HkYLkAriXv"}],"key":"PfIJrrDLcR"},{"type":"text","value":": Sends a value back to whoever called the function","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"RBLCoYRzaK"}],"key":"PLhdcNB5r8"}],"key":"Epj06LfWh9"},{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"When Python executes ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"g5oovCmYpw"},{"type":"inlineCode","value":"magnitude_to_flux(5.0)","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"xVBvtBgVCv"},{"type":"text","value":", it creates a temporary namespace where ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"StNiyjFJt6"},{"type":"inlineCode","value":"magnitude = 5.0","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"gZDLh5NAQ8"},{"type":"text","value":", runs the function body, and returns the result. But here’s something to consider: each function call has a tiny overhead (creating that namespace, jumping to the function, returning). For a single calculation, it’s negligible—about 0.1 microseconds. But if you’re calling this function millions of times in a loop processing a large catalog, that overhead adds up. We’ll explore this more as we build toward vectorized operations!","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"NHQ0Yfqpu5"}],"key":"R3R1QXiYX1"},{"type":"heading","depth":3,"position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"key":"UMBvuJqge7"},{"type":"strong","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"children":[{"type":"text","value":"Check Your Understanding #1","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"key":"QaAONtcqZT"}],"key":"aVdTRtNN7x"}],"identifier":"id-check-your-understanding-1","label":"🔍 Check Your Understanding #1","html_id":"id-check-your-understanding-1","implicit":true,"key":"N3HOycGLNe"},{"type":"paragraph","position":{"start":{"line":87,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"text","value":"What will this code print?","position":{"start":{"line":87,"column":1},"end":{"line":87,"column":1}},"key":"ZZo051W1qJ"}],"key":"yxTvCzB3XG"},{"type":"code","lang":"python","value":"def process_observation(counts):\n    dark_subtracted = counts - 100\n    # Oops, forgot the return statement!\n\nsignal = process_observation(1500)\nprint(f\"Processed signal: {signal}\")","position":{"start":{"line":89,"column":1},"end":{"line":96,"column":1}},"key":"kLIJhwsZjd"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"vOONCfQ22g"}],"key":"oxNo10AuyL"},{"type":"paragraph","children":[{"type":"text","value":"It prints ","key":"l5UgmiHgJj"},{"type":"inlineCode","value":"Processed signal: None","key":"vP8s3k5kjt"},{"type":"text","value":". The function calculates ","key":"ak9HFYdXpp"},{"type":"inlineCode","value":"dark_subtracted","key":"JzTgpgzhHj"},{"type":"text","value":" but doesn’t return it. Without an explicit ","key":"QtavhE2eO1"},{"type":"inlineCode","value":"return","key":"MKOcNDRSmQ"},{"type":"text","value":" statement, Python functions return ","key":"FXhvoEd3pM"},{"type":"inlineCode","value":"None","key":"qWTaJhgNbP"},{"type":"text","value":". This is a common bug in data reduction scripts!","key":"PasP38rtyX"}],"key":"im4zFRuZeA"},{"type":"paragraph","children":[{"type":"text","value":"To fix it:","key":"i7b8W4UJTb"}],"key":"EK6kD7Nkfy"},{"type":"code","lang":"python","meta":null,"value":"def process_observation(counts):\n    dark_subtracted = counts - 100\n    return dark_subtracted  # Now it returns the value","key":"QVxIMBU1pt"}],"key":"M8qEwfxeeL"},{"type":"heading","depth":3,"position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"Functions Without Return Values","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"T0iBkXbEuN"}],"identifier":"functions-without-return-values","label":"Functions Without Return Values","html_id":"functions-without-return-values","implicit":true,"key":"DU24Fohj1R"},{"type":"paragraph","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"children":[{"type":"text","value":"Not all functions return values. Some perform actions like saving data or updating plots:","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"bIwUOYMNwk"}],"key":"fgpr0Q2V0K"}],"key":"Ul8MxO5oSh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def report_observation(object_name, magnitude, error):\n    \"\"\"Report observation in standard format.\"\"\"\n    if error > 0.5:\n        quality = \"poor\"\n    elif error > 0.1:\n        quality = \"fair\"\n    else:\n        quality = \"good\"\n    \n    print(f\"{object_name}: {magnitude:.2f} ± {error:.2f} mag ({quality})\")\n    # No return statement - returns None implicitly\n\n# Report some variable star observations\nreport_observation(\"RR Lyrae\", 7.45, 0.03)\nreport_observation(\"Mira\", 3.21, 0.15)\nreport_observation(\"T Tauri\", 10.2, 0.8)","key":"OXn4Y4iXsq"},{"type":"output","id":"ZYHCkaEIjiI1qbJHXG88j","data":[],"key":"YAY5lVomUw"}],"key":"F3GZrwBXkt"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"BDxpiyjwD7"},{"type":"strong","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"Why This Matters: Pipeline Building","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"iTDHqF68z7"}],"key":"wln0iXfay6"}],"identifier":"id-why-this-matters-pipeline-building","label":"🌟 Why This Matters: Pipeline Building","html_id":"id-why-this-matters-pipeline-building","implicit":true,"key":"x7CzWCjLIS"},{"type":"paragraph","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"In astronomical data processing, functions form pipelines where each step transforms the data:","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"upmLQ09ty0"}],"key":"ZUqL7orIrR"},{"type":"code","lang":"python","value":"raw_image → bias_subtract() → flat_field() → cosmic_ray_removal() → extract_spectrum()","position":{"start":{"line":139,"column":1},"end":{"line":141,"column":1}},"key":"w7hOxfRsn5"},{"type":"paragraph","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"text","value":"Each function in the pipeline has a clear responsibility. When your spectral extraction looks wrong, you can test each function independently to find the problem. Without functions, you’d have one massive script where a bug anywhere could affect everything—a debugging nightmare that has delayed many publications!","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"xaqXjKIEBi"}],"key":"oJ089PBgAg"},{"type":"heading","depth":3,"position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"qO0oNSdkhy"},{"type":"strong","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Why This Matters: The Hubble Space Telescope Mirror Disaster","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"unPlLvopeS"}],"key":"SyhOIDb3MO"}],"identifier":"id-why-this-matters-the-hubble-space-telescope-mirror-disaster","label":"🌟 Why This Matters: The Hubble Space Telescope Mirror Disaster","html_id":"id-why-this-matters-the-hubble-space-telescope-mirror-disaster","implicit":true,"key":"ZDT5rGMEcC"},{"type":"paragraph","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"text","value":"In 1990, a simple function parameter error cost NASA $1.5 billion. The Hubble Space Telescope’s primary mirror was ground to the wrong shape because a testing device was assembled incorrectly. The core issue? A function that calculated the mirror’s curvature used a parameter (the null corrector spacing) that was off by 2.2mm.","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"key":"HUo1bKGsvD"}],"key":"L77wKkXjeZ"},{"type":"code","lang":"python","value":"# Simplified version of what went wrong\ndef calculate_mirror_curve(focal_length, corrector_spacing=1.358):  # Wrong default!\n    # Should have been 1.3802\n    curve = focal_length / (2 * corrector_spacing)\n    return curve","position":{"start":{"line":149,"column":1},"end":{"line":155,"column":1}},"key":"wHuKYk0E9Y"},{"type":"paragraph","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"This single parameter error went undetected through multiple tests because the function was never validated with independent measurements. The lesson: always validate function parameters against multiple sources, especially when millions (or billions) of dollars are at stake!","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"RnvzxdZwd9"}],"key":"kz4Q873TEv"},{"type":"heading","depth":3,"position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"children":[{"type":"text","value":"Returning Multiple Values","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"key":"lZktqTXxMP"}],"identifier":"returning-multiple-values","label":"Returning Multiple Values","html_id":"returning-multiple-values","implicit":true,"key":"gp5M9srcrp"},{"type":"paragraph","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"text","value":"Python functions can return multiple values using tuples—perfect for astronomical calculations that produce related results:","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"e4Vyhd7Qr3"}],"key":"cjb2jKKX0G"}],"key":"WGmndtRIUs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def analyze_light_curve(times, magnitudes):\n    \"\"\"\n    Calculate basic light curve statistics.\n    \n    Returns:\n        mean_mag, amplitude, period_guess\n    \"\"\"\n    import numpy as np\n    \n    mean_mag = np.mean(magnitudes)\n    amplitude = np.max(magnitudes) - np.min(magnitudes)\n    \n    # Simple period estimate (time between similar magnitudes)\n    # Real period finding is much more sophisticated!\n    if len(times) > 10:\n        period_guess = 2 * (times[-1] - times[0]) / len(times)\n    else:\n        period_guess = None\n    \n    return mean_mag, amplitude, period_guess\n\n# Simulated RR Lyrae data\nimport numpy as np\ntimes = np.linspace(0, 2, 50)\nmags = 8.0 + 0.5 * np.sin(2 * np.pi * times / 0.6)\n\nmean, amp, period = analyze_light_curve(times, mags)\nprint(f\"Mean magnitude: {mean:.2f}\")\nprint(f\"Amplitude: {amp:.2f} mag\")\nprint(f\"Period estimate: {period:.2f} days\" if period else \"Need more data\")","key":"bhMMcuOgxt"},{"type":"output","id":"Rxn1n5-W1GroBzHcsxIkX","data":[],"key":"eng74D0V1E"}],"key":"kds6rvzJIC"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":196,"column":1},"end":{"line":196,"column":1}},"children":[{"type":"text","value":"The Design Process: From Problem to Function","position":{"start":{"line":196,"column":1},"end":{"line":196,"column":1}},"key":"ScAVO5ZjJI"}],"identifier":"the-design-process-from-problem-to-function","label":"The Design Process: From Problem to Function","html_id":"the-design-process-from-problem-to-function","implicit":true,"key":"YM6lI2hRDM"},{"type":"paragraph","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Before writing any function, design it first. This prevents the common mistake of coding yourself into a corner—something that happens often when reducing complex astronomical data.","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"DDrm1rWecY"}],"key":"KBtMnBt8YE"}],"key":"ebyxcGXQhD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\"\"\"\nDESIGN: Function to validate photometry measurements\n\nPURPOSE: Ensure photometric measurements are physically reasonable\nINPUT: magnitude, error, airmass\nOUTPUT: boolean (True if valid)\nCHECKS:\n    - Magnitude in reasonable range (not saturated or too faint)\n    - Error is positive and reasonable\n    - Airmass is physical (>= 1.0)\n\"\"\"\n\ndef validate_photometry(magnitude, error, airmass):\n    \"\"\"\n    Validate photometric measurement for quality.\n    \n    Parameters\n    ----------\n    magnitude : float\n        Measured magnitude\n    error : float\n        Magnitude uncertainty  \n    airmass : float\n        Atmospheric airmass during observation\n        \n    Returns\n    -------\n    bool\n        True if measurement passes all quality checks\n    \"\"\"\n    # Check magnitude range (typical CCD limits)\n    if magnitude < -1 or magnitude > 25:\n        return False\n    \n    # Check error is positive and reasonable\n    if error <= 0 or error > 1.0:\n        return False\n    \n    # Check airmass is physical\n    if airmass < 1.0 or airmass > 3.0:\n        return False\n    \n    return True\n\n# Test with various measurements\ntest_cases = [\n    (15.3, 0.02, 1.2),  # Good measurement\n    (30.0, 0.05, 1.1),  # Too faint\n    (10.5, -0.1, 1.5),  # Negative error\n    (12.0, 0.03, 0.8),  # Impossible airmass\n]\n\nfor mag, err, am in test_cases:\n    valid = validate_photometry(mag, err, am)\n    print(f\"m={mag:5.1f}, σ={err:5.2f}, X={am:.1f} → {'Valid' if valid else 'Invalid'}\")","key":"grTXAJ8PRq"},{"type":"output","id":"OoHNHF1cxJJKsGnFaCwPs","data":[],"key":"zxxPC6HdZ4"}],"key":"we0oaFi9lb"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":258,"column":1},"end":{"line":258,"column":1}},"children":[{"type":"text","value":"💡 ","position":{"start":{"line":258,"column":1},"end":{"line":258,"column":1}},"key":"M57gCWLnDe"},{"type":"strong","position":{"start":{"line":258,"column":1},"end":{"line":258,"column":1}},"children":[{"type":"text","value":"Computational Thinking: Function Contract Design","position":{"start":{"line":258,"column":1},"end":{"line":258,"column":1}},"key":"HjEK9Oc6wm"}],"key":"GyXvdGRL9E"}],"identifier":"id-computational-thinking-function-contract-design","label":"💡 Computational Thinking: Function Contract Design","html_id":"id-computational-thinking-function-contract-design","implicit":true,"key":"HSnjCN8uIY"},{"type":"paragraph","position":{"start":{"line":260,"column":1},"end":{"line":260,"column":1}},"children":[{"type":"text","value":"Every well-designed function follows a contract pattern that applies across all programming:","position":{"start":{"line":260,"column":1},"end":{"line":260,"column":1}},"key":"ItlzFN9iYg"}],"key":"jr0yVwQvBk"},{"type":"code","lang":"","value":"CONTRACT PATTERN:\n1. Preconditions: What must be true before calling\n2. Postconditions: What will be true after calling\n3. Invariants: What stays unchanged\n4. Side effects: What else happens\n\nExample for magnitude_to_flux():\n- Precondition: magnitude is numeric\n- Postcondition: returns positive flux value\n- Invariant: input magnitude unchanged\n- Side effects: none (pure function)\n\nThis pattern appears in:\n- Database transactions (ACID properties)\n- API design (REST contracts)\n- Parallel computing (thread safety)\n- Unit testing (test contracts)","position":{"start":{"line":262,"column":1},"end":{"line":280,"column":1}},"key":"neFuKWCZZa"},{"type":"heading","depth":2,"position":{"start":{"line":282,"column":1},"end":{"line":282,"column":1}},"children":[{"type":"text","value":"5.2 Function Arguments In-Depth","position":{"start":{"line":282,"column":1},"end":{"line":282,"column":1}},"key":"EJpZ4Pt6du"}],"identifier":"id-5-2-function-arguments-in-depth","label":"5.2 Function Arguments In-Depth","html_id":"id-5-2-function-arguments-in-depth","implicit":true,"key":"th5h7pDXn9"},{"type":"paragraph","position":{"start":{"line":284,"column":1},"end":{"line":284,"column":1}},"children":[{"type":"text","value":"Python provides flexible ways to handle function parameters, from simple positional arguments to sophisticated keyword-only parameters. Understanding these mechanisms allows you to create functions that are both powerful and easy to use—essential for building astronomical analysis tools that others can understand and modify.","position":{"start":{"line":284,"column":1},"end":{"line":284,"column":1}},"key":"TOi40QqTy9"}],"key":"KLhMG2BHhd"},{"type":"heading","depth":3,"position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"children":[{"type":"text","value":"Positional vs Keyword Arguments","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"ctWGdqOU4D"}],"identifier":"positional-vs-keyword-arguments","label":"Positional vs Keyword Arguments","html_id":"positional-vs-keyword-arguments","implicit":true,"key":"tPXyLsrtNY"},{"type":"paragraph","position":{"start":{"line":288,"column":1},"end":{"line":288,"column":1}},"children":[{"type":"text","value":"When you call a function, you can pass arguments by position or by name:","position":{"start":{"line":288,"column":1},"end":{"line":288,"column":1}},"key":"HbCcYvA4Z8"}],"key":"QVhqRWRTfK"}],"key":"IRCDiOzbyJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def calculate_signal_to_noise(signal, noise, exposure_time=1.0):\n    \"\"\"\n    Calculate signal-to-noise ratio for an observation.\n    \n    SNR = signal * sqrt(exposure_time) / noise\n    \"\"\"\n    import math\n    snr = signal * math.sqrt(exposure_time) / noise\n    return snr\n\n# Different ways to call the same function\nsnr1 = calculate_signal_to_noise(1000, 30)  # Positional only\nsnr2 = calculate_signal_to_noise(noise=30, signal=1000)  # Keywords (any order!)\nsnr3 = calculate_signal_to_noise(1000, 30, exposure_time=100)  # Mixed\n\nprint(f\"1 second: SNR = {snr1:.1f}\")\nprint(f\"1 second: SNR = {snr2:.1f}\")  \nprint(f\"100 seconds: SNR = {snr3:.1f}\")","key":"mIqUsz4iMW"},{"type":"output","id":"rFz5WE0RXCWa17cm8l8uM","data":[],"key":"FcoyljHUI5"}],"key":"QgcYg4FuBJ"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"children":[{"type":"text","value":"Keyword arguments make function calls self-documenting. Compare ","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"LuME5sqQB2"},{"type":"inlineCode","value":"process(data, True, False, 10)","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"eKtv61IXpY"},{"type":"text","value":" with ","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"vBNtoWLD32"},{"type":"inlineCode","value":"process(data, normalize=True, remove_cosmic_rays=False, sigma_clip=10)","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"sPzDfQNqfN"},{"type":"text","value":"—the second version immediately tells you what each parameter does.","position":{"start":{"line":311,"column":1},"end":{"line":311,"column":1}},"key":"G2mKHkFDWC"}],"key":"Wk1mUYskEH"},{"type":"heading","depth":3,"position":{"start":{"line":313,"column":1},"end":{"line":313,"column":1}},"children":[{"type":"text","value":"Default Arguments and the Mutable Default Trap","position":{"start":{"line":313,"column":1},"end":{"line":313,"column":1}},"key":"jFMdLjP19T"}],"identifier":"default-arguments-and-the-mutable-default-trap","label":"Default Arguments and the Mutable Default Trap","html_id":"default-arguments-and-the-mutable-default-trap","implicit":true,"key":"GXclpgtoGC"},{"type":"paragraph","position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"children":[{"type":"text","value":"Default arguments make functions flexible, but there’s a critical trap that has caused bugs in major astronomical software packages. Python evaluates default arguments once when the function is defined, not each time it’s called:","position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"key":"dF406jsoPT"}],"key":"v3ZkkCtSzi"}],"key":"h6DnTUkz3n"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# THE TRAP - Mutable default (DON'T DO THIS!)\ndef add_observation_buggy(time, mag, observations=[]):  # DANGER!\n    \"\"\"Add observation to list - BUGGY VERSION.\"\"\"\n    observations.append((time, mag))\n    return observations\n\n# Watch the disaster unfold\nnight1 = add_observation_buggy(2459123.5, 12.3)\nprint(f\"Night 1: {night1}\")\n\nnight2 = add_observation_buggy(2459124.5, 12.1)  # Surprise!\nprint(f\"Night 2: {night2}\")  # Contains BOTH nights!\n\nprint(f\"Same object? {night1 is night2}\")  # True - it's the same list!","key":"CEdfXAzsHp"},{"type":"output","id":"ZsJXMCCuxGkk0Sfu-KxB3","data":[],"key":"kE3V0Ndr1i"}],"key":"yCV96DT33Y"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"key":"gE20EFNqBz"},{"type":"strong","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: The Mutable Default Disaster","position":{"start":{"line":334,"column":1},"end":{"line":334,"column":1}},"key":"WZEiFEeNdC"}],"key":"IEPgvLQN4K"}],"key":"pv5H1jVENI"},{"type":"paragraph","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"children":[{"type":"text","value":"This bug has appeared in:","position":{"start":{"line":336,"column":1},"end":{"line":336,"column":1}},"key":"MzscMHgLmt"}],"key":"fKpp8RBTzi"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":337,"column":1},"end":{"line":340,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":337,"column":1},"end":{"line":337,"column":1}},"children":[{"type":"text","value":"IRAF reduction scripts (accumulated all nights’ data)","position":{"start":{"line":337,"column":1},"end":{"line":337,"column":1}},"key":"lJoaRnYWLa"}],"key":"zUSMAH4v0f"},{"type":"listItem","spread":true,"position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"children":[{"type":"text","value":"Astropy coordinate transformations (cached incorrect results)","position":{"start":{"line":338,"column":1},"end":{"line":338,"column":1}},"key":"jVdPYxDV62"}],"key":"BIoYsOdPS4"},{"type":"listItem","spread":true,"position":{"start":{"line":339,"column":1},"end":{"line":340,"column":1}},"children":[{"type":"text","value":"Observatory scheduling software (mixed different programs)","position":{"start":{"line":339,"column":1},"end":{"line":339,"column":1}},"key":"pWsSLsvw50"}],"key":"SGh0eloQNI"}],"key":"RDJbBwiq83"},{"type":"paragraph","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"children":[{"type":"text","value":"The symptom: data from previous runs mysteriously appears in new analyses. The fix: always use ","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"key":"s01RhONA5r"},{"type":"inlineCode","value":"None","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"key":"UDhTQCdCfd"},{"type":"text","value":" as default for mutable arguments.","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"key":"nlzNWNQxXv"}],"key":"Tf15a5XXoo"},{"type":"paragraph","position":{"start":{"line":343,"column":1},"end":{"line":343,"column":1}},"children":[{"type":"text","value":"Here’s the correct pattern:","position":{"start":{"line":343,"column":1},"end":{"line":343,"column":1}},"key":"GbSTOK7XI8"}],"key":"BpbG2DtKYg"}],"key":"Q0Yx3f805f"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def add_observation_fixed(time, mag, observations=None):\n    \"\"\"Add observation to list - CORRECT VERSION.\"\"\"\n    if observations is None:\n        observations = []  # Create new list each time\n    observations.append((time, mag))\n    return observations\n\n# Now it works correctly\nnight1 = add_observation_fixed(2459123.5, 12.3)\nnight2 = add_observation_fixed(2459124.5, 12.1)\nprint(f\"Night 1: {night1}\")\nprint(f\"Night 2: {night2}\")  # Separate lists!","key":"wQRdHHSEFK"},{"type":"output","id":"V8tf6C2bhseMBpcxKGWK1","data":[],"key":"jvMmRCgqYt"}],"key":"iWpX829YbK"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":360,"column":1},"end":{"line":360,"column":1}},"children":[{"type":"text","value":"Variable-Length Arguments (*args)","position":{"start":{"line":360,"column":1},"end":{"line":360,"column":1}},"key":"BuiwON1keC"}],"identifier":"variable-length-arguments-args","label":"Variable-Length Arguments (*args)","html_id":"variable-length-arguments-args","implicit":true,"key":"TIOrDA7lls"},{"type":"paragraph","position":{"start":{"line":362,"column":1},"end":{"line":362,"column":1}},"children":[{"type":"text","value":"Sometimes you need functions that accept any number of arguments—perfect for combining multiple observations:","position":{"start":{"line":362,"column":1},"end":{"line":362,"column":1}},"key":"zn7FJrmUms"}],"key":"leLp3LSfGm"}],"key":"oNeuk9jNTd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def combine_magnitudes(*magnitudes, method='mean'):\n    \"\"\"\n    Combine multiple magnitude measurements.\n    \n    Note: We convert to flux, average, then back to magnitude\n    because magnitudes are logarithmic!\n    \"\"\"\n    if not magnitudes:\n        raise ValueError(\"Need at least one magnitude\")\n    \n    # Convert to linear flux space for averaging\n    fluxes = [10**(-0.4 * m) for m in magnitudes]\n    \n    if method == 'mean':\n        combined_flux = sum(fluxes) / len(fluxes)\n    elif method == 'median':\n        combined_flux = sorted(fluxes)[len(fluxes)//2]\n    else:\n        raise ValueError(f\"Unknown method: {method}\")\n    \n    # Convert back to magnitude\n    import math\n    combined_mag = -2.5 * math.log10(combined_flux)\n    return combined_mag\n\n# Combine multiple observations of the same star\nobs1, obs2, obs3 = 12.45, 12.51, 12.48\ncombined = combine_magnitudes(obs1, obs2, obs3)\nprint(f\"Individual: {obs1}, {obs2}, {obs3}\")\nprint(f\"Combined: {combined:.2f}\")\n\n# Works with any number of observations\nmany_obs = combine_magnitudes(12.1, 12.2, 12.15, 12.18, 12.13, method='median')\nprint(f\"Median of 5 observations: {many_obs:.2f}\")","key":"XTGw1cbGF1"},{"type":"output","id":"ARcOtFwAgkD7aslYTb7Rm","data":[],"key":"zH7JuKzP0f"}],"key":"iOcCnNWtpw"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":401,"column":1},"end":{"line":401,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":401,"column":1},"end":{"line":401,"column":1}},"key":"bZ2nS3Qr4O"},{"type":"strong","position":{"start":{"line":401,"column":1},"end":{"line":401,"column":1}},"children":[{"type":"text","value":"Check Your Understanding #2","position":{"start":{"line":401,"column":1},"end":{"line":401,"column":1}},"key":"iGIfQY7YY6"}],"key":"aMwzkQIHaa"}],"identifier":"id-check-your-understanding-2","label":"🔍 Check Your Understanding #2","html_id":"id-check-your-understanding-2","implicit":true,"key":"oXB1UHzlsS"},{"type":"paragraph","position":{"start":{"line":403,"column":1},"end":{"line":403,"column":1}},"children":[{"type":"text","value":"What’s wrong with this function definition, and how would you fix it?","position":{"start":{"line":403,"column":1},"end":{"line":403,"column":1}},"key":"O7D2gjoWTJ"}],"key":"zQmOBXjql9"},{"type":"code","lang":"python","value":"def process_spectrum(wavelength, default_flux=1.0, *fluxes, normalize=True):\n    # Process spectrum with options\n    pass","position":{"start":{"line":405,"column":1},"end":{"line":409,"column":1}},"key":"Kd0oSbrf5V"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"tZURlPzrFR"}],"key":"ac21UpYG5q"},{"type":"paragraph","children":[{"type":"text","value":"The parameter order is wrong! Python requires this order:","key":"lSF3BYAAy1"}],"key":"tEAaynQV96"},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Regular positional parameters","key":"kHAKOlIQ2Q"}],"key":"b47B22fBkh"}],"key":"wRX6jRdhTb"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"*args (if any)","key":"PRQF7WzoRv"}],"key":"m6hG43TTwY"}],"key":"oP2dEcPTWs"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Keyword parameters with defaults","key":"yrIQGlClFt"}],"key":"DF5LlB9ALm"}],"key":"q1QqcOiGmq"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"**kwargs (if any)","key":"tv49sLv0gC"}],"key":"PMeC27jsHI"}],"key":"rRtlijXshA"}],"key":"qvfyKGTkz4"},{"type":"paragraph","children":[{"type":"text","value":"Correct version:","key":"m6D6QWsFGM"}],"key":"faPwfYSSGL"},{"type":"code","lang":"python","meta":null,"value":"def process_spectrum(wavelength, *fluxes, default_flux=1.0, normalize=True):\n    # Now the order is correct\n    pass","key":"wSI3PlIOuz"},{"type":"paragraph","children":[{"type":"text","value":"The original would give a SyntaxError because *fluxes can’t come after a keyword parameter with a default.","key":"kkiYysRJRA"}],"key":"A1mwT7l0IK"}],"key":"QZwTwpR8LM"},{"type":"heading","depth":3,"position":{"start":{"line":431,"column":1},"end":{"line":431,"column":1}},"children":[{"type":"text","value":"Keyword Arguments (**kwargs)","position":{"start":{"line":431,"column":1},"end":{"line":431,"column":1}},"key":"nZ8FuDYNFr"}],"identifier":"keyword-arguments-kwargs","label":"Keyword Arguments (**kwargs)","html_id":"keyword-arguments-kwargs","implicit":true,"key":"g78BMq0iMG"},{"type":"paragraph","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"key":"AW4osPuiy2"},{"type":"inlineCode","value":"**kwargs","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"key":"SdLVOs2wVv"},{"type":"text","value":" pattern enables incredibly flexible interfaces—essential for plotting functions and instrument configurations:","position":{"start":{"line":433,"column":1},"end":{"line":433,"column":1}},"key":"b9uiXUWlT7"}],"key":"ONMbA3W3Lp"}],"key":"CdYDV5xCpY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def configure_observation(target, exposure, **kwargs):\n    \"\"\"\n    Configure telescope observation with flexible options.\n    \"\"\"\n    print(f\"=== Observation Configuration ===\")\n    print(f\"Target: {target}\")\n    print(f\"Exposure: {exposure}s\")\n    \n    # Process additional options\n    defaults = {\n        'filter': 'V',\n        'binning': 1,\n        'readout': 'normal'\n    }\n    \n    # Update defaults with provided options\n    config = defaults.copy()\n    config.update(kwargs)\n    \n    print(\"Settings:\")\n    for key, value in config.items():\n        print(f\"  {key}: {value}\")\n    \n    return config\n\n# Simple observation\nconfig1 = configure_observation(\"M31\", 300)\n\nprint(\"\\n\")\n\n# Complex observation with many options\nconfig2 = configure_observation(\n    \"GRB221009A\", \n    60,\n    filter='R',\n    binning=2,\n    readout='fast',\n    priority='urgent',\n    notes='Gamma-ray burst followup'\n)","key":"mDx9GUB5dk"},{"type":"output","id":"qTRgm9XGQDfELQpWJ312Y","data":[],"key":"D3dCexT9S1"}],"key":"wOBJmjNz4n"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"children":[{"type":"text","value":"5.3 Scope and Namespaces","position":{"start":{"line":478,"column":1},"end":{"line":478,"column":1}},"key":"BR48Che1cB"}],"identifier":"id-5-3-scope-and-namespaces","label":"5.3 Scope and Namespaces","html_id":"id-5-3-scope-and-namespaces","implicit":true,"key":"H7aGJB3gAq"},{"type":"paragraph","position":{"start":{"line":480,"column":1},"end":{"line":480,"column":1}},"children":[{"type":"text","value":"Ready to understand something that confuses even experienced programmers? This knowledge will save you hours of debugging! When I first learned about scope, I spent a whole weekend tracking down a bug that turned out to be a simple scope issue—the same kind that appears in IRAF/PyRAF scripts when variables mysteriously change values or seem to disappear.","position":{"start":{"line":480,"column":1},"end":{"line":480,"column":1}},"key":"ZfAn2U2zdX"}],"key":"Fi9JEBCdom"},{"type":"paragraph","position":{"start":{"line":482,"column":1},"end":{"line":482,"column":1}},"children":[{"type":"text","value":"Here’s the truth: everyone gets confused by scope at first—even Python’s creator Guido van Rossum has admitted the scoping rules are one of Python’s trickier aspects! But once you understand the LEGB rule, you’ll have power over your variables that many programmers never quite master.","position":{"start":{"line":482,"column":1},"end":{"line":482,"column":1}},"key":"qMcTw96ujs"}],"key":"CF86kzSexQ"},{"type":"paragraph","position":{"start":{"line":484,"column":1},"end":{"line":484,"column":1}},"children":[{"type":"text","value":"Understanding scope—where variables can be accessed—is crucial for writing bug-free code. Python’s scope rules determine which variables are visible at any point in your program. Without understanding scope, you’ll encounter confusing bugs where variables don’t have the values you expect, or worse, where changing a variable in one place mysteriously affects code elsewhere.","position":{"start":{"line":484,"column":1},"end":{"line":484,"column":1}},"key":"gor1vApjeX"}],"key":"MaEmUz3IBj"},{"type":"heading","depth":3,"position":{"start":{"line":486,"column":1},"end":{"line":486,"column":1}},"children":[{"type":"text","value":"The LEGB Rule","position":{"start":{"line":486,"column":1},"end":{"line":486,"column":1}},"key":"Zu97F1tc5k"}],"identifier":"the-legb-rule","label":"The LEGB Rule","html_id":"the-legb-rule","implicit":true,"key":"ZODyxBXMV4"},{"type":"paragraph","position":{"start":{"line":488,"column":1},"end":{"line":488,"column":1}},"children":[{"type":"text","value":"Python resolves variable names using the LEGB rule, searching in this order:","position":{"start":{"line":488,"column":1},"end":{"line":488,"column":1}},"key":"kLjc8Bsdq4"}],"key":"uIeoz4ObdA"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":489,"column":1},"end":{"line":493,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"children":[{"type":"strong","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"children":[{"type":"text","value":"L","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"key":"GOCyrqlStk"}],"key":"TbGyteKXnj"},{"type":"text","value":"ocal: Inside the current function","position":{"start":{"line":489,"column":1},"end":{"line":489,"column":1}},"key":"A5hNEN5xny"}],"key":"BmaoLNUE3Z"},{"type":"listItem","spread":true,"position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"children":[{"type":"strong","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"children":[{"type":"text","value":"E","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"key":"OVuP70bdw3"}],"key":"v6AulWATAT"},{"type":"text","value":"nclosing: In the enclosing function (for nested functions)","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"key":"wGfJV4MBov"}],"key":"CHZmUg0WKk"},{"type":"listItem","spread":true,"position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"children":[{"type":"strong","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"children":[{"type":"text","value":"G","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"key":"yHPVlh39TX"}],"key":"aS66gZDiDF"},{"type":"text","value":"lobal: At the top level of the module","position":{"start":{"line":491,"column":1},"end":{"line":491,"column":1}},"key":"Xa1ZWykrU1"}],"key":"ZZeqohKMOw"},{"type":"listItem","spread":true,"position":{"start":{"line":492,"column":1},"end":{"line":493,"column":1}},"children":[{"type":"strong","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"children":[{"type":"text","value":"B","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"key":"Cfm4oaYJHN"}],"key":"buYqMRbCyo"},{"type":"text","value":"uilt-in: In the built-in namespace (print, len, etc.)","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"key":"Pn3bfWT1y2"}],"key":"tfWtYhmC5s"}],"key":"aPUzpsZMHf"}],"key":"Xxf54TBdFJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Demonstrating LEGB with astronomical context\nmagnitude_limit = 20.0  # Global scope\n\ndef plan_observation():\n    magnitude_limit = 15.0  # Enclosing scope (overrides global)\n    \n    def check_visibility(star_mag):\n        magnitude_limit = 12.0  # Local scope (overrides enclosing)\n        \n        # Local scope sees its own magnitude_limit\n        print(f\"Inside check: limit = {magnitude_limit}\")\n        return star_mag < magnitude_limit\n    \n    # Call inner function\n    visible = check_visibility(10.0)\n    \n    # Enclosing scope sees its own magnitude_limit\n    print(f\"Inside plan: limit = {magnitude_limit}\")\n    return visible\n\nresult = plan_observation()\nprint(f\"Global: limit = {magnitude_limit}\")  # Unchanged!","key":"WGXseUMTC1"},{"type":"output","id":"9cVZaU365fWV0Gf_5SUPk","data":[],"key":"HJlyDunkJC"}],"key":"JqpSIVUjKG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":519,"column":1},"end":{"line":519,"column":1}},"children":[{"type":"text","value":"Each function creates its own namespace—a mapping of names to objects. When you use a variable, Python searches through these namespaces in LEGB order until it finds the name.","position":{"start":{"line":519,"column":1},"end":{"line":519,"column":1}},"key":"XZbHWS4fgO"}],"key":"Fea01zwoJU"},{"type":"heading","depth":3,"position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"key":"EmfCBhPUiy"},{"type":"strong","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: UnboundLocalError - The Assignment Trap","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"key":"alkARq0wje"}],"key":"GI9Ovg1u40"}],"identifier":"id-common-bug-alert-unboundlocalerror-the-assignment-trap","label":"⚠️ Common Bug Alert: UnboundLocalError - The Assignment Trap","html_id":"id-common-bug-alert-unboundlocalerror-the-assignment-trap","implicit":true,"key":"xmCORsyaNu"},{"type":"code","lang":"python","value":"total_observations = 0  # Global\n\ndef add_observation():\n    # This will crash with UnboundLocalError!\n    total_observations += 1  # Python thinks this is local\n    return total_observations\n\ndef add_observation_fixed():\n    global total_observations  # Explicitly use global\n    total_observations += 1\n    return total_observations\n\n# Better approach - avoid global state entirely\ndef add_observation_better(current_total):\n    return current_total + 1","position":{"start":{"line":523,"column":1},"end":{"line":539,"column":1}},"key":"PhqpyiYw9U"},{"type":"paragraph","position":{"start":{"line":541,"column":1},"end":{"line":541,"column":1}},"children":[{"type":"text","value":"The error happens because Python sees you’re assigning to ","position":{"start":{"line":541,"column":1},"end":{"line":541,"column":1}},"key":"LoDiN3WfpB"},{"type":"inlineCode","value":"total_observations","position":{"start":{"line":541,"column":1},"end":{"line":541,"column":1}},"key":"rIMuKCGT0I"},{"type":"text","value":", assumes it’s local, but then can’t find a local value to increment. This bug often appears in data reduction scripts that try to maintain running totals. The symptoms are confusing because the same variable name works fine when reading but crashes when writing. This exact bug has appeared in multiple observatory control systems where global counters tracked telescope positions!","position":{"start":{"line":541,"column":1},"end":{"line":541,"column":1}},"key":"urty8nDdqP"}],"key":"FF7NiKMdGl"},{"type":"heading","depth":3,"position":{"start":{"line":543,"column":1},"end":{"line":543,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":543,"column":1},"end":{"line":543,"column":1}},"key":"zgLruZJSAD"},{"type":"strong","position":{"start":{"line":543,"column":1},"end":{"line":543,"column":1}},"children":[{"type":"text","value":"Check Your Understanding #3","position":{"start":{"line":543,"column":1},"end":{"line":543,"column":1}},"key":"DeUcd1YUrP"}],"key":"Hq8y5UcIxy"}],"identifier":"id-check-your-understanding-3","label":"🔍 Check Your Understanding #3","html_id":"id-check-your-understanding-3","implicit":true,"key":"xom7IjYm8D"},{"type":"paragraph","position":{"start":{"line":545,"column":1},"end":{"line":545,"column":1}},"children":[{"type":"text","value":"In nested functions, if both the inner and outer function define a variable ‘x’, which ‘x’ does the inner function see? Why?","position":{"start":{"line":545,"column":1},"end":{"line":545,"column":1}},"key":"UyejADvDW1"}],"key":"NxnQWRIEVo"},{"type":"code","lang":"python","value":"def outer():\n    x = \"outer\"\n    \n    def inner():\n        x = \"inner\"\n        print(f\"Inner sees: {x}\")\n    \n    inner()\n    print(f\"Outer sees: {x}\")\n\nouter()","position":{"start":{"line":547,"column":1},"end":{"line":559,"column":1}},"key":"KuwmOXGAFN"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"BsAjO5i5z6"}],"key":"Egea2CQLVp"},{"type":"paragraph","children":[{"type":"text","value":"The inner function sees its own local ","key":"L9DPmmHQ4E"},{"type":"inlineCode","value":"x = \"inner\"","key":"J9MLZBDVHc"},{"type":"text","value":", and the outer function sees its own ","key":"CPrjWvB9ID"},{"type":"inlineCode","value":"x = \"outer\"","key":"rew0pR6A1X"},{"type":"text","value":". They don’t interfere with each other because each function has its own local namespace.","key":"rtBaisN6ty"}],"key":"R9Y0kIaVi1"},{"type":"paragraph","children":[{"type":"text","value":"Output:","key":"x97jaVhb6w"}],"key":"aeUBMqDfdf"},{"type":"code","lang":null,"meta":null,"value":"Inner sees: inner\nOuter sees: outer","key":"ggJaE66Gqa"},{"type":"paragraph","children":[{"type":"text","value":"If the inner function didn’t define its own ","key":"CKIwvrEZOY"},{"type":"inlineCode","value":"x","key":"F5weq31Hg6"},{"type":"text","value":", it would see the outer’s ","key":"it6ot4pfSb"},{"type":"inlineCode","value":"x","key":"csJV1fp1ef"},{"type":"text","value":" due to the LEGB rule (it would find it in the Enclosing scope). This scoping behavior lets you create independent variables in nested functions, which is essential for closures and decorators used throughout astronomical software packages.","key":"CrSW7j3ycM"}],"key":"UYDGOsFZzW"}],"key":"X8tAPooGf4"},{"type":"heading","depth":3,"position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"children":[{"type":"text","value":"💡 ","position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"key":"JImV3X9JhR"},{"type":"strong","position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"children":[{"type":"text","value":"Computational Thinking: Why Global Variables Are Dangerous","position":{"start":{"line":575,"column":1},"end":{"line":575,"column":1}},"key":"wjdhyiwnSa"}],"key":"wgFI1JwPuA"}],"identifier":"id-computational-thinking-why-global-variables-are-dangerous","label":"💡 Computational Thinking: Why Global Variables Are Dangerous","html_id":"id-computational-thinking-why-global-variables-are-dangerous","implicit":true,"key":"mqCaKFHDrJ"},{"type":"paragraph","position":{"start":{"line":577,"column":1},"end":{"line":577,"column":1}},"children":[{"type":"text","value":"Global variables violate the “principle of least surprise” that appears everywhere in computing:","position":{"start":{"line":577,"column":1},"end":{"line":577,"column":1}},"key":"Ufqw1gqacR"}],"key":"vwkf5TVdgt"},{"type":"code","lang":"","value":"HIDDEN STATE ANTI-PATTERN:\n- Function behavior depends on external state\n- Can't understand function in isolation\n- Testing requires global setup\n- Parallel processing becomes impossible\n\nReal disaster: ESO pipeline bug (2018)\n- Global config variable for instrument mode\n- Thread A changes mode for its reduction\n- Thread B reads wrong mode mid-process\n- Months of data reduced incorrectly\n\nBetter pattern: Explicit State Passing\nBAD:  current_filter = 'V'; take_image()\nGOOD: take_image(filter='V')","position":{"start":{"line":579,"column":1},"end":{"line":595,"column":1}},"key":"vzYIhcFAy5"},{"type":"heading","depth":3,"position":{"start":{"line":597,"column":1},"end":{"line":597,"column":1}},"children":[{"type":"text","value":"Closures: Functions That Remember","position":{"start":{"line":597,"column":1},"end":{"line":597,"column":1}},"key":"z82HXNoZLz"}],"identifier":"closures-functions-that-remember","label":"Closures: Functions That Remember","html_id":"closures-functions-that-remember","implicit":true,"key":"hjSmewItE8"},{"type":"paragraph","position":{"start":{"line":599,"column":1},"end":{"line":599,"column":1}},"children":[{"type":"text","value":"Closures are functions that “remember” variables from their enclosing scope—powerful for creating specialized analysis functions:","position":{"start":{"line":599,"column":1},"end":{"line":599,"column":1}},"key":"oAOBZkixT0"}],"key":"NGLndPHsbp"}],"key":"QyX61WD9Ew"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def create_magnitude_converter(zero_point, extinction=0.0):\n    \"\"\"\n    Create a magnitude converter for specific conditions.\n    \n    The returned function 'remembers' zero_point and extinction.\n    \"\"\"\n    def converter(instrumental_mag, airmass=1.0):\n        # This function 'closes over' zero_point and extinction\n        corrected = instrumental_mag - extinction * airmass\n        calibrated = corrected + zero_point\n        return calibrated\n    \n    return converter\n\n# Create converters for different filters\nv_band_converter = create_magnitude_converter(zero_point=23.5, extinction=0.15)\nr_band_converter = create_magnitude_converter(zero_point=23.8, extinction=0.09)\n\n# Use them for calibration\ninstrumental_v = 15.67\ncalibrated_v = v_band_converter(instrumental_v, airmass=1.5)\nprint(f\"V band: {instrumental_v:.2f} (instrumental) → {calibrated_v:.2f} (calibrated)\")\n\ninstrumental_r = 15.23\ncalibrated_r = r_band_converter(instrumental_r, airmass=1.5)\nprint(f\"R band: {instrumental_r:.2f} (instrumental) → {calibrated_r:.2f} (calibrated)\")","key":"JiHqhvgQKp"},{"type":"output","id":"U5D3iu05IhttSgNgpUsmJ","data":[],"key":"xqEGQGlcX3"}],"key":"dEPIo0f8KR"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":630,"column":1},"end":{"line":630,"column":1}},"children":[{"type":"text","value":"5.4 Functional Programming Elements","position":{"start":{"line":630,"column":1},"end":{"line":630,"column":1}},"key":"NIEi3Y7ZQW"}],"identifier":"id-5-4-functional-programming-elements","label":"5.4 Functional Programming Elements","html_id":"id-5-4-functional-programming-elements","implicit":true,"key":"LCMH0Oi4Zy"},{"type":"paragraph","position":{"start":{"line":632,"column":1},"end":{"line":632,"column":1}},"children":[{"type":"text","value":"Python supports functional programming—a style that treats computation as the evaluation of mathematical functions. While Python isn’t a pure functional language, these concepts are essential because they prepare you for modern scientific computing frameworks like JAX that require functional style, and they lead to cleaner, more testable code.","position":{"start":{"line":632,"column":1},"end":{"line":632,"column":1}},"key":"s64L4aNRzl"}],"key":"XelfCL6Oga"},{"type":"heading","depth":3,"position":{"start":{"line":634,"column":1},"end":{"line":634,"column":1}},"children":[{"type":"text","value":"Lambda Functions","position":{"start":{"line":634,"column":1},"end":{"line":634,"column":1}},"key":"mLk1mL0ZkR"}],"identifier":"lambda-functions","label":"Lambda Functions","html_id":"lambda-functions","implicit":true,"key":"zogI7YF7o9"},{"type":"paragraph","position":{"start":{"line":636,"column":1},"end":{"line":636,"column":1}},"children":[{"type":"text","value":"Lambda functions are small, anonymous functions defined inline—perfect for simple transformations in data analysis:","position":{"start":{"line":636,"column":1},"end":{"line":636,"column":1}},"key":"WfghanH5AF"}],"key":"oHplPqonlR"}],"key":"XBHjV9i777"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Sort stars by different criteria\nstars = [\n    {'name': 'Vega', 'mag': 0.03, 'distance': 25.04},\n    {'name': 'Arcturus', 'mag': -0.05, 'distance': 36.7},\n    {'name': 'Sirius', 'mag': -1.46, 'distance': 8.6},\n    {'name': 'Canopus', 'mag': -0.74, 'distance': 310},\n]\n\n# Sort by magnitude (brightest first - remember lower mag = brighter!)\nby_brightness = sorted(stars, key=lambda s: s['mag'])\nprint(\"Brightest stars:\")\nfor star in by_brightness[:2]:\n    print(f\"  {star['name']}: {star['mag']}\")\n\n# Sort by distance\nby_distance = sorted(stars, key=lambda s: s['distance'])\nprint(\"\\nNearest stars:\")\nfor star in by_distance[:2]:\n    print(f\"  {star['name']}: {star['distance']} ly\")","key":"vLEiq69rk8"},{"type":"output","id":"5HKHCyIkfpNfQD49MC6qu","data":[],"key":"b2EQyV9Ap8"}],"key":"ggWipYZBZY"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":660,"column":1},"end":{"line":660,"column":1}},"children":[{"type":"text","value":"Map, Filter, and Reduce for Astronomical Data","position":{"start":{"line":660,"column":1},"end":{"line":660,"column":1}},"key":"mjXB8kB8Dp"}],"identifier":"map-filter-and-reduce-for-astronomical-data","label":"Map, Filter, and Reduce for Astronomical Data","html_id":"map-filter-and-reduce-for-astronomical-data","implicit":true,"key":"FDz9nP6A6v"},{"type":"paragraph","position":{"start":{"line":662,"column":1},"end":{"line":662,"column":1}},"children":[{"type":"text","value":"These functional tools transform how you process observations:","position":{"start":{"line":662,"column":1},"end":{"line":662,"column":1}},"key":"dOPL7QM3pJ"}],"key":"Bm641XMubg"}],"key":"xU7jzmgPoy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from functools import reduce\nimport math\n\n# Sample observations: (time, magnitude, error)\nobservations = [\n    (2459123.512, 12.35, 0.02),\n    (2459123.538, 12.28, 0.03),\n    (2459123.564, 12.31, 0.02),\n    (2459123.589, 99.99, 0.00),  # Bad measurement\n    (2459123.614, 12.29, 0.02),\n]\n\n# FILTER: Remove bad measurements\ngood_obs = list(filter(lambda obs: obs[1] < 90, observations))\nprint(f\"Filtered {len(observations) - len(good_obs)} bad measurements\")\n\n# MAP: Extract just magnitudes\nmagnitudes = list(map(lambda obs: obs[1], good_obs))\nprint(f\"Magnitudes: {magnitudes}\")\n\n# REDUCE: Calculate weighted average\ndef weighted_avg(accumulator, obs):\n    \"\"\"Accumulate weighted sum and weights.\"\"\"\n    mag, err = obs[1], obs[2]\n    weight = 1.0 / (err ** 2) if err > 0 else 0\n    sum_weighted, sum_weights = accumulator\n    return (sum_weighted + mag * weight, sum_weights + weight)\n\nweighted_sum, total_weight = reduce(weighted_avg, good_obs, (0.0, 0.0))\nweighted_mean = weighted_sum / total_weight if total_weight > 0 else 0\nprint(f\"Weighted mean magnitude: {weighted_mean:.3f}\")","key":"y33ONHJwP3"},{"type":"output","id":"Jgwuuuna-X1YgLv7jsffr","data":[],"key":"olfL2vtpsY"}],"key":"W9ilbrgWQf"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":698,"column":1},"end":{"line":698,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":698,"column":1},"end":{"line":698,"column":1}},"key":"UMI75hnBfY"},{"type":"strong","position":{"start":{"line":698,"column":1},"end":{"line":698,"column":1}},"children":[{"type":"text","value":"Check Your Understanding #4","position":{"start":{"line":698,"column":1},"end":{"line":698,"column":1}},"key":"GrYPt15spA"}],"key":"rnDlSqfo8f"}],"identifier":"id-check-your-understanding-4","label":"🔍 Check Your Understanding #4","html_id":"id-check-your-understanding-4","implicit":true,"key":"JgoOaZsb2Z"},{"type":"paragraph","position":{"start":{"line":700,"column":1},"end":{"line":700,"column":1}},"children":[{"type":"text","value":"Rewrite this loop using functional programming:","position":{"start":{"line":700,"column":1},"end":{"line":700,"column":1}},"key":"LUWfXxWg9d"}],"key":"sJmWVtqy9I"},{"type":"code","lang":"python","value":"# Find all stars brighter than magnitude 5.0\nbright_stars = []\nfor star in catalog:\n    if star['magnitude'] < 5.0:\n        bright_stars.append(star['name'])","position":{"start":{"line":702,"column":1},"end":{"line":708,"column":1}},"key":"kspz1xgsxH"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"ZG32yQhhGp"}],"key":"rJg2OT82GN"},{"type":"paragraph","children":[{"type":"text","value":"Two equivalent functional approaches:","key":"O0SHWbagz5"}],"key":"TnwpLIz9hu"},{"type":"code","lang":"python","meta":null,"value":"# Using filter and map\nbright_stars = list(map(\n    lambda s: s['name'],\n    filter(lambda s: s['magnitude'] < 5.0, catalog)\n))\n\n# Using list comprehension (more Pythonic)\nbright_stars = [s['name'] for s in catalog if s['magnitude'] < 5.0]","key":"VvS72mqZTT"},{"type":"paragraph","children":[{"type":"text","value":"The list comprehension is generally preferred in Python for readability, but understanding the functional approach prepares you for libraries like JAX that require functional style.","key":"BbmD7mlmBa"}],"key":"ymp048rOOb"}],"key":"JM6hZCTI9Z"},{"type":"heading","depth":3,"position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"children":[{"type":"text","value":"💡 ","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"key":"HMJt3WpJ6B"},{"type":"strong","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"children":[{"type":"text","value":"Computational Thinking: Pure Functions Pattern","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"key":"nWu69wAF7T"}],"key":"um5cLXlYXd"}],"identifier":"id-computational-thinking-pure-functions-pattern","label":"💡 Computational Thinking: Pure Functions Pattern","html_id":"id-computational-thinking-pure-functions-pattern","implicit":true,"key":"cO9W8iqJwA"},{"type":"paragraph","position":{"start":{"line":732,"column":1},"end":{"line":732,"column":1}},"children":[{"type":"text","value":"Pure functions are the foundation of reliable, testable, parallelizable code. A pure function always returns the same output for the same input and has no side effects:","position":{"start":{"line":732,"column":1},"end":{"line":732,"column":1}},"key":"b0zH3AsCcb"}],"key":"AWYUjwAAXx"},{"type":"code","lang":"","value":"PURE FUNCTION PATTERN:\n✓ Deterministic: same input → same output\n✓ No side effects: doesn't modify external state\n✓ No hidden inputs: only uses parameters\n✓ Thread-safe: can run in parallel\n\nExample - PURE:\ndef calculate_flux(magnitude):\n    return 10 ** (-0.4 * magnitude)\n\nExample - IMPURE:\nimport random\ndef add_noise(magnitude):\n    return magnitude + random.gauss(0, 0.1)  # Different each time!\n\nBenefits of pure functions:\n1. Easy testing: predictable results\n2. Safe parallelization: no race conditions\n3. Memoization possible: can cache results\n4. Debugging simplified: isolated behavior\n\nThis pattern appears in:\n- JAX (requires pure functions for autodiff)\n- Dask (parallel computing)\n- Unit testing frameworks\n- Functional reactive programming","position":{"start":{"line":734,"column":1},"end":{"line":761,"column":1}},"key":"xdw62DpOt0"},{"type":"paragraph","position":{"start":{"line":763,"column":1},"end":{"line":763,"column":1}},"children":[{"type":"text","value":"These patterns appear in every major astronomy software package!","position":{"start":{"line":763,"column":1},"end":{"line":763,"column":1}},"key":"AmfDnkOWVH"}],"key":"akkvQIvGOG"},{"type":"heading","depth":3,"position":{"start":{"line":765,"column":1},"end":{"line":765,"column":1}},"children":[{"type":"text","value":"Functions as First-Class Objects","position":{"start":{"line":765,"column":1},"end":{"line":765,"column":1}},"key":"CTvuEwvpoN"}],"identifier":"functions-as-first-class-objects","label":"Functions as First-Class Objects","html_id":"functions-as-first-class-objects","implicit":true,"key":"SZkzk0OxEH"},{"type":"paragraph","position":{"start":{"line":767,"column":1},"end":{"line":767,"column":1}},"children":[{"type":"text","value":"In Python, functions are objects you can pass around—essential for building flexible analysis pipelines:","position":{"start":{"line":767,"column":1},"end":{"line":767,"column":1}},"key":"t6iF7bGxOs"}],"key":"ojdmgiy2ar"}],"key":"cFUIvuN2aA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def median_combine(values):\n    \"\"\"Median combination - robust against outliers.\"\"\"\n    return sorted(values)[len(values)//2]\n\ndef mean_combine(values):\n    \"\"\"Mean combination - optimal for Gaussian noise.\"\"\"\n    return sum(values) / len(values)\n\ndef process_image_stack(images, combine_function):\n    \"\"\"\n    Combine multiple images using specified method.\n    \n    combine_function determines the combination algorithm.\n    \"\"\"\n    print(f\"Combining {len(images)} images using {combine_function.__name__}\")\n    result = combine_function(images)\n    return result\n\n# Simulate image stack (pixel values)\nimage_stack = [1021, 1019, 1024, 2000, 1018]  # Note the cosmic ray (2000)!\n\n# Try different combination methods\nmean_result = process_image_stack(image_stack, mean_combine)\nmedian_result = process_image_stack(image_stack, median_combine)\n\nprint(f\"Mean: {mean_result:.1f} (affected by cosmic ray)\")\nprint(f\"Median: {median_result:.1f} (robust against outliers)\")","key":"VpphIJyPTp"},{"type":"output","id":"aKFSkJzwtRZ7cbfoE7mQZ","data":[],"key":"RRzGej8tBV"}],"key":"V9IIMkePwd"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":799,"column":1},"end":{"line":799,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":799,"column":1},"end":{"line":799,"column":1}},"key":"sdbsVD2nij"},{"type":"strong","position":{"start":{"line":799,"column":1},"end":{"line":799,"column":1}},"children":[{"type":"text","value":"Why This Matters: Modern Frameworks","position":{"start":{"line":799,"column":1},"end":{"line":799,"column":1}},"key":"VmOkVt6J2R"}],"key":"TygHDGk3WM"}],"identifier":"id-why-this-matters-modern-frameworks","label":"🌟 Why This Matters: Modern Frameworks","html_id":"id-why-this-matters-modern-frameworks","implicit":true,"key":"oolhIhsdZ8"},{"type":"paragraph","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"children":[{"type":"text","value":"Functional programming isn’t just academic—it’s essential for modern scientific computing:","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"key":"PqcsXR35Gm"}],"key":"tTbfA6ko7F"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":803,"column":1},"end":{"line":807,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":803,"column":1},"end":{"line":803,"column":1}},"children":[{"type":"strong","position":{"start":{"line":803,"column":1},"end":{"line":803,"column":1}},"children":[{"type":"text","value":"JAX","position":{"start":{"line":803,"column":1},"end":{"line":803,"column":1}},"key":"gjXx3YnbJl"}],"key":"U4eznjeGQk"},{"type":"text","value":" (Google’s NumPy replacement) requires pure functions for automatic differentiation","position":{"start":{"line":803,"column":1},"end":{"line":803,"column":1}},"key":"NgqKEQLVP2"}],"key":"Z717Kon1JF"},{"type":"listItem","spread":true,"position":{"start":{"line":804,"column":1},"end":{"line":804,"column":1}},"children":[{"type":"strong","position":{"start":{"line":804,"column":1},"end":{"line":804,"column":1}},"children":[{"type":"text","value":"Parallel processing","position":{"start":{"line":804,"column":1},"end":{"line":804,"column":1}},"key":"vrx2SuJYMo"}],"key":"qFlvGclUZn"},{"type":"text","value":" works best with stateless functions","position":{"start":{"line":804,"column":1},"end":{"line":804,"column":1}},"key":"CUZWU6nKHE"}],"key":"pr3UytWoDL"},{"type":"listItem","spread":true,"position":{"start":{"line":805,"column":1},"end":{"line":805,"column":1}},"children":[{"type":"strong","position":{"start":{"line":805,"column":1},"end":{"line":805,"column":1}},"children":[{"type":"text","value":"Testing","position":{"start":{"line":805,"column":1},"end":{"line":805,"column":1}},"key":"BujCaB0y8X"}],"key":"ZvR4pYcWFS"},{"type":"text","value":" is trivial when functions have no side effects","position":{"start":{"line":805,"column":1},"end":{"line":805,"column":1}},"key":"Yo29In1HAb"}],"key":"ZDJDi41WEX"},{"type":"listItem","spread":true,"position":{"start":{"line":806,"column":1},"end":{"line":807,"column":1}},"children":[{"type":"strong","position":{"start":{"line":806,"column":1},"end":{"line":806,"column":1}},"children":[{"type":"text","value":"GPU computing","position":{"start":{"line":806,"column":1},"end":{"line":806,"column":1}},"key":"lSBDzGt16c"}],"key":"fwGntTpiJh"},{"type":"text","value":" maps naturally to functional operations","position":{"start":{"line":806,"column":1},"end":{"line":806,"column":1}},"key":"lRPsmGbHYt"}],"key":"F6z2EHkBMq"}],"key":"REDJ2Dm1L0"},{"type":"paragraph","position":{"start":{"line":808,"column":1},"end":{"line":808,"column":1}},"children":[{"type":"text","value":"Example: In JAX, you can automatically differentiate through an entire light curve fitting routine if it’s written functionally. This enables advanced techniques like Hamiltonian Monte Carlo that would be impossibly complex to implement manually.","position":{"start":{"line":808,"column":1},"end":{"line":808,"column":1}},"key":"cTmS4OLek5"}],"key":"lHUY8nLMfP"},{"type":"heading","depth":3,"position":{"start":{"line":810,"column":1},"end":{"line":810,"column":1}},"children":[{"type":"text","value":"🌟 ","position":{"start":{"line":810,"column":1},"end":{"line":810,"column":1}},"key":"fUM6Soe0WG"},{"type":"strong","position":{"start":{"line":810,"column":1},"end":{"line":810,"column":1}},"children":[{"type":"text","value":"Why This Matters: LIGO’s Modular Design Success","position":{"start":{"line":810,"column":1},"end":{"line":810,"column":1}},"key":"K7UWcnOUv7"}],"key":"aTEczWlQOO"}],"identifier":"id-why-this-matters-ligos-modular-design-success","label":"🌟 Why This Matters: LIGO’s Modular Design Success","html_id":"id-why-this-matters-ligos-modular-design-success","implicit":true,"key":"TAnxhJUDPV"},{"type":"paragraph","position":{"start":{"line":812,"column":1},"end":{"line":812,"column":1}},"children":[{"type":"text","value":"The detection of gravitational waves in 2015 (Nobel Prize 2017) was possible partly because of LIGO’s modular software architecture. The data analysis pipeline consisted of hundreds of independent modules, each with clear interfaces:","position":{"start":{"line":812,"column":1},"end":{"line":812,"column":1}},"key":"aRK6dIflwJ"}],"key":"HBHcj6BPZf"},{"type":"code","lang":"python","value":"# Simplified LIGO pipeline structure\nraw_strain → remove_noise() → whiten_data() → matched_filter() → coincidence_test()","position":{"start":{"line":814,"column":1},"end":{"line":817,"column":1}},"key":"TT85uwmxji"},{"type":"paragraph","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"children":[{"type":"text","value":"When the first detection (GW150914) appeared, the modular design allowed teams to:","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"key":"ZN4fqAxE4Z"}],"key":"DJJOpaibqD"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":820,"column":1},"end":{"line":824,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":820,"column":1},"end":{"line":820,"column":1}},"children":[{"type":"text","value":"Independently verify each processing step","position":{"start":{"line":820,"column":1},"end":{"line":820,"column":1}},"key":"o1axfQ1lFm"}],"key":"sYYVoZ4gKf"},{"type":"listItem","spread":true,"position":{"start":{"line":821,"column":1},"end":{"line":821,"column":1}},"children":[{"type":"text","value":"Swap in alternative algorithms for cross-validation","position":{"start":{"line":821,"column":1},"end":{"line":821,"column":1}},"key":"IjpvMOV5kK"}],"key":"LOUvz7AfCY"},{"type":"listItem","spread":true,"position":{"start":{"line":822,"column":1},"end":{"line":822,"column":1}},"children":[{"type":"text","value":"Run parallel analyses with different parameters","position":{"start":{"line":822,"column":1},"end":{"line":822,"column":1}},"key":"gbyXOGATr7"}],"key":"yZZ4zAwNxv"},{"type":"listItem","spread":true,"position":{"start":{"line":823,"column":1},"end":{"line":824,"column":1}},"children":[{"type":"text","value":"Complete verification in weeks instead of months","position":{"start":{"line":823,"column":1},"end":{"line":823,"column":1}},"key":"deZ9bifhM6"}],"key":"s9w4z9DrgQ"}],"key":"ZvbNW3hjEM"},{"type":"paragraph","position":{"start":{"line":825,"column":1},"end":{"line":825,"column":1}},"children":[{"type":"text","value":"The same modular approach that you’re learning here enabled one of the most significant discoveries in physics!","position":{"start":{"line":825,"column":1},"end":{"line":825,"column":1}},"key":"GDH2vZM4eD"}],"key":"UlBBvOL7jP"},{"type":"heading","depth":2,"position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"children":[{"type":"text","value":"5.5 Modules and Packages","position":{"start":{"line":827,"column":1},"end":{"line":827,"column":1}},"key":"n3tpEbaXvu"}],"identifier":"id-5-5-modules-and-packages","label":"5.5 Modules and Packages","html_id":"id-5-5-modules-and-packages","implicit":true,"key":"lUlJzaCPbB"},{"type":"paragraph","position":{"start":{"line":829,"column":1},"end":{"line":829,"column":1}},"children":[{"type":"text","value":"As your analysis grows from scripts to projects, organization becomes critical. Modules and packages are Python’s way of organizing code into reusable, maintainable units. In Chapter 1, you learned to import modules—now you’ll create your own.","position":{"start":{"line":829,"column":1},"end":{"line":829,"column":1}},"key":"DrjjZTOLUc"}],"key":"dgIHq30SpO"},{"type":"heading","depth":3,"position":{"start":{"line":831,"column":1},"end":{"line":831,"column":1}},"children":[{"type":"text","value":"Creating Your First Module","position":{"start":{"line":831,"column":1},"end":{"line":831,"column":1}},"key":"G4to2caBqI"}],"identifier":"creating-your-first-module","label":"Creating Your First Module","html_id":"creating-your-first-module","implicit":true,"key":"TqkRfpY4FZ"},{"type":"paragraph","position":{"start":{"line":833,"column":1},"end":{"line":833,"column":1}},"children":[{"type":"text","value":"Let’s create a module for photometric calculations. Save this as ","position":{"start":{"line":833,"column":1},"end":{"line":833,"column":1}},"key":"c8jQRZx76W"},{"type":"inlineCode","value":"photometry.py","position":{"start":{"line":833,"column":1},"end":{"line":833,"column":1}},"key":"cSimHjPbbr"},{"type":"text","value":":","position":{"start":{"line":833,"column":1},"end":{"line":833,"column":1}},"key":"unxzG0HIT9"}],"key":"N9X3ifyIpJ"}],"key":"m5iXfTCpeN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# photometry.py - Part 1: Constants and Basic Functions\n\"\"\"\nPhotometric calculations for astronomical observations.\n\"\"\"\n\n# Physical constants\nSOLAR_MAGNITUDE = 4.83  # V-band absolute magnitude\nPARSEC_IN_AU = 206265.0\nZERO_POINT_FLUX = 3631.0  # Jansky for AB magnitude system\n\ndef magnitude_to_flux(magnitude, zero_point=0.0):\n    \"\"\"Convert magnitude to flux.\"\"\"\n    flux = 10 ** ((zero_point - magnitude) / 2.5)\n    return flux\n\ndef flux_to_magnitude(flux, zero_point=0.0):\n    \"\"\"Convert flux to magnitude.\"\"\"\n    import math\n    if flux <= 0:\n        return float('inf')  # Infinite magnitude for zero flux\n    magnitude = zero_point - 2.5 * math.log10(flux)\n    return magnitude","key":"KF9hUVbl5Z"},{"type":"output","id":"Rw19snBviQmGVql5BtIEe","data":[],"key":"kXwTFl21Th"}],"key":"hhE6jnguCG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":860,"column":1},"end":{"line":860,"column":1}},"children":[{"type":"text","value":"Now add error propagation functions:","position":{"start":{"line":860,"column":1},"end":{"line":860,"column":1}},"key":"NWkzPUkMHS"}],"key":"BLbtUyowEW"}],"key":"pd6g9h367A"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# photometry.py - Part 2: Error Propagation\ndef magnitude_error(flux, flux_error):\n    \"\"\"\n    Calculate magnitude error from flux error.\n    \n    σ_mag = 2.5 / ln(10) * σ_flux / flux ≈ 1.0857 * σ_flux / flux\n    \"\"\"\n    if flux <= 0:\n        return float('inf')\n    mag_error = 1.0857 * abs(flux_error / flux)\n    return mag_error\n\ndef combine_magnitudes(mags, errors):\n    \"\"\"Combine magnitudes with proper error propagation.\"\"\"\n    if len(mags) != len(errors):\n        raise ValueError(\"Magnitudes and errors must have same length\")\n    \n    # Convert to flux for proper averaging\n    fluxes = [magnitude_to_flux(m) for m in mags]\n    weights = [1/e**2 for e in errors]\n    \n    weighted_flux = sum(f*w for f, w in zip(fluxes, weights))\n    total_weight = sum(weights)\n    \n    mean_flux = weighted_flux / total_weight\n    mean_mag = flux_to_magnitude(mean_flux)\n    \n    # Error propagation\n    mean_error = 1.0 / (total_weight ** 0.5)\n    \n    return mean_mag, mean_error","key":"HocXXlNzCG"},{"type":"output","id":"PyewQl6zglGTGXp9FDfdU","data":[],"key":"fGU6pvFuFH"}],"key":"axwZpQ234i"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":896,"column":1},"end":{"line":896,"column":1}},"children":[{"type":"text","value":"Using Your Module","position":{"start":{"line":896,"column":1},"end":{"line":896,"column":1}},"key":"UqHachy6ue"}],"identifier":"using-your-module","label":"Using Your Module","html_id":"using-your-module","implicit":true,"key":"FBHZEm70tw"},{"type":"paragraph","position":{"start":{"line":898,"column":1},"end":{"line":898,"column":1}},"children":[{"type":"text","value":"Once you’ve created the module, you can import and use it:","position":{"start":{"line":898,"column":1},"end":{"line":898,"column":1}},"key":"iUOI1IIek1"}],"key":"RuQ1D4KCJ6"}],"key":"JCZTZwe0GK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Method 1: Import entire module\nimport photometry\n\nstar_flux = photometry.magnitude_to_flux(12.5)\nprint(f\"12.5 mag = {star_flux:.2e} flux units\")\n\n# Method 2: Import specific functions\nfrom photometry import combine_magnitudes\n\nobservations = [(12.35, 0.02), (12.38, 0.03), (12.33, 0.02)]\nmags = [m for m, e in observations]\nerrors = [e for m, e in observations]\n\ncombined_mag, combined_error = combine_magnitudes(mags, errors)\nprint(f\"Combined: {combined_mag:.3f} ± {combined_error:.3f}\")\n\n# Method 3: Import with alias\nimport photometry as phot\nerror = phot.magnitude_error(1000, 30)\nprint(f\"Magnitude error: {error:.3f}\")","key":"RYZ2lkA8K3"},{"type":"output","id":"0D9OIcfz-URyATOLUNzH-","data":[],"key":"kO6g7HxjIK"}],"key":"Y5IPcYzh0S"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":923,"column":1},"end":{"line":923,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":923,"column":1},"end":{"line":923,"column":1}},"key":"jlirXFAsHe"},{"type":"inlineCode","value":"if __name__ == \"__main__\"","position":{"start":{"line":923,"column":1},"end":{"line":923,"column":1}},"key":"UCNGkAg4wg"},{"type":"text","value":" Pattern","position":{"start":{"line":923,"column":1},"end":{"line":923,"column":1}},"key":"P0CwiBoWRq"}],"identifier":"the-if-name-main-pattern","label":"The if __name__ == \"__main__\" Pattern","html_id":"the-if-name-main-pattern","implicit":true,"key":"q4Z7eqwjJ0"},{"type":"paragraph","position":{"start":{"line":925,"column":1},"end":{"line":925,"column":1}},"children":[{"type":"text","value":"This essential pattern makes modules both importable and executable:","position":{"start":{"line":925,"column":1},"end":{"line":925,"column":1}},"key":"LcfVtf2AW9"}],"key":"KjBGiyMm6G"}],"key":"vn7Gh6NFgl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# photometry.py - Part 3: Test Code\nif __name__ == \"__main__\":\n    # This code ONLY runs when script is executed directly\n    # NOT when it's imported as a module\n    \n    print(\"Testing photometry module...\")\n    \n    # Test magnitude conversion\n    test_mag = 15.0\n    test_flux = magnitude_to_flux(test_mag)\n    recovered_mag = flux_to_magnitude(test_flux)\n    \n    print(f\"Original: {test_mag:.2f}\")\n    print(f\"Flux: {test_flux:.2e}\")\n    print(f\"Recovered: {recovered_mag:.2f}\")\n    \n    assert abs(recovered_mag - test_mag) < 1e-10, \"Conversion failed!\"\n    print(\"All tests passed!\")","key":"fx7qRyzFOL"},{"type":"output","id":"tsWf281sXeZ9O9m45HdDF","data":[],"key":"z4S8RNNmXO"}],"key":"TH87N8s9y5"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"children":[{"type":"text","value":"This pattern appears in every professional Python module because it enables:","position":{"start":{"line":948,"column":1},"end":{"line":948,"column":1}},"key":"xORcvvLEjC"}],"key":"uwa0mltJh4"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":949,"column":1},"end":{"line":953,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":949,"column":1},"end":{"line":949,"column":1}},"children":[{"type":"strong","position":{"start":{"line":949,"column":1},"end":{"line":949,"column":1}},"children":[{"type":"text","value":"Module testing","position":{"start":{"line":949,"column":1},"end":{"line":949,"column":1}},"key":"paI2g0MxbJ"}],"key":"OX5l4Bvykm"},{"type":"text","value":": Run tests without a separate test file","position":{"start":{"line":949,"column":1},"end":{"line":949,"column":1}},"key":"uVch6Kbw3o"}],"key":"EQFYhjKBYM"},{"type":"listItem","spread":true,"position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"children":[{"type":"strong","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"children":[{"type":"text","value":"Command-line interfaces","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"key":"lwfFtna2LT"}],"key":"Ed4g6dqMYN"},{"type":"text","value":": Make modules directly executable","position":{"start":{"line":950,"column":1},"end":{"line":950,"column":1}},"key":"LYv1MDWxvc"}],"key":"r6yoiSZf2O"},{"type":"listItem","spread":true,"position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"children":[{"type":"strong","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"children":[{"type":"text","value":"Examples","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"key":"TaekOE4HcS"}],"key":"sTC5uQlMNv"},{"type":"text","value":": Show how to use the module","position":{"start":{"line":951,"column":1},"end":{"line":951,"column":1}},"key":"mMpF7HZPIT"}],"key":"roLOOx8o75"},{"type":"listItem","spread":true,"position":{"start":{"line":952,"column":1},"end":{"line":953,"column":1}},"children":[{"type":"strong","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"children":[{"type":"text","value":"Development","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"IafLB4WYkS"}],"key":"kgF03uMYB8"},{"type":"text","value":": Quick testing during development","position":{"start":{"line":952,"column":1},"end":{"line":952,"column":1}},"key":"YEuuhjvIWe"}],"key":"ks4aSevSrw"}],"key":"QzOwKFSl3A"},{"type":"heading","depth":3,"position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"children":[{"type":"text","value":"Creating a Package","position":{"start":{"line":954,"column":1},"end":{"line":954,"column":1}},"key":"cCTnq4AIHT"}],"identifier":"creating-a-package","label":"Creating a Package","html_id":"creating-a-package","implicit":true,"key":"GHJF1d9p5O"},{"type":"paragraph","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"children":[{"type":"text","value":"As your project grows, organize related modules into packages:","position":{"start":{"line":956,"column":1},"end":{"line":956,"column":1}},"key":"i9KGWC32WV"}],"key":"rz1ElLWsEv"},{"type":"code","lang":"","value":"astro_tools/\n    __init__.py          # Makes it a package\n    photometry.py        # Photometric calculations\n    spectroscopy.py      # Spectral analysis\n    coordinates.py       # Coordinate transformations\n    constants.py         # Physical constants","position":{"start":{"line":958,"column":1},"end":{"line":965,"column":1}},"key":"yk0C0Py4bt"},{"type":"paragraph","position":{"start":{"line":967,"column":1},"end":{"line":967,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":967,"column":1},"end":{"line":967,"column":1}},"key":"tDOW87Y3HI"},{"type":"inlineCode","value":"__init__.py","position":{"start":{"line":967,"column":1},"end":{"line":967,"column":1}},"key":"CJTefs7WPX"},{"type":"text","value":" file defines what gets imported:","position":{"start":{"line":967,"column":1},"end":{"line":967,"column":1}},"key":"lYl3NwjB2d"}],"key":"qzp1SOg23a"},{"type":"code","lang":"python","value":"# astro_tools/__init__.py\n\"\"\"\nAstronomical analysis tools for research.\n\"\"\"\n\n# Import commonly used functions for convenience\nfrom .photometry import magnitude_to_flux, flux_to_magnitude\nfrom .constants import SPEED_OF_LIGHT, PARSEC_IN_AU\n\n# Package metadata\n__version__ = '0.1.0'\n__author__ = 'Your Name'\n\nprint(f\"Loading astro_tools v{__version__}\")","position":{"start":{"line":969,"column":1},"end":{"line":984,"column":1}},"key":"W0IjUhhjfZ"},{"type":"heading","depth":3,"position":{"start":{"line":986,"column":1},"end":{"line":986,"column":1}},"children":[{"type":"text","value":"⚠️ ","position":{"start":{"line":986,"column":1},"end":{"line":986,"column":1}},"key":"AMJtOvDIAf"},{"type":"strong","position":{"start":{"line":986,"column":1},"end":{"line":986,"column":1}},"children":[{"type":"text","value":"Common Bug Alert: The Relative Import Confusion","position":{"start":{"line":986,"column":1},"end":{"line":986,"column":1}},"key":"KqPOmYRbVK"}],"key":"gAMEAP4oPd"}],"identifier":"id-common-bug-alert-the-relative-import-confusion","label":"⚠️ Common Bug Alert: The Relative Import Confusion","html_id":"id-common-bug-alert-the-relative-import-confusion","implicit":true,"key":"ZlGdDc4MR4"},{"type":"code","lang":"python","value":"# This causes endless confusion when scripts move!\n\n# In observations/photometry.py\nfrom ..utils import calibration  # Relative import\n\n# Works when run as: python -m observations.photometry\n# Breaks when run as: python observations/photometry.py\n# Error: \"attempted relative import beyond top-level package\"\n\n# Also breaks if you move the file to a different directory!\n\n# SOLUTION: Use absolute imports or make proper packages\n# Better approach:\nfrom astro_tools.utils import calibration  # Absolute import\n\n# Or for development, add to path:\nimport sys\nimport os\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom utils import calibration","position":{"start":{"line":988,"column":1},"end":{"line":1009,"column":1}},"key":"UhMBbxJJcp"},{"type":"paragraph","position":{"start":{"line":1011,"column":1},"end":{"line":1011,"column":1}},"children":[{"type":"text","value":"This relative import problem has delayed countless research projects when code that worked perfectly in one directory structure breaks after reorganization. The Gaia data processing pipeline had to be restructured twice because relative imports made it impossible to run individual modules for testing. Always prefer absolute imports in scientific code—they’re clearer and more robust!","position":{"start":{"line":1011,"column":1},"end":{"line":1011,"column":1}},"key":"BlTvvNHgH4"}],"key":"jWsRrSHqi9"},{"type":"heading","depth":3,"position":{"start":{"line":1013,"column":1},"end":{"line":1013,"column":1}},"children":[{"type":"text","value":"Import Best Practices and Namespace Pollution","position":{"start":{"line":1013,"column":1},"end":{"line":1013,"column":1}},"key":"KGf2BUC7H5"}],"identifier":"import-best-practices-and-namespace-pollution","label":"Import Best Practices and Namespace Pollution","html_id":"import-best-practices-and-namespace-pollution","implicit":true,"key":"mtafeGsFad"}],"key":"QYjyl4BFhq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# GOOD: Clear, explicit imports\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time\n\n# BAD: Wildcard imports pollute namespace\n# from numpy import *  # Adds 600+ names!\n# from astropy.units import *  # Conflicts with numpy!\n\n# Example of namespace collision disaster\n# from numpy import *       # Has array, log, sin, etc.\n# from math import *         # Also has log, sin, etc.\n# result = log(10)  # Which log function? Math or numpy?\n\n# This caused a real bug in a published paper where\n# math.log (natural log) was confused with numpy.log10,\n# leading to incorrect stellar masses!\n\n# SAFE: Explicit namespaces prevent confusion\nimport numpy as np\nimport math\n\nnatural_log = math.log(10)      # Clear: natural logarithm\ncommon_log = np.log10(10)       # Clear: base-10 logarithm\nprint(f\"ln(10) = {natural_log:.2f}\")\nprint(f\"log₁₀(10) = {common_log:.2f}\")","key":"C7M77vyiHB"},{"type":"output","id":"T5yK0Ib0_Dt_OTNzsKYH7","data":[],"key":"OQdAjrdpjG"}],"key":"xCa5Pc8Uyz"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"children":[{"type":"text","value":"🔍 ","position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"key":"uSH0MAKYQK"},{"type":"strong","position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"children":[{"type":"text","value":"Check Your Understanding #5","position":{"start":{"line":1044,"column":1},"end":{"line":1044,"column":1}},"key":"ILpRqbyQF7"}],"key":"ojG7hZna49"}],"identifier":"id-check-your-understanding-5","label":"🔍 Check Your Understanding #5","html_id":"id-check-your-understanding-5","implicit":true,"key":"NFo15tB0WT"},{"type":"paragraph","position":{"start":{"line":1046,"column":1},"end":{"line":1046,"column":1}},"children":[{"type":"text","value":"Why is ","position":{"start":{"line":1046,"column":1},"end":{"line":1046,"column":1}},"key":"FL6EEuiPxe"},{"type":"inlineCode","value":"from math import *","position":{"start":{"line":1046,"column":1},"end":{"line":1046,"column":1}},"key":"FT8pR1CGeO"},{"type":"text","value":" particularly dangerous in scientific code?","position":{"start":{"line":1046,"column":1},"end":{"line":1046,"column":1}},"key":"rC7UIby6no"}],"key":"WrkSj7cGB3"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer","key":"EIzZVcWr8r"}],"key":"hHNN4Gpwhq"},{"type":"paragraph","children":[{"type":"text","value":"Wildcard imports are dangerous because:","key":"jBtgyZajRX"}],"key":"Wb9kemmPhQ"},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Name collisions","key":"yFnZFJILej"}],"key":"I7ieaEYXe7"},{"type":"text","value":" : Multiple libraries have functions with the same names (log, sqrt, sin, etc.)","key":"gpT4BYbPTP"}],"key":"pyVziOnpFI"}],"key":"RuCmMOXOyd"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Hidden overwrites","key":"Jn0oK7Ry3W"}],"key":"dBk2Z6Vxwk"},{"type":"text","value":" : Later imports silently replace earlier ones","key":"Io2lF5APZp"}],"key":"HIvqRxMiu5"}],"key":"XyMzRvTrmz"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Unclear source","key":"YzH7ASa8hN"}],"key":"l8yGsNCwQY"},{"type":"text","value":" : You can’t tell where a function comes from","key":"lYhOJzmqaN"}],"key":"mFersbG6QB"}],"key":"ye8cNjWSQH"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Namespace pollution","key":"YMIzlGhV9e"}],"key":"mpXx3AeVA9"},{"type":"text","value":" : Hundreds of names added to your namespace","key":"h0jkBTJ0gK"}],"key":"AmNuh2WjHG"}],"key":"lPcmUCv86y"}],"key":"LEXzQfTnf7"},{"type":"paragraph","children":[{"type":"text","value":"Real example that caused a retracted paper:","key":"SLKtR7q1Xh"}],"key":"AeXHakGME1"},{"type":"code","lang":"python","meta":null,"value":"from numpy import *      # Has log (natural logarithm)\nfrom math import *       # Also has log (natural logarithm)\nfrom scipy.special import *  # Has log1p (log(1+x))\n\n# Calculating stellar luminosity\nluminosity = log(flux)  # Which log? All three are natural log, but...\n# If someone later adds:\nfrom sympy import *     # Has log that might behave differently with symbols\n\n# The same code now might use a different log function!","key":"reR6vOD4qm"},{"type":"paragraph","children":[{"type":"text","value":"This is why professional astronomy packages always use explicit imports. The extra typing (","key":"NKCJMb4QsV"},{"type":"inlineCode","value":"np.log","key":"Om7QJbhDOg"},{"type":"text","value":") is worth the clarity and safety!","key":"zizzfwJIKR"}],"key":"vP8uiMHetr"}],"key":"z2nDkO4D7f"},{"type":"heading","depth":2,"position":{"start":{"line":1075,"column":1},"end":{"line":1075,"column":1}},"children":[{"type":"text","value":"5.6 Documentation and Testing","position":{"start":{"line":1075,"column":1},"end":{"line":1075,"column":1}},"key":"hWnaQxIomq"}],"identifier":"id-5-6-documentation-and-testing","label":"5.6 Documentation and Testing","html_id":"id-5-6-documentation-and-testing","implicit":true,"key":"sOJh7OdgSv"},{"type":"paragraph","position":{"start":{"line":1077,"column":1},"end":{"line":1077,"column":1}},"children":[{"type":"text","value":"Good documentation and basic testing make your functions trustworthy and reusable. This isn’t optional in scientific computing—undocumented, untested code has led to retracted papers and wasted telescope time.","position":{"start":{"line":1077,"column":1},"end":{"line":1077,"column":1}},"key":"Yp4PHtO22g"}],"key":"yQFR4hShZI"},{"type":"heading","depth":3,"position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"children":[{"type":"text","value":"Writing Good Docstrings","position":{"start":{"line":1079,"column":1},"end":{"line":1079,"column":1}},"key":"ezdFHJq4oG"}],"identifier":"writing-good-docstrings","label":"Writing Good Docstrings","html_id":"writing-good-docstrings","implicit":true,"key":"SjXyRb1Cfc"}],"key":"MvpeVLzA8F"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def fit_period(times, magnitudes, min_period=0.1, max_period=100.0):\n    \"\"\"\n    Find the best-fit period for a variable star.\n    \n    Uses Lomb-Scargle periodogram for unevenly sampled data.\n    \n    Parameters\n    ----------\n    times : array-like\n        Observation times in days (JD or MJD)\n    magnitudes : array-like\n        Measured magnitudes\n    min_period : float, optional\n        Minimum period to search (days), default 0.1\n    max_period : float, optional\n        Maximum period to search (days), default 100.0\n    \n    Returns\n    -------\n    best_period : float\n        Period with maximum power in periodogram\n    power : float\n        Normalized power at best period (0-1)\n    \n    Raises\n    ------\n    ValueError\n        If fewer than 10 observations provided\n    \n    Examples\n    --------\n    >>> times = np.linspace(0, 100, 200)\n    >>> mags = 12.0 + 0.5 * np.sin(2*np.pi*times/5.67)\n    >>> period, power = fit_period(times, mags)\n    >>> print(f\"Found period: {period:.2f} days\")\n    Found period: 5.67 days\n    \n    Notes\n    -----\n    The Lomb-Scargle periodogram is optimal for unevenly\n    sampled data typical of ground-based observations.\n    For space-based data with even sampling, FFT may be faster.\n    \n    References\n    ----------\n    .. [1] Lomb, N.R., 1976, Ap&SS, 39, 447\n    .. [2] Scargle, J.D., 1982, ApJ, 263, 835\n    \"\"\"\n    # Implementation would go here\n    pass","key":"tSIuVysQ0a"},{"type":"output","id":"vcZ-pI2M8OQnWZwW-ZIWb","data":[],"key":"IEzzQf63Xu"}],"key":"DV7r6DmP93"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"children":[{"type":"text","value":"Simple Testing with Assertions","position":{"start":{"line":1134,"column":1},"end":{"line":1134,"column":1}},"key":"EPSfuvAGYE"}],"identifier":"simple-testing-with-assertions","label":"Simple Testing with Assertions","html_id":"simple-testing-with-assertions","implicit":true,"key":"PiRGcbRIVX"}],"key":"zCayEOOt5m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def test_photometry_functions():\n    \"\"\"Test our photometry module functions.\"\"\"\n    \n    # Test magnitude-flux conversion round trip\n    original_mag = 15.0\n    flux = magnitude_to_flux(original_mag)\n    recovered_mag = flux_to_magnitude(flux)\n    \n    assert abs(recovered_mag - original_mag) < 1e-10, \\\n        f\"Round trip failed: {original_mag} → {recovered_mag}\"\n    \n    # Test error propagation\n    mag_error = magnitude_error(1000, 30)\n    expected_error = 1.0857 * 30 / 1000\n    \n    assert abs(mag_error - expected_error) < 1e-6, \\\n        f\"Error calculation wrong: {mag_error} vs {expected_error}\"\n    \n    # Test edge cases\n    inf_mag = flux_to_magnitude(0)  # Zero flux\n    assert inf_mag == float('inf'), \"Zero flux should give infinite magnitude\"\n    \n    # Test combination with equal weights\n    mags = [12.0, 12.0, 12.0]\n    errors = [0.1, 0.1, 0.1]\n    combined_mag, combined_err = combine_magnitudes(mags, errors)\n    \n    assert abs(combined_mag - 12.0) < 1e-10, \"Combined magnitude wrong\"\n    assert combined_err < 0.1, \"Combined error should be smaller\"\n    \n    print(\"All photometry tests passed! ✓\")\n\n# Run tests\ntest_photometry_functions()","key":"eFFd8GtrrG"},{"type":"output","id":"TUdqqR5PIBAvrRs0uFvXt","data":[],"key":"R56ZovYI4c"}],"key":"AsVWGjK9fP"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1173,"column":1},"end":{"line":1173,"column":1}},"children":[{"type":"text","value":"🛠️ ","position":{"start":{"line":1173,"column":1},"end":{"line":1173,"column":1}},"key":"RZE2JltNf5"},{"type":"strong","position":{"start":{"line":1173,"column":1},"end":{"line":1173,"column":1}},"children":[{"type":"text","value":"Debug This!","position":{"start":{"line":1173,"column":1},"end":{"line":1173,"column":1}},"key":"JeMmJu2zcW"}],"key":"DaHXrxZOMO"}],"identifier":"id-debug-this","label":"🛠️ Debug This!","html_id":"id-debug-this","implicit":true,"key":"ntv5CUb2hS"},{"type":"paragraph","position":{"start":{"line":1175,"column":1},"end":{"line":1175,"column":1}},"children":[{"type":"text","value":"This function has a subtle performance bug. Can you spot it?","position":{"start":{"line":1175,"column":1},"end":{"line":1175,"column":1}},"key":"JjyxXPsrP6"}],"key":"i7BUzkGExC"},{"type":"code","lang":"python","value":"def find_variables(catalog):\n    \"\"\"Find variable stars in a catalog - HAS PERFORMANCE BUG.\"\"\"\n    variables = []\n    \n    for star in catalog:\n        # Calculate variability index\n        mags = star['magnitudes']\n        mean_mag = sum(mags) / len(mags)\n        \n        # Check if variable (BUG HERE!)\n        if star not in variables and std_dev(mags) > 0.1:\n            variables.append(star)\n    \n    return variables\n\ndef std_dev(values):\n    \"\"\"Calculate standard deviation.\"\"\"\n    mean = sum(values) / len(values)\n    variance = sum((x - mean)**2 for x in values) / len(values)\n    return variance ** 0.5","position":{"start":{"line":1177,"column":1},"end":{"line":1198,"column":1}},"key":"VhTDetiZEu"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"Answer and Fix","key":"q0yn7pYQtu"}],"key":"uuHrM1vS30"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bug","key":"d7L5CspZgo"}],"key":"Hijj435Z3i"},{"type":"text","value":": ","key":"VrCzwu3AZr"},{"type":"inlineCode","value":"if star not in variables","key":"jPDhKMNEzP"},{"type":"text","value":" is O(n) for lists! For a catalog of 10,000 stars, this becomes O(n²) total complexity—extremely slow.","key":"mLhgYETNk4"}],"key":"Yzezv5cReG"},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Fix","key":"ivccu43RSM"}],"key":"g7pxOT8f4C"},{"type":"text","value":": Track seen stars with a set for O(1) lookup:","key":"erdBuiAI3x"}],"key":"fvFaR61tpc"},{"type":"code","lang":"python","meta":null,"value":"def find_variables_fixed(catalog):\n    \"\"\"Find variable stars efficiently.\"\"\"\n    variables = []\n    seen_ids = set()  # O(1) membership testing\n    \n    for star in catalog:\n        mags = star['magnitudes']\n        \n        # Check if variable\n        if star['id'] not in seen_ids and std_dev(mags) > 0.1:\n            variables.append(star)\n            seen_ids.add(star['id'])\n    \n    return variables","key":"Cgsd1LA927"},{"type":"paragraph","children":[{"type":"text","value":"For 10,000 stars:","key":"xTulFMjAAU"}],"key":"yKAwGUbSde"},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Original: ~5 seconds","key":"sN41Lh3DqY"}],"key":"IwcE5glEFx"}],"key":"I6lbNxnjGl"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fixed: ~0.05 seconds","key":"jnngrXugd4"}],"key":"B3WzhC9IoN"}],"key":"iCMQcUuPTc"},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"100x speedup!","key":"AQe1YFAhpJ"}],"key":"aARiCXYbvU"}],"key":"C8j3zzzRzB"}],"key":"TbCX4VoFXK"},{"type":"paragraph","children":[{"type":"text","value":"This exact bug appeared in the Kepler pipeline early versions, causing hours of unnecessary computation.","key":"IEKxI94yPi"}],"key":"jZRaydRNTl"}],"key":"Cya9ckP8hW"},{"type":"heading","depth":2,"position":{"start":{"line":1233,"column":1},"end":{"line":1233,"column":1}},"children":[{"type":"text","value":"5.7 Performance Considerations","position":{"start":{"line":1233,"column":1},"end":{"line":1233,"column":1}},"key":"qYocBIG2Bv"}],"identifier":"id-5-7-performance-considerations","label":"5.7 Performance Considerations","html_id":"id-5-7-performance-considerations","implicit":true,"key":"gvknTKnBCP"},{"type":"paragraph","position":{"start":{"line":1235,"column":1},"end":{"line":1235,"column":1}},"children":[{"type":"text","value":"How much do all these abstractions cost? Now let’s measure what we’ve been discussing throughout this chapter! Performance matters in astronomy where we process terabytes of data. Understanding function call overhead and optimization techniques can mean the difference between results in hours versus days. Remember when we mentioned function overhead in the first section? Let’s quantify exactly what that means for your code.","position":{"start":{"line":1235,"column":1},"end":{"line":1235,"column":1}},"key":"EpCZ6vFGsj"}],"key":"nY0S6qKqki"},{"type":"heading","depth":3,"position":{"start":{"line":1237,"column":1},"end":{"line":1237,"column":1}},"children":[{"type":"text","value":"📊 ","position":{"start":{"line":1237,"column":1},"end":{"line":1237,"column":1}},"key":"zVtYlgw7wD"},{"type":"strong","position":{"start":{"line":1237,"column":1},"end":{"line":1237,"column":1}},"children":[{"type":"text","value":"Performance Profile: Function Call Overhead Analysis","position":{"start":{"line":1237,"column":1},"end":{"line":1237,"column":1}},"key":"HjeAj837WE"}],"key":"kCsOhLbhGa"}],"identifier":"id-performance-profile-function-call-overhead-analysis","label":"📊 Performance Profile: Function Call Overhead Analysis","html_id":"id-performance-profile-function-call-overhead-analysis","implicit":true,"key":"Uvg5f5ElMN"},{"type":"paragraph","position":{"start":{"line":1239,"column":1},"end":{"line":1239,"column":1}},"children":[{"type":"text","value":"Let’s measure the real cost of function calls at different complexity levels, building on what we’ve learned:","position":{"start":{"line":1239,"column":1},"end":{"line":1239,"column":1}},"key":"CSKZ7Yiagg"}],"key":"WIu7rPSy5b"}],"key":"YxajYU7EcP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import time\nimport numpy as np\n\ndef trivial_function(x):\n    \"\"\"Trivial operation - overhead dominates.\"\"\"\n    return x + 1\n\ndef moderate_function(x):\n    \"\"\"Moderate complexity - overhead noticeable.\"\"\"\n    return (x ** 2 + 2 * x + 1) / (x + 1)\n\ndef complex_function(x):\n    \"\"\"Complex operation - overhead negligible.\"\"\"\n    import math\n    result = 0\n    for i in range(10):\n        result += math.sin(x + i) * math.cos(x - i)\n    return result / 10\n\n# Test with 100,000 calls\nn_calls = 100000\ntest_value = 3.14\n\n# Trivial function\nstart = time.time()\nfor _ in range(n_calls):\n    trivial_function(test_value)\ntrivial_time = time.time() - start\n\n# Inline version of trivial\nstart = time.time()\nfor _ in range(n_calls):\n    result = test_value + 1\ninline_time = time.time() - start\n\n# Moderate function\nstart = time.time()\nfor _ in range(n_calls):\n    moderate_function(test_value)\nmoderate_time = time.time() - start\n\n# Complex function\nstart = time.time()\nfor _ in range(n_calls):\n    complex_function(test_value)\ncomplex_time = time.time() - start\n\nprint(\"Function Call Overhead Analysis:\")\nprint(f\"Trivial:  {trivial_time*1000:.1f}ms (inline: {inline_time*1000:.1f}ms)\")\nprint(f\"  → Overhead: {(trivial_time/inline_time - 1)*100:.0f}%\")\nprint(f\"Moderate: {moderate_time*1000:.1f}ms\")\nprint(f\"Complex:  {complex_time*1000:.1f}ms\")\nprint(f\"\\nLesson: Function overhead only matters for trivial operations in tight loops!\")\nprint(\"This is why NumPy's vectorized operations are so powerful—\")\nprint(\"they move the loop into compiled C code, eliminating Python overhead entirely!\")","key":"vms6Vm3aGf"},{"type":"output","id":"E5ZRw3lS5OYFZJOnUJZLb","data":[],"key":"pbvzN75ICE"}],"key":"xkpZ96U50c"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1299,"column":1},"end":{"line":1299,"column":1}},"children":[{"type":"text","value":"The pattern is clear: function call overhead is significant for trivial operations but becomes negligible as complexity increases. This validates our approach throughout this chapter—use functions for organization and clarity, and only worry about overhead when profiling reveals it’s actually a problem!","position":{"start":{"line":1299,"column":1},"end":{"line":1299,"column":1}},"key":"xqo4nJXVWp"}],"key":"ZufRPFTMPi"},{"type":"heading","depth":3,"position":{"start":{"line":1301,"column":1},"end":{"line":1301,"column":1}},"children":[{"type":"text","value":"When Function Overhead Matters","position":{"start":{"line":1301,"column":1},"end":{"line":1301,"column":1}},"key":"vArxDVzO30"}],"identifier":"when-function-overhead-matters","label":"When Function Overhead Matters","html_id":"when-function-overhead-matters","implicit":true,"key":"NpYe9WLY72"}],"key":"bMmEXKsdlJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# CASE 1: Overhead negligible - complex function\ndef fit_blackbody(wavelengths, fluxes, temp_guess=5000):\n    \"\"\"Complex calculation - function overhead insignificant.\"\"\"\n    # Lots of computation here\n    # ... fitting algorithm ...\n    return best_temp\n\n# CASE 2: Overhead matters - trivial function in tight loop\ndef add_constant(x, c):\n    return x + c\n\n# Bad: Calling trivial function millions of times\n# for i in range(1_000_000):\n#     result = add_constant(data[i], 2.5)  # Slow!\n\n# Good: Inline the operation or vectorize\n# result = data + 2.5  # Much faster!","key":"oRDpZX7jnj"},{"type":"output","id":"ggY-pSBkfUQshkumd8vGq","data":[],"key":"pVpkChwGLx"}],"key":"guQxxhySUJ"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1323,"column":1},"end":{"line":1323,"column":1}},"children":[{"type":"text","value":"📊 ","position":{"start":{"line":1323,"column":1},"end":{"line":1323,"column":1}},"key":"BHfjGkTe2O"},{"type":"strong","position":{"start":{"line":1323,"column":1},"end":{"line":1323,"column":1}},"children":[{"type":"text","value":"Performance Profile: Import Time Costs","position":{"start":{"line":1323,"column":1},"end":{"line":1323,"column":1}},"key":"HHj0Hy2I9W"}],"key":"tWHnSey3L5"}],"identifier":"id-performance-profile-import-time-costs","label":"📊 Performance Profile: Import Time Costs","html_id":"id-performance-profile-import-time-costs","implicit":true,"key":"QRfNMOMOyB"},{"type":"paragraph","position":{"start":{"line":1325,"column":1},"end":{"line":1325,"column":1}},"children":[{"type":"text","value":"Module imports have a one-time cost that can affect program startup. Let’s measure the overhead:","position":{"start":{"line":1325,"column":1},"end":{"line":1325,"column":1}},"key":"oviD1MGw21"}],"key":"D9OSA3v5B5"}],"key":"xdufu4HjP8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import time\nimport sys\n\n# Measure import times for common astronomy packages\ndef measure_import_time(module_name):\n    \"\"\"Measure time to import a module.\"\"\"\n    # Remove from sys.modules if already imported\n    if module_name in sys.modules:\n        del sys.modules[module_name]\n    \n    start = time.time()\n    try:\n        exec(f\"import {module_name}\")\n        elapsed = (time.time() - start) * 1000\n        return elapsed\n    except ImportError:\n        return None\n\n# Test common modules (some may not be installed)\nmodules_to_test = [\n    'math',           # Built-in, very fast\n    'datetime',       # Standard library\n    'json',          # Standard library\n    'numpy',         # Large scientific package\n    'astropy',       # Even larger!\n    'matplotlib.pyplot',  # Heavy with backends\n]\n\nprint(\"Module Import Time Analysis:\")\nprint(\"-\" * 40)\n\nfor module in modules_to_test:\n    time_ms = measure_import_time(module)\n    if time_ms is not None:\n        print(f\"{module:20s}: {time_ms:6.1f} ms\")\n    else:\n        print(f\"{module:20s}: Not installed\")\n\nprint(\"-\" * 40)\nprint(\"\\nImplications for your code:\")\nprint(\"• Import heavy modules only when needed\")\nprint(\"• Consider lazy imports for optional features\")\nprint(\"• Module import happens once per interpreter session\")\nprint(\"• In scripts that run many times, import cost adds up!\")\n\n# Example of lazy import pattern\ndef analyze_with_plotting(data, make_plot=False):\n    \"\"\"Only import matplotlib if actually plotting.\"\"\"\n    result = data.mean()  # Basic analysis always happens\n    \n    if make_plot:\n        # Lazy import - only pay cost if needed\n        import matplotlib.pyplot as plt\n        plt.plot(data)\n        plt.show()\n    \n    return result","key":"hNcE8KbcWp"},{"type":"output","id":"-QaW6wHscEIWrqtbvm50Z","data":[],"key":"uoSpewMDDF"}],"key":"RAvkW6dxnf"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"children":[{"type":"text","value":"This pattern appears in many astronomy packages where heavy dependencies (like matplotlib or astropy) are only imported when specific features are used. The Fermi LAT analysis tools use lazy imports extensively, reducing startup time from 5+ seconds to under 0.5 seconds for basic operations!","position":{"start":{"line":1387,"column":1},"end":{"line":1387,"column":1}},"key":"TJaN8VpaLz"}],"key":"F8DNfWyArm"},{"type":"heading","depth":3,"position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"children":[{"type":"text","value":"Memoization for Expensive Calculations","position":{"start":{"line":1389,"column":1},"end":{"line":1389,"column":1}},"key":"otifD893f4"}],"identifier":"memoization-for-expensive-calculations","label":"Memoization for Expensive Calculations","html_id":"memoization-for-expensive-calculations","implicit":true,"key":"XFlcAorttR"},{"type":"paragraph","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"children":[{"type":"text","value":"Cache results of expensive computations—essential for period finding and model fitting. This technique is critical for expensive coordinate transformations (like converting between reference frames repeatedly) and any calculation where the same inputs produce the same outputs:","position":{"start":{"line":1391,"column":1},"end":{"line":1391,"column":1}},"key":"Tj3pqElQTU"}],"key":"zpJhQ84KzM"}],"key":"GK4F9KVV0F"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef expensive_periodogram(n_points, n_frequencies):\n    \"\"\"\n    Simulate expensive Lomb-Scargle calculation.\n    Results are automatically cached.\n    \n    In real astronomy: period-finding algorithms often test\n    thousands of frequencies on the same data. Caching results\n    for attempted periods saves enormous computation time!\n    \"\"\"\n    import time\n    \n    # Simulate expensive computation\n    time.sleep(0.1)  # Pretend this takes 100ms\n    \n    # Fake result\n    result = n_points * n_frequencies * 3.14159\n    return result\n\n# First call: slow (100ms)\nimport time\nstart = time.time()\nresult1 = expensive_periodogram(1000, 10000)\nprint(f\"First call: {(time.time()-start)*1000:.1f} ms\")\n\n# Second call with same inputs: instant (from cache)!\nstart = time.time()\nresult2 = expensive_periodogram(1000, 10000)\nprint(f\"Second call: {(time.time()-start)*1000:.1f} ms\")\n\n# Check cache statistics\nprint(f\"Cache info: {expensive_periodogram.cache_info()}\")\nprint(\"\\nIn real astronomical pipelines, memoization can turn hours\")\nprint(\"of computation into minutes when analyzing multiple filters\")\nprint(\"or when users repeatedly adjust period ranges!\")","key":"rimLUU60cA"},{"type":"output","id":"A9FEcDveRg9d4u-PpCj3l","data":[],"key":"rKpwn3R2vI"}],"key":"TxraZW3E11"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1433,"column":1},"end":{"line":1433,"column":1}},"children":[{"type":"text","value":"This exact technique saved the Kepler team enormous computational resources when searching for exoplanet transits—the same period often gets tested multiple times with slightly different detrending, and caching the expensive periodogram calculations made interactive analysis possible!","position":{"start":{"line":1433,"column":1},"end":{"line":1433,"column":1}},"key":"RqPPmNnas6"}],"key":"YmqSFoukhV"},{"type":"code","lang":"","value":"\n### 💡 **Computational Thinking: Performance Patterns**\n","position":{"start":{"line":1434,"column":1},"end":{"line":1438,"column":1}},"key":"jhuj0H3PHf"},{"type":"paragraph","position":{"start":{"line":1439,"column":1},"end":{"line":1439,"column":1}},"children":[{"type":"text","value":"OPTIMIZATION HIERARCHY (try in order):","position":{"start":{"line":1439,"column":1},"end":{"line":1439,"column":1}},"key":"smYPvZmSu2"}],"key":"TkfjQ99opZ"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":1441,"column":1},"end":{"line":1460,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1441,"column":1},"end":{"line":1444,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1441,"column":1},"end":{"line":1443,"column":1}},"children":[{"type":"text","value":"Better Algorithm\nO(n²) → O(n log n): 10,000x speedup for n=100,000\nExample: Brute force → FFT for period finding","position":{"start":{"line":1441,"column":1},"end":{"line":1441,"column":1}},"key":"QvlGUeO6tI"}],"key":"V0m9fF5xVK"}],"key":"r4GdCWYCPe"},{"type":"listItem","spread":true,"position":{"start":{"line":1445,"column":1},"end":{"line":1448,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1445,"column":1},"end":{"line":1447,"column":1}},"children":[{"type":"text","value":"Vectorization\nPython loop → NumPy: 10-100x speedup\nExample: Magnitude correction on arrays","position":{"start":{"line":1445,"column":1},"end":{"line":1445,"column":1}},"key":"Uz8OT6knC4"}],"key":"w8cUNXhCVJ"}],"key":"qkKBnwRiHK"},{"type":"listItem","spread":true,"position":{"start":{"line":1449,"column":1},"end":{"line":1452,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1449,"column":1},"end":{"line":1451,"column":1}},"children":[{"type":"text","value":"Caching/Memoization\nRecomputation → Lookup: ∞ speedup for repeated calls\nExample: Coordinate transformations","position":{"start":{"line":1449,"column":1},"end":{"line":1449,"column":1}},"key":"rJbq4EMQ7v"}],"key":"puoJ9fisUz"}],"key":"juofxIhHDe"},{"type":"listItem","spread":true,"position":{"start":{"line":1453,"column":1},"end":{"line":1456,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1453,"column":1},"end":{"line":1455,"column":1}},"children":[{"type":"text","value":"Parallelization\nSingle core → Multiple cores: ~N_cores speedup\nExample: Processing multiple stars independently","position":{"start":{"line":1453,"column":1},"end":{"line":1453,"column":1}},"key":"SCPkbR1oQS"}],"key":"cLQKEFb33Z"}],"key":"jKqGl620wF"},{"type":"listItem","spread":true,"position":{"start":{"line":1457,"column":1},"end":{"line":1460,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":1457,"column":1},"end":{"line":1459,"column":1}},"children":[{"type":"text","value":"Compiled Code\nPython → Numba/Cython: 10-100x speedup\nExample: Pixel-by-pixel operations","position":{"start":{"line":1457,"column":1},"end":{"line":1457,"column":1}},"key":"LpafydRihU"}],"key":"CeRCBStevj"}],"key":"RK9EbFEu7S"}],"key":"yLWPUKBuZp"},{"type":"paragraph","position":{"start":{"line":1461,"column":1},"end":{"line":1461,"column":1}},"children":[{"type":"text","value":"Don’t optimize prematurely, but know these options exist!","position":{"start":{"line":1461,"column":1},"end":{"line":1461,"column":1}},"key":"FwngrH7W9C"}],"key":"knuLvXUosD"},{"type":"code","lang":"","value":"\n## Practice Exercises\n\n### Exercise 5.1: Quick Practice - Create Reusable Analysis Functions\n\nLet's start by creating a fundamental building block for light curve analysis. This function will become part of your photometry toolkit:\n\n```python\n\"\"\"\nCreate a robust amplitude calculation function.\n\nRequirements:\n1. Write calculate_amplitude(magnitudes) that returns max - min\n2. Handle edge cases: empty list, single value, None values\n3. Remember: smaller magnitude = brighter! (amplitude is still max - min)\n4. Test with real Cepheid data from 'cepheid_simple.txt'\n\nFile format for cepheid_simple.txt:\n# Time(JD)  Magnitude  Error\n2458123.512  12.35  0.02\n2458123.538  12.28  0.03\n... (20-30 observations)\n\nStarter code:\n\"\"\"\n\ndef calculate_amplitude(magnitudes):\n    \"\"\"\n    Calculate peak-to-peak amplitude of magnitude variations.\n    \n    Parameters\n    ----------\n    magnitudes : list or array-like\n        Magnitude measurements\n        \n    Returns\n    -------\n    float\n        Amplitude (max - min), or 0.0 for invalid input\n    \"\"\"\n    # Handle edge cases first\n    if not magnitudes or len(magnitudes) == 0:\n        return 0.0\n    \n    if len(magnitudes) == 1:\n        return 0.0  # No variation with single point\n    \n    # Filter out None values if present\n    valid_mags = [m for m in magnitudes if m is not None]\n    \n    if not valid_mags:\n        return 0.0\n    \n    # Calculate amplitude\n    return max(valid_mags) - min(valid_mags)\n\n# Test with real data\ndef test_amplitude():\n    \"\"\"Test amplitude calculation with Cepheid data.\"\"\"\n    # Read the data (you learned this in Chapter 1!)\n    times, mags, errors = [], [], []\n    \n    with open('cepheid_simple.txt', 'r') as f:\n        for line in f:\n            if line.startswith('#'):\n                continue\n            parts = line.split()\n            if len(parts) >= 2:\n                times.append(float(parts[0]))\n                mags.append(float(parts[1]))\n    \n    amp = calculate_amplitude(mags)\n    print(f\"Cepheid amplitude: {amp:.3f} magnitudes\")\n    \n    # Test edge cases\n    assert calculate_amplitude([]) == 0.0\n    assert calculate_amplitude([12.5]) == 0.0\n    assert calculate_amplitude([12.0, 12.5, None, 11.8]) == 0.7\n    print(\"All tests passed!\")\n\nif __name__ == \"__main__\":\n    test_amplitude()","position":{"start":{"line":1462,"column":1},"end":{"line":1545,"column":1}},"key":"sZLSHlkfDH"},{"type":"heading","depth":3,"position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"children":[{"type":"text","value":"Exercise 5.2: Synthesis - Build a Light Curve Analysis Module","position":{"start":{"line":1547,"column":1},"end":{"line":1547,"column":1}},"key":"BLaQsyhoYH"}],"identifier":"exercise-5-2-synthesis-build-a-light-curve-analysis-module","label":"Exercise 5.2: Synthesis - Build a Light Curve Analysis Module","html_id":"exercise-5-2-synthesis-build-a-light-curve-analysis-module","implicit":true,"key":"BLnx8iRFKT"},{"type":"paragraph","position":{"start":{"line":1549,"column":1},"end":{"line":1549,"column":1}},"children":[{"type":"text","value":"Now let’s combine multiple functions into a comprehensive module. This demonstrates how real astronomical software is organized:","position":{"start":{"line":1549,"column":1},"end":{"line":1549,"column":1}},"key":"WeJCM6xvdz"}],"key":"h5U5fDsmy7"},{"type":"code","lang":"python","value":"\"\"\"\nCreate lightcurve.py - a complete light curve analysis module.\n\nThis module will contain all the functions needed for basic\nvariable star analysis, building on what you created above.\n\nRequirements:\n1. Create a module with proper docstring\n2. Include all functions listed below\n3. Add validation and error handling\n4. Test with 'rr_lyrae_realistic.txt' (has gaps and bad data!)\n5. Use if __name__ == \"__main__\" for comprehensive testing\n\nFile format for rr_lyrae_realistic.txt:\n# Time(MJD)  Magnitude  Error  Quality_Flag\n58123.512  14.35  0.02  1\n58123.538  14.28  0.03  1\n58123.564  99.99  9.99  0  # Bad measurement\n... (100-200 observations with gaps)\n\"\"\"\n\n# lightcurve.py\n\"\"\"\nLight curve analysis tools for variable star research.\n\nThis module provides functions for loading, analyzing, and\nphase-folding photometric time series of variable stars.\n\"\"\"\n\nimport math\n\ndef load_observations(filename, skip_bad=True):\n    \"\"\"\n    Load photometric observations from file.\n    \n    Parameters\n    ----------\n    filename : str\n        Path to observation file\n    skip_bad : bool\n        Skip observations with quality_flag = 0\n        \n    Returns\n    -------\n    tuple\n        (times, magnitudes, errors) as lists\n    \"\"\"\n    times, mags, errors = [], [], []\n    \n    with open(filename, 'r') as f:\n        for line in f:\n            if line.startswith('#') or not line.strip():\n                continue\n                \n            parts = line.split()\n            if len(parts) >= 3:\n                # Check quality flag if present\n                if len(parts) >= 4 and skip_bad:\n                    if int(parts[3]) == 0:\n                        continue  # Skip bad data\n                \n                # Only add good data\n                time = float(parts[0])\n                mag = float(parts[1])\n                err = float(parts[2])\n                \n                # Additional validation\n                if mag < 30 and err < 5:  # Reasonable values\n                    times.append(time)\n                    mags.append(mag)\n                    errors.append(err)\n    \n    return times, mags, errors\n\ndef calculate_amplitude(mags):\n    \"\"\"Calculate peak-to-peak amplitude.\"\"\"\n    if not mags or len(mags) < 2:\n        return 0.0\n    return max(mags) - min(mags)\n\ndef estimate_period_simple(times, mags):\n    \"\"\"\n    Simple period estimation using peak finding.\n    \n    Finds time between brightness maxima (minima in magnitude).\n    This is a naive approach - real period finding uses FFT or Lomb-Scargle!\n    \"\"\"\n    if len(times) < 3:\n        return None\n    \n    # Find local minima (brightness maxima)\n    minima_times = []\n    for i in range(1, len(mags) - 1):\n        if mags[i] < mags[i-1] and mags[i] < mags[i+1]:\n            minima_times.append(times[i])\n    \n    if len(minima_times) < 2:\n        return None\n    \n    # Calculate average spacing between minima\n    spacings = []\n    for i in range(1, len(minima_times)):\n        spacings.append(minima_times[i] - minima_times[i-1])\n    \n    if spacings:\n        return sum(spacings) / len(spacings)\n    return None\n\ndef phase_fold(times, mags, period, epoch=0.0):\n    \"\"\"\n    Fold light curve at given period.\n    \n    Parameters\n    ----------\n    times : list\n        Observation times\n    mags : list\n        Magnitudes\n    period : float\n        Period to fold at (same units as times)\n    epoch : float\n        Reference epoch for phase zero\n        \n    Returns\n    -------\n    tuple\n        (phases, folded_mags) where phases are 0-1\n    \"\"\"\n    phases = []\n    for t in times:\n        phase = ((t - epoch) % period) / period\n        phases.append(phase)\n    \n    return phases, mags\n\n# Module testing\nif __name__ == \"__main__\":\n    print(\"Testing light curve analysis module...\")\n    \n    # Test with RR Lyrae data\n    times, mags, errors = load_observations('rr_lyrae_realistic.txt')\n    print(f\"Loaded {len(times)} good observations\")\n    \n    # Calculate amplitude\n    amp = calculate_amplitude(mags)\n    print(f\"Amplitude: {amp:.3f} magnitudes\")\n    \n    # Estimate period\n    period_guess = estimate_period_simple(times, mags)\n    if period_guess:\n        print(f\"Estimated period: {period_guess:.3f} days\")\n        \n        # Try phase folding\n        phases, folded = phase_fold(times, mags, period_guess)\n        print(f\"Phase folded {len(phases)} observations\")\n    else:\n        print(\"Could not estimate period with simple method\")\n    \n    print(\"\\nModule test complete!\")","position":{"start":{"line":1551,"column":1},"end":{"line":1711,"column":1}},"key":"JbdTjnVNNx"},{"type":"heading","depth":3,"position":{"start":{"line":1713,"column":1},"end":{"line":1713,"column":1}},"children":[{"type":"text","value":"Exercise 5.3: Challenge - Functional Approach to Data Filtering","position":{"start":{"line":1713,"column":1},"end":{"line":1713,"column":1}},"key":"kFXF4N91Oz"}],"identifier":"exercise-5-3-challenge-functional-approach-to-data-filtering","label":"Exercise 5.3: Challenge - Functional Approach to Data Filtering","html_id":"exercise-5-3-challenge-functional-approach-to-data-filtering","implicit":true,"key":"YCBuSjs8kw"},{"type":"paragraph","position":{"start":{"line":1715,"column":1},"end":{"line":1715,"column":1}},"children":[{"type":"text","value":"This advanced exercise demonstrates how functional programming revolutionizes astronomical data processing:","position":{"start":{"line":1715,"column":1},"end":{"line":1715,"column":1}},"key":"YNdGYChscl"}],"key":"hJnx5gTCUF"},{"type":"code","lang":"python","value":"\"\"\"\nImplement a functional pipeline for photometric data processing.\n\nThis exercise shows how functional programming patterns create\nclean, testable, parallelizable code for real astronomy work.\n\nRequirements:\n1. Use map/filter/reduce for the entire pipeline\n2. Compare performance with traditional loops\n3. Implement memoization for period finding\n4. NO explicit for loops in functional version!\n\nThis demonstrates concepts used in modern frameworks like JAX!\n\"\"\"\n\nfrom functools import reduce, lru_cache\nimport time\n\ndef traditional_pipeline(observations):\n    \"\"\"Traditional loop-based approach.\"\"\"\n    # Filter bad observations\n    good_obs = []\n    for obs in observations:\n        if obs['error'] <= 0.1 and obs['mag'] < 90:\n            good_obs.append(obs)\n    \n    # Convert magnitude to flux\n    fluxes = []\n    for obs in good_obs:\n        flux = 10 ** (-0.4 * obs['mag'])\n        fluxes.append(flux)\n    \n    # Calculate mean flux\n    if fluxes:\n        mean_flux = sum(fluxes) / len(fluxes)\n    else:\n        mean_flux = 0\n    \n    return mean_flux\n\ndef functional_pipeline(observations):\n    \"\"\"Functional approach - no explicit loops!\"\"\"\n    # Filter bad observations\n    good_obs = filter(\n        lambda obs: obs['error'] <= 0.1 and obs['mag'] < 90,\n        observations\n    )\n    \n    # Map magnitude to flux\n    fluxes = map(\n        lambda obs: 10 ** (-0.4 * obs['mag']),\n        good_obs\n    )\n    \n    # Reduce to find mean\n    flux_list = list(fluxes)  # Need to materialize for len()\n    if flux_list:\n        total_flux = reduce(lambda a, b: a + b, flux_list)\n        mean_flux = total_flux / len(flux_list)\n    else:\n        mean_flux = 0\n    \n    return mean_flux\n\n# Memoized period finder for expensive calculations\n@lru_cache(maxsize=1000)\ndef find_period_memoized(times_tuple, mags_tuple, test_period):\n    \"\"\"\n    Expensive period testing function with memoization.\n    \n    Note: lru_cache requires hashable arguments (tuples, not lists).\n    This caches results of expensive calculations automatically!\n    \"\"\"\n    # Simulate expensive Lomb-Scargle calculation\n    time.sleep(0.001)  # Pretend this is expensive\n    \n    # Simple chi-squared for phase dispersion\n    times = list(times_tuple)\n    mags = list(mags_tuple)\n    \n    phases = [(t % test_period) / test_period for t in times]\n    phase_mags = sorted(zip(phases, mags))\n    \n    # Calculate dispersion\n    chi_squared = 0\n    for i in range(len(phase_mags) - 1):\n        chi_squared += (phase_mags[i+1][1] - phase_mags[i][1]) ** 2\n    \n    return chi_squared / len(phase_mags) if phase_mags else float('inf')\n\n# Performance comparison\ndef compare_approaches():\n    \"\"\"Compare traditional vs functional performance.\"\"\"\n    \n    # Generate realistic observations\n    import random\n    observations = []\n    for i in range(10000):\n        observations.append({\n            'time': i * 0.01,\n            'mag': 12.0 + random.gauss(0, 0.5),\n            'error': abs(random.gauss(0.03, 0.02))\n        })\n    \n    # Add some bad data\n    for i in range(100):\n        observations[random.randint(0, 9999)]['mag'] = 99.99\n    \n    # Time traditional approach\n    start = time.time()\n    trad_result = traditional_pipeline(observations)\n    trad_time = time.time() - start\n    \n    # Time functional approach\n    start = time.time()\n    func_result = functional_pipeline(observations)\n    func_time = time.time() - start\n    \n    print(\"Pipeline Performance Comparison:\")\n    print(f\"Traditional: {trad_time*1000:.2f} ms\")\n    print(f\"Functional:  {func_time*1000:.2f} ms\")\n    print(f\"Results match: {abs(trad_result - func_result) < 1e-10}\")\n    \n    # Test memoization\n    test_times = tuple(range(100))\n    test_mags = tuple([12.0 + 0.5 * math.sin(t/10) for t in test_times])\n    \n    print(\"\\nMemoization Test:\")\n    start = time.time()\n    result1 = find_period_memoized(test_times, test_mags, 62.83)\n    first_call = time.time() - start\n    \n    start = time.time()\n    result2 = find_period_memoized(test_times, test_mags, 62.83)\n    second_call = time.time() - start\n    \n    print(f\"First call:  {first_call*1000:.2f} ms\")\n    print(f\"Second call: {second_call*1000:.6f} ms (from cache!)\")\n    print(f\"Speedup: {first_call/second_call:.0f}x\")\n    \n    print(f\"\\nCache info: {find_period_memoized.cache_info()}\")\n\nif __name__ == \"__main__\":\n    compare_approaches()","position":{"start":{"line":1717,"column":1},"end":{"line":1862,"column":1}},"key":"YbGaOYg87n"},{"type":"heading","depth":3,"position":{"start":{"line":1864,"column":1},"end":{"line":1864,"column":1}},"children":[{"type":"text","value":"Exercise 5.4: Integration Exercise - Complete Variable Star Pipeline","position":{"start":{"line":1864,"column":1},"end":{"line":1864,"column":1}},"key":"fzPIJHF01m"}],"identifier":"exercise-5-4-integration-exercise-complete-variable-star-pipeline","label":"Exercise 5.4: Integration Exercise - Complete Variable Star Pipeline","html_id":"exercise-5-4-integration-exercise-complete-variable-star-pipeline","implicit":true,"key":"WFk95iNGFi"},{"type":"paragraph","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"children":[{"type":"text","value":"Combine everything you’ve learned to create a production-ready analysis:","position":{"start":{"line":1866,"column":1},"end":{"line":1866,"column":1}},"key":"EbFg2qzZID"}],"key":"UOhWfLB3ZE"},{"type":"code","lang":"python","value":"\"\"\"\nBuild a complete variable star analysis pipeline using all concepts.\n\nThis exercise integrates:\n- Functions with proper error handling\n- Module organization\n- Performance optimization\n- Functional programming concepts\n- Documentation and testing\n\nCreate a script that:\n1. Loads multiple light curves\n2. Filters bad data functionally\n3. Finds periods using memoized function\n4. Generates report with statistics\n5. Handles errors gracefully\n\nThis is similar to real variable star survey pipelines!\n\"\"\"\n\n# Your implementation here","position":{"start":{"line":1868,"column":1},"end":{"line":1890,"column":1}},"key":"y3EZPBMSBg"},{"type":"heading","depth":2,"position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"children":[{"type":"text","value":"Main Takeaways","position":{"start":{"line":1892,"column":1},"end":{"line":1892,"column":1}},"key":"Nlb5AohsVz"}],"identifier":"main-takeaways","label":"Main Takeaways","html_id":"main-takeaways","implicit":true,"key":"wAqwl9Nbfq"},{"type":"paragraph","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"children":[{"type":"text","value":"Functions transform astronomy code from one-off scripts into reliable, reusable tools that form the foundation of research software. When you encapsulate logic in well-designed functions, you create building blocks that can be tested independently, shared with collaborators, and combined into complex analysis pipelines. The mutable default argument trap and scope confusion have caused real bugs in astronomical software, from IRAF scripts that accumulated data across nights to pipeline errors that corrupted months of observations. Understanding these pitfalls now saves debugging time later.","position":{"start":{"line":1894,"column":1},"end":{"line":1894,"column":1}},"key":"OhxaREnFsr"}],"key":"TpqokJsOS8"},{"type":"paragraph","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"children":[{"type":"text","value":"The progression from simple functions to modules to packages mirrors how astronomical software projects naturally grow. What starts as a quick magnitude conversion function evolves into a photometry module, then becomes part of a larger analysis package. This organic growth works best when you follow Python’s conventions: clear naming, comprehensive docstrings, and the ","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"yutWB5ZRwc"},{"type":"inlineCode","value":"if __name__ == \"__main__\"","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"sx3DaIpuSg"},{"type":"text","value":" pattern that makes modules both importable and testable. The functional programming concepts introduced here aren’t just academic exercises—they’re essential preparation for modern frameworks like JAX that power cutting-edge astronomical simulations and machine learning applications.","position":{"start":{"line":1896,"column":1},"end":{"line":1896,"column":1}},"key":"JYauyjAUbn"}],"key":"rAcjnCZeaU"},{"type":"paragraph","position":{"start":{"line":1898,"column":1},"end":{"line":1898,"column":1}},"children":[{"type":"text","value":"Performance considerations matter more in astronomy than many fields because we routinely process gigabytes to terabytes of data. The difference between a loop with function calls and vectorized operations can mean waiting hours versus minutes for results. But premature optimization is still a mistake—first make your code correct and clear, then optimize the bottlenecks that profiling reveals. The caching techniques shown here have saved countless CPU hours in period-finding algorithms and model fitting routines.","position":{"start":{"line":1898,"column":1},"end":{"line":1898,"column":1}},"key":"o2IffBsxLr"}],"key":"zkVznxNbLn"},{"type":"paragraph","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"children":[{"type":"text","value":"Looking forward, the function concepts from this chapter directly enable NumPy’s vectorized operations in Chapter 7, where entire arrays are processed without explicit loops. The module organization skills prepare you for building larger scientific packages, while the documentation practices ensure your code can be understood and maintained by others—including yourself six months from now when you’ve forgotten the details. Most importantly, thinking in terms of functional contracts and clear interfaces will make you a better computational scientist, capable of building the robust, efficient tools that modern astronomy demands.","position":{"start":{"line":1900,"column":1},"end":{"line":1900,"column":1}},"key":"DjjlzFEzQX"}],"key":"jZwroLoMM0"},{"type":"heading","depth":2,"position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"children":[{"type":"text","value":"Definitions","position":{"start":{"line":1902,"column":1},"end":{"line":1902,"column":1}},"key":"QOREM9bSiR"}],"identifier":"definitions","label":"Definitions","html_id":"definitions","implicit":true,"key":"uFzW9LviML"},{"type":"paragraph","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"children":[{"type":"text","value":"argument","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"Q6VEKeW3rU"}],"key":"MtQYy2IMqH"},{"type":"text","value":" - The actual value passed to a function when calling it (e.g., in ","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"h4TuSYdyvn"},{"type":"inlineCode","value":"f(5)","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"BQLYN7xNZx"},{"type":"text","value":", 5 is an argument)","position":{"start":{"line":1904,"column":1},"end":{"line":1904,"column":1}},"key":"JKE21iAcUF"}],"key":"nDQQy6nbav"},{"type":"paragraph","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"children":[{"type":"text","value":"closure","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"LkCJ3k4jUB"}],"key":"NWNf8jfCci"},{"type":"text","value":" - A function that remembers variables from its enclosing scope even after that scope has finished executing","position":{"start":{"line":1906,"column":1},"end":{"line":1906,"column":1}},"key":"WJBhxBybjC"}],"key":"MQawyDQfvg"},{"type":"paragraph","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"children":[{"type":"text","value":"decorator","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"dOTlb7iH3i"}],"key":"U2C14ISVgA"},{"type":"text","value":" - A function that modifies another function’s behavior without changing its code","position":{"start":{"line":1908,"column":1},"end":{"line":1908,"column":1}},"key":"Waz6Ss2uRz"}],"key":"a1vSHR6sYD"},{"type":"paragraph","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"children":[{"type":"text","value":"docstring","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"key":"aZDwskSHmW"}],"key":"xJx8twfaC1"},{"type":"text","value":" - A string literal that appears as the first statement in a function, module, or class to document its purpose","position":{"start":{"line":1910,"column":1},"end":{"line":1910,"column":1}},"key":"rPXVdC6wv1"}],"key":"SjucTCNo8H"},{"type":"paragraph","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"children":[{"type":"text","value":"function","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"key":"kd8ozluSx6"}],"key":"wiGVgMec1C"},{"type":"text","value":" - A reusable block of code that performs a specific task, taking inputs and optionally returning outputs","position":{"start":{"line":1912,"column":1},"end":{"line":1912,"column":1}},"key":"HnXsFXwp2B"}],"key":"SONgoFK03F"},{"type":"paragraph","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"children":[{"type":"text","value":"global","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"key":"rV4oEoWzjh"}],"key":"DIi1gORzJA"},{"type":"text","value":" - A keyword that allows a function to modify a variable in the global scope","position":{"start":{"line":1914,"column":1},"end":{"line":1914,"column":1}},"key":"GDepYuiwMD"}],"key":"F4pL6JiX8y"},{"type":"paragraph","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"children":[{"type":"text","value":"lambda","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"UbxDErKuHu"}],"key":"vpA5aOms9m"},{"type":"text","value":" - An anonymous function defined inline using the ","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"dl1eRf7Atg"},{"type":"inlineCode","value":"lambda","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"a4zo8k2AND"},{"type":"text","value":" keyword","position":{"start":{"line":1916,"column":1},"end":{"line":1916,"column":1}},"key":"ApY8jygF1q"}],"key":"lxbjVVAn8c"},{"type":"paragraph","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"children":[{"type":"text","value":"LEGB","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"key":"lTq1LQhBMl"}],"key":"IPDMLqvfmw"},{"type":"text","value":" - The order Python searches for variables: Local, Enclosing, Global, Built-in","position":{"start":{"line":1918,"column":1},"end":{"line":1918,"column":1}},"key":"NDa6O5J3uf"}],"key":"JEEQdxg4b8"},{"type":"paragraph","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"children":[{"type":"text","value":"memoization","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"key":"sKDf55lamZ"}],"key":"w20m5OEJKI"},{"type":"text","value":" - Caching function results to avoid recomputing expensive operations","position":{"start":{"line":1920,"column":1},"end":{"line":1920,"column":1}},"key":"POBgO6A4za"}],"key":"lPUW8B2Pdo"},{"type":"paragraph","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"children":[{"type":"text","value":"module","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"YIVRtgHGqj"}],"key":"U0uWx3uelB"},{"type":"text","value":" - A Python file containing definitions and statements that can be imported and reused","position":{"start":{"line":1922,"column":1},"end":{"line":1922,"column":1}},"key":"Tfc4GMKmyJ"}],"key":"EDrqJSWWsq"},{"type":"paragraph","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"children":[{"type":"text","value":"namespace","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"key":"HGj74YihFT"}],"key":"kJbfxIfbqh"},{"type":"text","value":" - A container that holds a set of identifiers and their associated objects","position":{"start":{"line":1924,"column":1},"end":{"line":1924,"column":1}},"key":"Dh0VIwkLfR"}],"key":"z1qP64PPrC"},{"type":"paragraph","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"children":[{"type":"text","value":"package","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"PgNCQnYhBb"}],"key":"HiXhmHkNdM"},{"type":"text","value":" - A directory containing multiple Python modules and an ","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"v16todc09H"},{"type":"inlineCode","value":"__init__.py","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"zqVKSGMXE6"},{"type":"text","value":" file","position":{"start":{"line":1926,"column":1},"end":{"line":1926,"column":1}},"key":"OyJ8KNZ7tq"}],"key":"LWGW88rK83"},{"type":"paragraph","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"children":[{"type":"text","value":"parameter","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"key":"RXQxeEb8Yp"}],"key":"zWFUWCwntm"},{"type":"text","value":" - A variable in a function definition that receives a value when the function is called","position":{"start":{"line":1928,"column":1},"end":{"line":1928,"column":1}},"key":"mxa39mb1hZ"}],"key":"nEBQKdRxME"},{"type":"paragraph","position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"children":[{"type":"text","value":"pure function","position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"key":"aXFevJCNBt"}],"key":"TXa4whLR2I"},{"type":"text","value":" - A function that always returns the same output for the same input with no side effects","position":{"start":{"line":1930,"column":1},"end":{"line":1930,"column":1}},"key":"naF6DemoBt"}],"key":"EWRrIFkOcG"},{"type":"paragraph","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"children":[{"type":"text","value":"return value","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"key":"WclmDTaQMz"}],"key":"hNM6QsXJJ8"},{"type":"text","value":" - The result that a function sends back to the code that called it","position":{"start":{"line":1932,"column":1},"end":{"line":1932,"column":1}},"key":"RKDIAuKvnD"}],"key":"ZaxqXyZzvf"},{"type":"paragraph","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"children":[{"type":"text","value":"scope","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"key":"iIs0s0AfSc"}],"key":"eT9cZ22nrR"},{"type":"text","value":" - The region of a program where a variable is accessible","position":{"start":{"line":1934,"column":1},"end":{"line":1934,"column":1}},"key":"QEZMq5bz5Q"}],"key":"x7vq05imp9"},{"type":"paragraph","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"children":[{"type":"text","value":"side effect","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"ZlREYcjXZR"}],"key":"MsCG8ZYTgQ"},{"type":"text","value":" - Any state change that occurs beyond returning a value from a function","position":{"start":{"line":1936,"column":1},"end":{"line":1936,"column":1}},"key":"ATOGEqelIl"}],"key":"Vor8HW1Rlm"},{"type":"paragraph","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"children":[{"type":"text","value":"*","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"key":"LGvaVzszyy"},{"type":"strong","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"children":[{"type":"text","value":"args","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"key":"lDWDVaeOiq"}],"key":"ClHvLGEo25"},{"type":"text","value":" - Syntax for collecting variable positional arguments into a tuple","position":{"start":{"line":1938,"column":1},"end":{"line":1938,"column":1}},"key":"LmGMyREDaB"}],"key":"T0BgcGgAAc"},{"type":"paragraph","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"children":[{"type":"text","value":"*","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"yXE3oyHlzO"},{"type":"strong","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"children":[{"type":"text","value":"kwargs","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"hFLMTkSzkG"}],"key":"CnTxZ13ZTn"},{"type":"text","value":" - Syntax for collecting variable keyword arguments into a dictionary","position":{"start":{"line":1940,"column":1},"end":{"line":1940,"column":1}},"key":"ArDxrXwYgT"}],"key":"ixXpZRgwJe"},{"type":"heading","depth":2,"position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"children":[{"type":"text","value":"Key Takeaways","position":{"start":{"line":1942,"column":1},"end":{"line":1942,"column":1}},"key":"TVznCI66Rl"}],"identifier":"key-takeaways","label":"Key Takeaways","html_id":"key-takeaways","implicit":true,"key":"UmY1yWW1EF"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1944,"column":1},"end":{"line":1957,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"children":[{"type":"text","value":"Functions are contracts: they promise specific outputs for given inputs","position":{"start":{"line":1944,"column":1},"end":{"line":1944,"column":1}},"key":"qSPFhgAIX8"}],"key":"Kp20YS0TLZ"},{"type":"listItem","spread":true,"position":{"start":{"line":1945,"column":1},"end":{"line":1945,"column":1}},"children":[{"type":"text","value":"The mutable default argument trap occurs because defaults are evaluated once at definition time","position":{"start":{"line":1945,"column":1},"end":{"line":1945,"column":1}},"key":"dGmBN25VwA"}],"key":"DKHpHWlHSL"},{"type":"listItem","spread":true,"position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"children":[{"type":"text","value":"Always use ","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"key":"efcFOGV54T"},{"type":"inlineCode","value":"None","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"key":"XjFMpBVPgQ"},{"type":"text","value":" as a sentinel for mutable default arguments","position":{"start":{"line":1946,"column":1},"end":{"line":1946,"column":1}},"key":"hHTpRpdGL5"}],"key":"LYdPvVJyVJ"},{"type":"listItem","spread":true,"position":{"start":{"line":1947,"column":1},"end":{"line":1947,"column":1}},"children":[{"type":"text","value":"Python searches for variables using LEGB: Local, Enclosing, Global, Built-in","position":{"start":{"line":1947,"column":1},"end":{"line":1947,"column":1}},"key":"o50Blr5383"}],"key":"qauQ8nXSh9"},{"type":"listItem","spread":true,"position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"children":[{"type":"text","value":"Global variables make code hard to test, debug, and parallelize","position":{"start":{"line":1948,"column":1},"end":{"line":1948,"column":1}},"key":"Y87wapZZjG"}],"key":"M8n5b0EU8r"},{"type":"listItem","spread":true,"position":{"start":{"line":1949,"column":1},"end":{"line":1949,"column":1}},"children":[{"type":"text","value":"Lambda functions are useful for simple operations but limited to single expressions","position":{"start":{"line":1949,"column":1},"end":{"line":1949,"column":1}},"key":"F3FDx3BFPD"}],"key":"dajA24XHnm"},{"type":"listItem","spread":true,"position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"children":[{"type":"text","value":"Functional programming concepts (map, filter, reduce) prepare you for modern frameworks","position":{"start":{"line":1950,"column":1},"end":{"line":1950,"column":1}},"key":"svyPEgcx00"}],"key":"WsfGcXkRo2"},{"type":"listItem","spread":true,"position":{"start":{"line":1951,"column":1},"end":{"line":1951,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":1951,"column":1},"end":{"line":1951,"column":1}},"key":"l9G3jXLdNM"},{"type":"inlineCode","value":"if __name__ == \"__main__\"","position":{"start":{"line":1951,"column":1},"end":{"line":1951,"column":1}},"key":"h1qGMn4LhD"},{"type":"text","value":" pattern makes modules both importable and executable","position":{"start":{"line":1951,"column":1},"end":{"line":1951,"column":1}},"key":"ecrwk3cnns"}],"key":"IqX7vBJjFH"},{"type":"listItem","spread":true,"position":{"start":{"line":1952,"column":1},"end":{"line":1952,"column":1}},"children":[{"type":"text","value":"Never use ","position":{"start":{"line":1952,"column":1},"end":{"line":1952,"column":1}},"key":"WdZCSR5yau"},{"type":"inlineCode","value":"from module import *","position":{"start":{"line":1952,"column":1},"end":{"line":1952,"column":1}},"key":"b9cbvfaBzx"},{"type":"text","value":" except in interactive sessions","position":{"start":{"line":1952,"column":1},"end":{"line":1952,"column":1}},"key":"XHJ7GBrmsl"}],"key":"IbtwxHEGES"},{"type":"listItem","spread":true,"position":{"start":{"line":1953,"column":1},"end":{"line":1953,"column":1}},"children":[{"type":"text","value":"Docstrings are essential for scientific code that others will use and maintain","position":{"start":{"line":1953,"column":1},"end":{"line":1953,"column":1}},"key":"a39QldUl6c"}],"key":"BnkL1Iqq5y"},{"type":"listItem","spread":true,"position":{"start":{"line":1954,"column":1},"end":{"line":1954,"column":1}},"children":[{"type":"text","value":"Function call overhead matters in tight loops—consider vectorization","position":{"start":{"line":1954,"column":1},"end":{"line":1954,"column":1}},"key":"s1OyW6df3B"}],"key":"HqmGzfSBAp"},{"type":"listItem","spread":true,"position":{"start":{"line":1955,"column":1},"end":{"line":1955,"column":1}},"children":[{"type":"text","value":"Memoization can dramatically speed up expensive repeated calculations","position":{"start":{"line":1955,"column":1},"end":{"line":1955,"column":1}},"key":"Ytt4nYrZUP"}],"key":"I1UugBrx5v"},{"type":"listItem","spread":true,"position":{"start":{"line":1956,"column":1},"end":{"line":1957,"column":1}},"children":[{"type":"text","value":"Performance optimization should follow the hierarchy: algorithm → vectorization → caching → parallelization → compilation","position":{"start":{"line":1956,"column":1},"end":{"line":1956,"column":1}},"key":"QsBQTe9xWv"}],"key":"mKPXu32GCF"}],"key":"yigfeITj8S"},{"type":"heading","depth":2,"position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"children":[{"type":"text","value":"Quick Reference Tables","position":{"start":{"line":1958,"column":1},"end":{"line":1958,"column":1}},"key":"qWlMu0Rus8"}],"identifier":"quick-reference-tables","label":"Quick Reference Tables","html_id":"quick-reference-tables","implicit":true,"key":"DaUd3nMfXP"},{"type":"heading","depth":3,"position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"children":[{"type":"text","value":"Function Definition Patterns","position":{"start":{"line":1960,"column":1},"end":{"line":1960,"column":1}},"key":"R781ktUndQ"}],"identifier":"function-definition-patterns","label":"Function Definition Patterns","html_id":"function-definition-patterns","implicit":true,"key":"huu1lMtMJm"},{"type":"table","position":{"start":{"line":1962,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"text","value":"Pattern","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"key":"fLrIrAZCzL"}],"key":"u9IB44daxw"},{"type":"tableCell","header":true,"position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"key":"EbXPn5dBP8"}],"key":"gPBtLWVpK8"},{"type":"tableCell","header":true,"position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"children":[{"type":"text","value":"Use Case","position":{"start":{"line":1962,"column":1},"end":{"line":1962,"column":1}},"key":"rrrrJIsQBJ"}],"key":"TEIcUB0K18"}],"key":"A8RzOqygp1"},{"type":"tableRow","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"text","value":"Basic function","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"key":"WfmQUM4Dck"}],"key":"JuP5lrOxjd"},{"type":"tableCell","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"inlineCode","value":"def func(x, y):","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"key":"PHxlHHv7A7"}],"key":"X64DFasbCC"},{"type":"tableCell","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"children":[{"type":"text","value":"Simple operations","position":{"start":{"line":1964,"column":1},"end":{"line":1964,"column":1}},"key":"cKQqg0NKMh"}],"key":"rv8lmvRll7"}],"key":"eJlRqSYKW2"},{"type":"tableRow","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"text","value":"Default arguments","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"key":"U2BdgkpkWF"}],"key":"nuS4BNNRR0"},{"type":"tableCell","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"inlineCode","value":"def func(x, y=10):","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"key":"TF8ubMmbxA"}],"key":"wfUnqc6sEG"},{"type":"tableCell","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"children":[{"type":"text","value":"Optional parameters","position":{"start":{"line":1965,"column":1},"end":{"line":1965,"column":1}},"key":"WsR9nPDYbo"}],"key":"zwtp8nmFPv"}],"key":"EpzDpDurUa"},{"type":"tableRow","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"text","value":"Mutable default fix","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"key":"XtFzL0J67F"}],"key":"gTeYIgl7zy"},{"type":"tableCell","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"inlineCode","value":"def func(x, data=None):","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"key":"NxzQHJNseC"}],"key":"K71uTBawuL"},{"type":"tableCell","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"children":[{"type":"text","value":"Avoid default trap","position":{"start":{"line":1966,"column":1},"end":{"line":1966,"column":1}},"key":"QYjpzzCx7R"}],"key":"zU31g8xpSt"}],"key":"QgnVDIsHVV"},{"type":"tableRow","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"children":[{"type":"text","value":"Variable args","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"key":"PirxH5dq58"}],"key":"m0FrtPn0ee"},{"type":"tableCell","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"children":[{"type":"inlineCode","value":"def func(*args):","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"key":"evzUCwCimD"}],"key":"HxvpIHPizE"},{"type":"tableCell","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"children":[{"type":"text","value":"Unknown number of inputs","position":{"start":{"line":1967,"column":1},"end":{"line":1967,"column":1}},"key":"fyW16zp7hZ"}],"key":"L0K2YJKIP5"}],"key":"fqfOFuuSVs"},{"type":"tableRow","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"children":[{"type":"text","value":"Keyword args","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"key":"dB0ABaiLBd"}],"key":"TYhTqnNg0t"},{"type":"tableCell","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"children":[{"type":"inlineCode","value":"def func(**kwargs):","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"key":"KbjYU9mPV1"}],"key":"GpL2owEhj4"},{"type":"tableCell","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"children":[{"type":"text","value":"Flexible options","position":{"start":{"line":1968,"column":1},"end":{"line":1968,"column":1}},"key":"DGKoKgS1v1"}],"key":"eO4kS6IB7l"}],"key":"o5rV1efdTk"},{"type":"tableRow","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"children":[{"type":"text","value":"Combined","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"key":"qfLrg7gFrl"}],"key":"KmW5P8GVJ7"},{"type":"tableCell","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"children":[{"type":"inlineCode","value":"def func(x, *args, y=10, **kwargs):","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"key":"XPFu2MsOr8"}],"key":"zKWvV30nke"},{"type":"tableCell","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"children":[{"type":"text","value":"Maximum flexibility","position":{"start":{"line":1969,"column":1},"end":{"line":1969,"column":1}},"key":"gNw9SM1L67"}],"key":"P4FP8Bhqwi"}],"key":"BsGTcIbQnn"},{"type":"tableRow","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"text","value":"Lambda","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"key":"K7kD9e5XyT"}],"key":"F8UexrHLGg"},{"type":"tableCell","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"inlineCode","value":"lambda x: x**2","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"key":"Cx4h4xzABO"}],"key":"KkqCvxncsc"},{"type":"tableCell","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"children":[{"type":"text","value":"Simple inline functions","position":{"start":{"line":1970,"column":1},"end":{"line":1970,"column":1}},"key":"wVLfsjwfFQ"}],"key":"E3rZBH8TNN"}],"key":"XLk5SJQAUf"}],"key":"osIn0kMXQO"},{"type":"heading","depth":3,"position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"children":[{"type":"text","value":"Module Import Patterns","position":{"start":{"line":1972,"column":1},"end":{"line":1972,"column":1}},"key":"n7ED6ctqCy"}],"identifier":"module-import-patterns","label":"Module Import Patterns","html_id":"module-import-patterns","implicit":true,"key":"y5lGFbSMfY"},{"type":"table","position":{"start":{"line":1974,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"text","value":"Pattern","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"key":"qwAbckVLPl"}],"key":"ME2ucLITKz"},{"type":"tableCell","header":true,"position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"text","value":"Example","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"key":"GeCGjbRgye"}],"key":"Rj19pxuRYu"},{"type":"tableCell","header":true,"position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"children":[{"type":"text","value":"When to Use","position":{"start":{"line":1974,"column":1},"end":{"line":1974,"column":1}},"key":"pHtZJsfAZH"}],"key":"OQXmwGBIyJ"}],"key":"hzmiXrarq3"},{"type":"tableRow","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"text","value":"Import module","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"key":"wx5UkBEwGZ"}],"key":"klE9wgiJI9"},{"type":"tableCell","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"inlineCode","value":"import numpy","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"key":"Dll1ck2f6R"}],"key":"t7D8JLYunC"},{"type":"tableCell","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"children":[{"type":"text","value":"Use many functions from module","position":{"start":{"line":1976,"column":1},"end":{"line":1976,"column":1}},"key":"zmARB814IS"}],"key":"nxZnn2wHFE"}],"key":"S2LR5qVk8R"},{"type":"tableRow","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"text","value":"Import with alias","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"key":"P5xhUi08sZ"}],"key":"cCIEe0mWhE"},{"type":"tableCell","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"inlineCode","value":"import numpy as np","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"key":"HiDdZtsDRg"}],"key":"F10EAtxjRS"},{"type":"tableCell","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"children":[{"type":"text","value":"Long module names","position":{"start":{"line":1977,"column":1},"end":{"line":1977,"column":1}},"key":"oTJgxDugeE"}],"key":"icB0mTH5JE"}],"key":"ebOs4wSxAS"},{"type":"tableRow","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"text","value":"Import specific","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"key":"vlrSbfMwfG"}],"key":"M9ATysbbnx"},{"type":"tableCell","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"inlineCode","value":"from math import sin, cos","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"key":"JUzm4XumE3"}],"key":"zEX25KVZ5C"},{"type":"tableCell","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"children":[{"type":"text","value":"Need few specific functions","position":{"start":{"line":1978,"column":1},"end":{"line":1978,"column":1}},"key":"UeqxqMCTGI"}],"key":"PQVCdSiYby"}],"key":"gDtkbcRjFf"},{"type":"tableRow","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"text","value":"Import all (avoid!)","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"key":"V6HJyFXtjW"}],"key":"uqBFZadtvv"},{"type":"tableCell","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"inlineCode","value":"from math import *","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"key":"KDjcYfSz55"}],"key":"C3QScWa95c"},{"type":"tableCell","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"children":[{"type":"text","value":"Interactive only","position":{"start":{"line":1979,"column":1},"end":{"line":1979,"column":1}},"key":"RywSRqM2AP"}],"key":"MzB9Mr8oUO"}],"key":"Clh4sVZ282"},{"type":"tableRow","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"text","value":"Package import","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"key":"xbVfskoVRn"}],"key":"ibUwdynB2o"},{"type":"tableCell","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"inlineCode","value":"from astropy.time import Time","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"key":"ykOt0DpX3N"}],"key":"oYIhGB7MOO"},{"type":"tableCell","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"children":[{"type":"text","value":"Specific submodule","position":{"start":{"line":1980,"column":1},"end":{"line":1980,"column":1}},"key":"YRprg1go9v"}],"key":"oPD41aKm2j"}],"key":"ByUJPkn2u0"}],"key":"dlJL2vtcld"},{"type":"heading","depth":3,"position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"children":[{"type":"text","value":"Common Function Gotchas and Fixes","position":{"start":{"line":1982,"column":1},"end":{"line":1982,"column":1}},"key":"CprBuhcJyN"}],"identifier":"common-function-gotchas-and-fixes","label":"Common Function Gotchas and Fixes","html_id":"common-function-gotchas-and-fixes","implicit":true,"key":"WZiVjY80pX"},{"type":"table","position":{"start":{"line":1984,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"children":[{"type":"text","value":"Problem","position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"key":"ePgAw9E3An"}],"key":"WPQoSam3q3"},{"type":"tableCell","header":true,"position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"children":[{"type":"text","value":"Symptom","position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"key":"dA8fTIfroJ"}],"key":"a7Ov8Lb8iT"},{"type":"tableCell","header":true,"position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"children":[{"type":"text","value":"Fix","position":{"start":{"line":1984,"column":1},"end":{"line":1984,"column":1}},"key":"TE8YVfGj0n"}],"key":"C1Imk1z4FQ"}],"key":"QnynnN87BZ"},{"type":"tableRow","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"children":[{"type":"text","value":"Mutable default","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"key":"jPRBb2SGT6"}],"key":"NTXiK3cZCF"},{"type":"tableCell","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"children":[{"type":"text","value":"Data persists between calls","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"key":"C4u74BMz0x"}],"key":"LWGyRWKVyn"},{"type":"tableCell","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"key":"BOfez9wLYk"},{"type":"inlineCode","value":"None","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"key":"XwEJUThB13"},{"type":"text","value":" sentinel","position":{"start":{"line":1986,"column":1},"end":{"line":1986,"column":1}},"key":"tHkRaPixOB"}],"key":"Tjsr2XXMyZ"}],"key":"T22jfhwZzE"},{"type":"tableRow","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"text","value":"UnboundLocalError","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"lJWiDDvPSf"}],"key":"kUZGzxZiEn"},{"type":"tableCell","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"text","value":"Can’t increment global","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"W1OJx5Y4eC"}],"key":"PYso8S2acc"},{"type":"tableCell","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"iXFnRFmnSU"},{"type":"inlineCode","value":"global","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"Lubwxo5dLn"},{"type":"text","value":" keyword or pass explicitly","position":{"start":{"line":1987,"column":1},"end":{"line":1987,"column":1}},"key":"l5XchnSXW0"}],"key":"JMMKZmzLLh"}],"key":"MMMAocKt13"},{"type":"tableRow","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"children":[{"type":"text","value":"Namespace pollution","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"key":"Ksc1sqTfc1"}],"key":"SyMsPszr5j"},{"type":"tableCell","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"children":[{"type":"text","value":"Name conflicts","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"key":"BzFddKfw2R"}],"key":"UWDXk1ESSD"},{"type":"tableCell","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"children":[{"type":"text","value":"Avoid wildcard imports","position":{"start":{"line":1988,"column":1},"end":{"line":1988,"column":1}},"key":"KvT6AzTtlR"}],"key":"vvHcWJ41rL"}],"key":"NrviUVtJ5f"},{"type":"tableRow","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"text","value":"Slow loops","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"key":"TttlRJnwns"}],"key":"pjRO6l8orU"},{"type":"tableCell","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"text","value":"Minutes for simple operations","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"key":"Qa4ZpFzP6h"}],"key":"jM92RzAUze"},{"type":"tableCell","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"children":[{"type":"text","value":"Vectorize with NumPy","position":{"start":{"line":1989,"column":1},"end":{"line":1989,"column":1}},"key":"JJButCGXkZ"}],"key":"W08gwtJOgV"}],"key":"ZCnY8eF5Vw"},{"type":"tableRow","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"text","value":"Repeated calculation","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"ZuiEUHtVRi"}],"key":"Fy8pxJtnZa"},{"type":"tableCell","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"text","value":"Same expensive computation","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"FMZoqeeFzl"}],"key":"iCNt7mqruf"},{"type":"tableCell","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"children":[{"type":"text","value":"Add ","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"JpsjPYPZYL"},{"type":"inlineCode","value":"@lru_cache","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"s4lwiL1LHJ"},{"type":"text","value":" decorator","position":{"start":{"line":1990,"column":1},"end":{"line":1990,"column":1}},"key":"Dmidkx0hvO"}],"key":"EZNbyAYUdn"}],"key":"FBwZSf5t2y"},{"type":"tableRow","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"text","value":"Import not found","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"key":"aQ9f2UpCjA"}],"key":"ZzeYACJDxR"},{"type":"tableCell","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"text","value":"ModuleNotFoundError","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"key":"ZPcmeT5dbM"}],"key":"Cvx5G8c4x7"},{"type":"tableCell","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"children":[{"type":"text","value":"Check sys.path or install package","position":{"start":{"line":1991,"column":1},"end":{"line":1991,"column":1}},"key":"RBxR7D4KgJ"}],"key":"GC66j2YkhV"}],"key":"wh64kQaiI2"}],"key":"uEJoH8u16V"},{"type":"heading","depth":2,"position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"children":[{"type":"text","value":"Next Chapter Preview","position":{"start":{"line":1993,"column":1},"end":{"line":1993,"column":1}},"key":"KbZBoh1gJA"}],"identifier":"next-chapter-preview","label":"Next Chapter Preview","html_id":"next-chapter-preview","implicit":true,"key":"DuUcKSDPSf"},{"type":"paragraph","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"children":[{"type":"text","value":"With functions and modules mastered, Chapter 6 will introduce Object-Oriented Programming (OOP)—a paradigm that bundles data and behavior together. You’ll learn to create classes that model astronomical objects naturally: a ","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"key":"hbrbraCPEg"},{"type":"inlineCode","value":"Star","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"key":"jqhAN1EfzF"},{"type":"text","value":" class with magnitude and position attributes, methods to calculate distance and luminosity, and special methods that make your objects work seamlessly with Python’s built-in functions.","position":{"start":{"line":1995,"column":1},"end":{"line":1995,"column":1}},"key":"nkAO9tgL8K"}],"key":"WQDt2l086P"},{"type":"paragraph","position":{"start":{"line":1997,"column":1},"end":{"line":1997,"column":1}},"children":[{"type":"text","value":"The functional programming concepts from this chapter provide essential background for OOP. Methods are just functions attached to objects, and understanding scope prepares you for the ","position":{"start":{"line":1997,"column":1},"end":{"line":1997,"column":1}},"key":"qxZThRKiZL"},{"type":"inlineCode","value":"self","position":{"start":{"line":1997,"column":1},"end":{"line":1997,"column":1}},"key":"Z48ULS7kmk"},{"type":"text","value":" parameter that confuses many beginners. The module organization skills you’ve developed will expand to organizing classes and building object hierarchies. Most importantly, the design thinking you’ve practiced—creating clean interfaces and thinking about contracts—directly applies to designing effective classes that model the complex relationships in astronomical systems.","position":{"start":{"line":1997,"column":1},"end":{"line":1997,"column":1}},"key":"JAKaiylFS9"}],"key":"xLxVhy3M2S"}],"key":"gmdH7sDgLe"}],"key":"etP0xuWRgT"},"references":{"cite":{"order":[],"data":{}}}}